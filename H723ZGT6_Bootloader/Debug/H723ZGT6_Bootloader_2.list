
H723ZGT6_Bootloader_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008910  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008be0  08008be0  00009be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e20  08008e20  00009e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e28  08008e28  00009e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008e2c  08008e2c  00009e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08008e30  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d4  24000070  08008ea0  0000a070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000744  08008ea0  0000a744  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012ff2  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029ae  00000000  00000000  0001d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d80  00000000  00000000  0001fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a51  00000000  00000000  000207c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032f98  00000000  00000000  00021211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000137d3  00000000  00000000  000541a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001426b8  00000000  00000000  0006797c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001aa034  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003eb0  00000000  00000000  001aa078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  001adf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008bc8 	.word	0x08008bc8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	08008bc8 	.word	0x08008bc8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <etx_ota_send_resp>:
  * @param type ACK or NACK
  * @retval none
  */
/*static*/
void etx_ota_send_resp( uint8_t type )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 80006aa:	23aa      	movs	r3, #170	@ 0xaa
 80006ac:	733b      	strb	r3, [r7, #12]
 80006ae:	2303      	movs	r3, #3
 80006b0:	737b      	strb	r3, [r7, #13]
 80006b2:	2301      	movs	r3, #1
 80006b4:	81fb      	strh	r3, [r7, #14]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	743b      	strb	r3, [r7, #16]
 80006ba:	2300      	movs	r3, #0
 80006bc:	747b      	strb	r3, [r7, #17]
 80006be:	2300      	movs	r3, #0
 80006c0:	74bb      	strb	r3, [r7, #18]
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
 80006c6:	2300      	movs	r3, #0
 80006c8:	753b      	strb	r3, [r7, #20]
 80006ca:	23bb      	movs	r3, #187	@ 0xbb
 80006cc:	757b      	strb	r3, [r7, #21]
    .eof         = ETX_OTA_EOF
  };

  //DELAY_MS(5);
  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 80006ce:	f107 010c 	add.w	r1, r7, #12
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d6:	220a      	movs	r2, #10
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <etx_ota_send_resp+0x48>)
 80006da:	f004 fe07 	bl	80052ec <HAL_UART_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	24000090 	.word	0x24000090

080006ec <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
/*static*/ HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
 80006f8:	4613      	mov	r3, r2
 80006fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]

  do
  {
	ret = HAL_FLASH_Unlock();
 8000700:	f001 fdb4 	bl	800226c <HAL_FLASH_Unlock>
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]


    if( ret != HAL_OK )
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d145      	bne.n	800079a <write_data_to_flash_app+0xae>
    {
      break;
    }

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);
 800070e:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <write_data_to_flash_app+0xc0>)
 8000710:	f44f 028e 	mov.w	r2, #4653056	@ 0x470000
 8000714:	615a      	str	r2, [r3, #20]
    //No need to erase every time. Erase only the first time.

    if( is_first_block )
 8000716:	787b      	ldrb	r3, [r7, #1]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00c      	beq.n	8000736 <write_data_to_flash_app+0x4a>
    {
    	printf("Erasing the Flash memory...\r\n");
 800071c:	4824      	ldr	r0, [pc, #144]	@ (80007b0 <write_data_to_flash_app+0xc4>)
 800071e:	f007 fbf1 	bl	8007f04 <puts>

    	FLASH_Erase_Sector( FLASH_SECTOR_2, FLASH_BANK_1, FLASH_VOLTAGE_RANGE_3);
 8000722:	2220      	movs	r2, #32
 8000724:	2101      	movs	r1, #1
 8000726:	2002      	movs	r0, #2
 8000728:	f001 fe30 	bl	800238c <FLASH_Erase_Sector>

    	FLASH_WaitForLastOperation( HAL_MAX_DELAY, FLASH_BANK_1 );
 800072c:	2101      	movs	r1, #1
 800072e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000732:	f001 fdd5 	bl	80022e0 <FLASH_WaitForLastOperation>
    	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
    	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
    	*/
    }

    for(int i = 0; i*4 < data_len; i+=8)
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	e021      	b.n	8000780 <write_data_to_flash_app+0x94>
    {

    	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <write_data_to_flash_app+0xc8>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <write_data_to_flash_app+0xcc>)
 8000742:	4413      	add	r3, r2
                               (uint32_t)(ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               (uint32_t)&data[i]);
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	440a      	add	r2, r1
    	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,
 800074a:	4619      	mov	r1, r3
 800074c:	2001      	movs	r0, #1
 800074e:	f001 fd1d 	bl	800218c <HAL_FLASH_Program>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]

    	FLASH_WaitForLastOperation( HAL_MAX_DELAY, FLASH_BANK_1 );
 8000756:	2101      	movs	r1, #1
 8000758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800075c:	f001 fdc0 	bl	80022e0 <FLASH_WaitForLastOperation>

    	if( ret == HAL_OK )
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d105      	bne.n	8000772 <write_data_to_flash_app+0x86>
    	{
    		//update the data count
    		ota_fw_received_size += 32;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <write_data_to_flash_app+0xc8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3320      	adds	r3, #32
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <write_data_to_flash_app+0xc8>)
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e003      	b.n	800077a <write_data_to_flash_app+0x8e>
    	}
    	else
    	{
    		printf("Flash Write Error\r\n");
 8000772:	4812      	ldr	r0, [pc, #72]	@ (80007bc <write_data_to_flash_app+0xd0>)
 8000774:	f007 fbc6 	bl	8007f04 <puts>
    		break;
 8000778:	e007      	b.n	800078a <write_data_to_flash_app+0x9e>
    for(int i = 0; i*4 < data_len; i+=8)
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3308      	adds	r3, #8
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	009a      	lsls	r2, r3, #2
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	429a      	cmp	r2, r3
 8000788:	dbd8      	blt.n	800073c <write_data_to_flash_app+0x50>
    	}
    }

    if( ret != HAL_OK )
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <write_data_to_flash_app+0xb2>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000790:	f001 fd8e 	bl	80022b0 <HAL_FLASH_Lock>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e002      	b.n	80007a0 <write_data_to_flash_app+0xb4>
      break;
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <write_data_to_flash_app+0xb4>
      break;
 800079e:	bf00      	nop

  }while( false );

  return ret;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	52002000 	.word	0x52002000
 80007b0:	08008be0 	.word	0x08008be0
 80007b4:	2400008c 	.word	0x2400008c
 80007b8:	08040000 	.word	0x08040000
 80007bc:	08008c00 	.word	0x08008c00

080007c0 <has_download_begun>:

bool has_download_begun()
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	if(ota_fw_received_size == 0)
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <has_download_begun+0x1c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <has_download_begun+0x10>
	{
		return true;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e000      	b.n	80007d2 <has_download_begun+0x12>
	}

	return false;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	2400008c 	.word	0x2400008c

080007e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d013      	beq.n	8000820 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000800:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00b      	beq.n	8000820 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000808:	e000      	b.n	800080c <ITM_SendChar+0x2c>
    {
      __NOP();
 800080a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800080c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f9      	beq.n	800080a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000816:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

	 	 switch(RxBuffer[PACKET_TYPE_INDEX])
 8000838:	4b73      	ldr	r3, [pc, #460]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	2b02      	cmp	r3, #2
 800083e:	f000 8083 	beq.w	8000948 <HAL_UART_RxCpltCallback+0x118>
 8000842:	2b02      	cmp	r3, #2
 8000844:	f300 80ae 	bgt.w	80009a4 <HAL_UART_RxCpltCallback+0x174>
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <HAL_UART_RxCpltCallback+0x22>
 800084c:	2b01      	cmp	r3, #1
 800084e:	d021      	beq.n	8000894 <HAL_UART_RxCpltCallback+0x64>
 8000850:	e0a8      	b.n	80009a4 <HAL_UART_RxCpltCallback+0x174>
	 	 {
	        case ETX_OTA_PACKET_TYPE_CMD:
	        	if(RxBuffer[PACKET_CMD_INDEX] == ETX_OTA_CMD_START)
 8000852:	4b6d      	ldr	r3, [pc, #436]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d107      	bne.n	800086a <HAL_UART_RxCpltCallback+0x3a>
	        	{
	        		printf("Start packet transmission received.\n");
 800085a:	486c      	ldr	r0, [pc, #432]	@ (8000a0c <HAL_UART_RxCpltCallback+0x1dc>)
 800085c:	f007 fb52 	bl	8007f04 <puts>
	        		HAL_UART_Receive_IT(&huart2, RxBuffer, ETX_OTA_HEADER_PACKET_SIZE);
 8000860:	2219      	movs	r2, #25
 8000862:	4969      	ldr	r1, [pc, #420]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 8000864:	486a      	ldr	r0, [pc, #424]	@ (8000a10 <HAL_UART_RxCpltCallback+0x1e0>)
 8000866:	f004 fdcf 	bl	8005408 <HAL_UART_Receive_IT>
	        	}
	        	if(RxBuffer[PACKET_CMD_INDEX] == ETX_OTA_CMD_END)
 800086a:	4b67      	ldr	r3, [pc, #412]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	2b01      	cmp	r3, #1
 8000870:	f040 809c 	bne.w	80009ac <HAL_UART_RxCpltCallback+0x17c>
	        	{
	        		printf("End of transmission packet received.\n");
 8000874:	4867      	ldr	r0, [pc, #412]	@ (8000a14 <HAL_UART_RxCpltCallback+0x1e4>)
 8000876:	f007 fb45 	bl	8007f04 <puts>
	        		upload_complete = 1;
 800087a:	4b67      	ldr	r3, [pc, #412]	@ (8000a18 <HAL_UART_RxCpltCallback+0x1e8>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
	        		remaining_data = 0;
 8000880:	4b66      	ldr	r3, [pc, #408]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
	        		received_data = 0;
 8000886:	4b66      	ldr	r3, [pc, #408]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1f0>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
	        		next_data_packet_size = 0;
 800088c:	4b65      	ldr	r3, [pc, #404]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 800088e:	2200      	movs	r2, #0
 8000890:	801a      	strh	r2, [r3, #0]
	        	}
	            break;
 8000892:	e08b      	b.n	80009ac <HAL_UART_RxCpltCallback+0x17c>

	        case ETX_OTA_PACKET_TYPE_DATA:

	        	printf("Data packet received.\n");
 8000894:	4864      	ldr	r0, [pc, #400]	@ (8000a28 <HAL_UART_RxCpltCallback+0x1f8>)
 8000896:	f007 fb35 	bl	8007f04 <puts>
	            received_data = (RxBuffer[3]<<8) | (RxBuffer[2]);
 800089a:	4b5b      	ldr	r3, [pc, #364]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 800089c:	78db      	ldrb	r3, [r3, #3]
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	4a59      	ldr	r2, [pc, #356]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 80008a2:	7892      	ldrb	r2, [r2, #2]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1f0>)
 80008aa:	601a      	str	r2, [r3, #0]
	            //function to save received buffer data to flash//
	            ex = write_data_to_flash_app( &(RxBuffer[4]), received_data, has_download_begun() );
 80008ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1f0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	b29c      	uxth	r4, r3
 80008b2:	f7ff ff85 	bl	80007c0 <has_download_begun>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4621      	mov	r1, r4
 80008bc:	485b      	ldr	r0, [pc, #364]	@ (8000a2c <HAL_UART_RxCpltCallback+0x1fc>)
 80008be:	f7ff ff15 	bl	80006ec <write_data_to_flash_app>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a30 <HAL_UART_RxCpltCallback+0x200>)
 80008c8:	701a      	strb	r2, [r3, #0]

	            if(received_data == next_data_packet_size)
 80008ca:	4b56      	ldr	r3, [pc, #344]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b53      	ldr	r3, [pc, #332]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1f0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d10a      	bne.n	80008ee <HAL_UART_RxCpltCallback+0xbe>
	            {
	                printf("Received the expected packet size.\n");
 80008d8:	4856      	ldr	r0, [pc, #344]	@ (8000a34 <HAL_UART_RxCpltCallback+0x204>)
 80008da:	f007 fb13 	bl	8007f04 <puts>
	                remaining_data -= next_data_packet_size;
 80008de:	4b4f      	ldr	r3, [pc, #316]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a50      	ldr	r2, [pc, #320]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 80008e4:	8812      	ldrh	r2, [r2, #0]
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	4a4c      	ldr	r2, [pc, #304]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	e009      	b.n	8000902 <HAL_UART_RxCpltCallback+0xd2>
	            }
	            else
	            {
	                printf("Did not receive the expected packet size.\n");
 80008ee:	4852      	ldr	r0, [pc, #328]	@ (8000a38 <HAL_UART_RxCpltCallback+0x208>)
 80008f0:	f007 fb08 	bl	8007f04 <puts>
	                remaining_data -= received_data;
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b49      	ldr	r3, [pc, #292]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1f0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	4a47      	ldr	r2, [pc, #284]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 8000900:	6013      	str	r3, [r2, #0]
	            }

	            if(remaining_data > ETX_OTA_DATA_MAX_SIZE)
 8000902:	4b46      	ldr	r3, [pc, #280]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800090a:	d904      	bls.n	8000916 <HAL_UART_RxCpltCallback+0xe6>
	            {
	                next_data_packet_size = ETX_OTA_DATA_MAX_SIZE;
 800090c:	4b45      	ldr	r3, [pc, #276]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 800090e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000912:	801a      	strh	r2, [r3, #0]
 8000914:	e004      	b.n	8000920 <HAL_UART_RxCpltCallback+0xf0>
	            }
	            else
	            {
	                next_data_packet_size = remaining_data;
 8000916:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 800091e:	801a      	strh	r2, [r3, #0]
	            }

	            //write_data_to_flash();
	            if(remaining_data == 0)
 8000920:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d105      	bne.n	8000934 <HAL_UART_RxCpltCallback+0x104>
	            {
	                HAL_UART_Receive_IT(&huart2, RxBuffer, ETX_OTA_COMMAND_PACKET_SIZE);
 8000928:	220a      	movs	r2, #10
 800092a:	4937      	ldr	r1, [pc, #220]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 800092c:	4838      	ldr	r0, [pc, #224]	@ (8000a10 <HAL_UART_RxCpltCallback+0x1e0>)
 800092e:	f004 fd6b 	bl	8005408 <HAL_UART_Receive_IT>
	            else
	            {
	                HAL_UART_Receive_IT(&huart2, RxBuffer, next_data_packet_size + DATA_PACKET_OVERHEAD);
	            }

	            break;
 8000932:	e03c      	b.n	80009ae <HAL_UART_RxCpltCallback+0x17e>
	                HAL_UART_Receive_IT(&huart2, RxBuffer, next_data_packet_size + DATA_PACKET_OVERHEAD);
 8000934:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	3309      	adds	r3, #9
 800093a:	b29b      	uxth	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	4932      	ldr	r1, [pc, #200]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 8000940:	4833      	ldr	r0, [pc, #204]	@ (8000a10 <HAL_UART_RxCpltCallback+0x1e0>)
 8000942:	f004 fd61 	bl	8005408 <HAL_UART_Receive_IT>
	            break;
 8000946:	e032      	b.n	80009ae <HAL_UART_RxCpltCallback+0x17e>

	        case ETX_OTA_PACKET_TYPE_HEADER:

	        	printf("Header packet received.\n");
 8000948:	483c      	ldr	r0, [pc, #240]	@ (8000a3c <HAL_UART_RxCpltCallback+0x20c>)
 800094a:	f007 fadb 	bl	8007f04 <puts>

	            uint32_t total_data_size = ( (RxBuffer[7]<<24) | (RxBuffer[6]<<16) | (RxBuffer[5]<<8) | (RxBuffer[4]) );
 800094e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 8000950:	79db      	ldrb	r3, [r3, #7]
 8000952:	061a      	lsls	r2, r3, #24
 8000954:	4b2c      	ldr	r3, [pc, #176]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 8000956:	799b      	ldrb	r3, [r3, #6]
 8000958:	041b      	lsls	r3, r3, #16
 800095a:	431a      	orrs	r2, r3
 800095c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 800095e:	795b      	ldrb	r3, [r3, #5]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	4313      	orrs	r3, r2
 8000964:	4a28      	ldr	r2, [pc, #160]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 8000966:	7912      	ldrb	r2, [r2, #4]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
	            remaining_data = total_data_size;
 800096c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	6013      	str	r3, [r2, #0]

	            if(remaining_data > ETX_OTA_DATA_MAX_SIZE)
 8000972:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800097a:	d904      	bls.n	8000986 <HAL_UART_RxCpltCallback+0x156>
	            {
	                next_data_packet_size = ETX_OTA_DATA_MAX_SIZE;
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 800097e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000982:	801a      	strh	r2, [r3, #0]
 8000984:	e004      	b.n	8000990 <HAL_UART_RxCpltCallback+0x160>
	            }
	            else
	            {
	                next_data_packet_size = remaining_data;
 8000986:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ec>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 800098e:	801a      	strh	r2, [r3, #0]
	            }

	            HAL_UART_Receive_IT(&huart2, RxBuffer, next_data_packet_size + DATA_PACKET_OVERHEAD);
 8000990:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1f4>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	3309      	adds	r3, #9
 8000996:	b29b      	uxth	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	491b      	ldr	r1, [pc, #108]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1d8>)
 800099c:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <HAL_UART_RxCpltCallback+0x1e0>)
 800099e:	f004 fd33 	bl	8005408 <HAL_UART_Receive_IT>
	            break;
 80009a2:	e004      	b.n	80009ae <HAL_UART_RxCpltCallback+0x17e>

	        default:
	        	printf("Unnamed packet received.\n");
 80009a4:	4826      	ldr	r0, [pc, #152]	@ (8000a40 <HAL_UART_RxCpltCallback+0x210>)
 80009a6:	f007 faad 	bl	8007f04 <puts>
	            //HAL_UART_Receive_IT(&huart2, RxBuffer, 10);
	            break;
 80009aa:	e000      	b.n	80009ae <HAL_UART_RxCpltCallback+0x17e>
	            break;
 80009ac:	bf00      	nop
	    }

		DELAY_MS(200);
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e01f      	b.n	80009f4 <HAL_UART_RxCpltCallback+0x1c4>
 80009b4:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <HAL_UART_RxCpltCallback+0x214>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <HAL_UART_RxCpltCallback+0x218>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a23      	ldr	r2, [pc, #140]	@ (8000a4c <HAL_UART_RxCpltCallback+0x21c>)
 80009c0:	fba2 2303 	umull	r2, r3, r2, r3
 80009c4:	0c9b      	lsrs	r3, r3, #18
 80009c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ca:	fb03 f202 	mul.w	r2, r3, r2
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <HAL_UART_RxCpltCallback+0x218>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	491e      	ldr	r1, [pc, #120]	@ (8000a4c <HAL_UART_RxCpltCallback+0x21c>)
 80009d4:	fba1 1303 	umull	r1, r3, r1, r3
 80009d8:	0c9b      	lsrs	r3, r3, #18
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <HAL_UART_RxCpltCallback+0x214>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	68ba      	ldr	r2, [r7, #8]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d8f8      	bhi.n	80009e0 <HAL_UART_RxCpltCallback+0x1b0>
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80009f8:	d9dc      	bls.n	80009b4 <HAL_UART_RxCpltCallback+0x184>
	    etx_ota_send_resp( ETX_OTA_ACK );
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fe50 	bl	80006a0 <etx_ota_send_resp>

}
 8000a00:	bf00      	nop
 8000a02:	371c      	adds	r7, #28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	240001b8 	.word	0x240001b8
 8000a0c:	08008c14 	.word	0x08008c14
 8000a10:	24000090 	.word	0x24000090
 8000a14:	08008c38 	.word	0x08008c38
 8000a18:	240005d0 	.word	0x240005d0
 8000a1c:	240005c8 	.word	0x240005c8
 8000a20:	240005c4 	.word	0x240005c4
 8000a24:	240005cc 	.word	0x240005cc
 8000a28:	08008c60 	.word	0x08008c60
 8000a2c:	240001bc 	.word	0x240001bc
 8000a30:	24000000 	.word	0x24000000
 8000a34:	08008c78 	.word	0x08008c78
 8000a38:	08008c9c 	.word	0x08008c9c
 8000a3c:	08008cc8 	.word	0x08008cc8
 8000a40:	08008ce0 	.word	0x08008ce0
 8000a44:	e000e010 	.word	0xe000e010
 8000a48:	24000004 	.word	0x24000004
 8000a4c:	431bde83 	.word	0x431bde83

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f000 fc79 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f877 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 f96b 	bl	8000d38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a62:	f000 f91d 	bl	8000ca0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000a66:	f000 f8cf 	bl	8000c08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RxBuffer, ETX_OTA_COMMAND_PACKET_SIZE);
 8000a6a:	220a      	movs	r2, #10
 8000a6c:	492b      	ldr	r1, [pc, #172]	@ (8000b1c <main+0xcc>)
 8000a6e:	482c      	ldr	r0, [pc, #176]	@ (8000b20 <main+0xd0>)
 8000a70:	f004 fcca 	bl	8005408 <HAL_UART_Receive_IT>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 8000a74:	2300      	movs	r3, #0
 8000a76:	2202      	movs	r2, #2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482a      	ldr	r0, [pc, #168]	@ (8000b24 <main+0xd4>)
 8000a7c:	f007 f9da 	bl	8007e34 <iprintf>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); /*Turn on Green User LED PB0*/
 8000a80:	2201      	movs	r2, #1
 8000a82:	2101      	movs	r1, #1
 8000a84:	4828      	ldr	r0, [pc, #160]	@ (8000b28 <main+0xd8>)
 8000a86:	f001 fe65 	bl	8002754 <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4824      	ldr	r0, [pc, #144]	@ (8000b24 <main+0xd4>)
 8000a92:	f007 f9cf 	bl	8007e34 <iprintf>

  /* Check the user push button is pressed for 3 seconds */
  GPIO_PinState OTA_Pin_state;
  uint32_t end_tick = HAL_GetTick() + 3000;
 8000a96:	f000 fcdf 	bl	8001458 <HAL_GetTick>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8000aa0:	60fb      	str	r3, [r7, #12]

  printf("Press the User Button to trigger OTA update...\r\n");
 8000aa2:	4822      	ldr	r0, [pc, #136]	@ (8000b2c <main+0xdc>)
 8000aa4:	f007 fa2e 	bl	8007f04 <puts>
  do
  {
	  OTA_Pin_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aac:	4820      	ldr	r0, [pc, #128]	@ (8000b30 <main+0xe0>)
 8000aae:	f001 fe39 	bl	8002724 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	72fb      	strb	r3, [r7, #11]

	  uint32_t current_tick = HAL_GetTick();
 8000ab6:	f000 fccf 	bl	8001458 <HAL_GetTick>
 8000aba:	6078      	str	r0, [r7, #4]

	  if( (OTA_Pin_state != GPIO_PIN_RESET) || (current_tick > end_tick) )
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d104      	bne.n	8000acc <main+0x7c>
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d800      	bhi.n	8000acc <main+0x7c>
  {
 8000aca:	e7ed      	b.n	8000aa8 <main+0x58>

  }while(1);

  /* STart the Firmware/Application update */

  if(OTA_Pin_state == GPIO_PIN_SET)
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11f      	bne.n	8000b12 <main+0xc2>
  {
	  printf("Starting Firmware Download!!!\r\n");
 8000ad2:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <main+0xe4>)
 8000ad4:	f007 fa16 	bl	8007f04 <puts>

		upload_complete = 0;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <main+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
		remaining_data = 0;
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <main+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
		received_data = 0;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <main+0xf0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
		next_data_packet_size = 0;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <main+0xf4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	801a      	strh	r2, [r3, #0]
		  // Reset to load the new application //
		  printf("Firmware update is done!!! Rebooting...\r\n");
		  HAL_NVIC_SystemReset();
	  }
	  */
	  while(upload_complete == 0)
 8000af0:	bf00      	nop
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <main+0xe8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0fb      	beq.n	8000af2 <main+0xa2>
	  {

	  }
	  if(upload_complete == 1)
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <main+0xe8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d107      	bne.n	8000b12 <main+0xc2>
	  {
		  // Reset to load the new application //
		  printf("Firmware update is done!!! Rebooting...\r\n");
 8000b02:	4811      	ldr	r0, [pc, #68]	@ (8000b48 <main+0xf8>)
 8000b04:	f007 f9fe 	bl	8007f04 <puts>
		  upload_complete = 0;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <main+0xe8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
		  HAL_NVIC_SystemReset();
 8000b0e:	f000 fdc8 	bl	80016a2 <HAL_NVIC_SystemReset>
	  }
  }

  //HAL_Delay(2000);

  goto_application();
 8000b12:	f000 f9b5 	bl	8000e80 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b16:	bf00      	nop
 8000b18:	e7fd      	b.n	8000b16 <main+0xc6>
 8000b1a:	bf00      	nop
 8000b1c:	240001b8 	.word	0x240001b8
 8000b20:	24000090 	.word	0x24000090
 8000b24:	08008cfc 	.word	0x08008cfc
 8000b28:	58020400 	.word	0x58020400
 8000b2c:	08008d1c 	.word	0x08008d1c
 8000b30:	58020800 	.word	0x58020800
 8000b34:	08008d4c 	.word	0x08008d4c
 8000b38:	240005d0 	.word	0x240005d0
 8000b3c:	240005c8 	.word	0x240005c8
 8000b40:	240005c4 	.word	0x240005c4
 8000b44:	240005cc 	.word	0x240005cc
 8000b48:	08008d6c 	.word	0x08008d6c

08000b4c <SystemClock_Config>:
  * @brief System Clock Configuration
  *
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	@ 0x70
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	224c      	movs	r2, #76	@ 0x4c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 f9da 	bl	8007f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2220      	movs	r2, #32
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 f9d4 	bl	8007f14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f001 fe0b 	bl	8002788 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <SystemClock_Config+0xb8>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b7e:	4a21      	ldr	r2, [pc, #132]	@ (8000c04 <SystemClock_Config+0xb8>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <SystemClock_Config+0xb8>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b92:	bf00      	nop
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <SystemClock_Config+0xb8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ba0:	d1f8      	bne.n	8000b94 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000baa:	2340      	movs	r3, #64	@ 0x40
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fe20 	bl	80027fc <HAL_RCC_OscConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bc2:	f000 f97f 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc6:	233f      	movs	r3, #63	@ 0x3f
 8000bc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bda:	2340      	movs	r3, #64	@ 0x40
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2101      	movs	r1, #1
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 f9e0 	bl	8002fb0 <HAL_RCC_ClockConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bf6:	f000 f965 	bl	8000ec4 <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3770      	adds	r7, #112	@ 0x70
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58024800 	.word	0x58024800

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c0e:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <MX_USART2_UART_Init+0x94>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c50:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c52:	f004 fafb 	bl	800524c <HAL_UART_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f000 f932 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c64:	f006 ff59 	bl	8007b1a <HAL_UARTEx_SetTxFifoThreshold>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6e:	f000 f929 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c76:	f006 ff8e 	bl	8007b96 <HAL_UARTEx_SetRxFifoThreshold>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f000 f920 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_USART2_UART_Init+0x90>)
 8000c86:	f006 ff0f 	bl	8007aa8 <HAL_UARTEx_DisableFifoMode>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f000 f918 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	24000090 	.word	0x24000090
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000ca6:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <MX_USART3_UART_Init+0x94>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce8:	4811      	ldr	r0, [pc, #68]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cea:	f004 faaf 	bl	800524c <HAL_UART_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cf4:	f000 f8e6 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000cfc:	f006 ff0d 	bl	8007b1a <HAL_UARTEx_SetTxFifoThreshold>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d06:	f000 f8dd 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000d0e:	f006 ff42 	bl	8007b96 <HAL_UARTEx_SetRxFifoThreshold>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f000 f8d4 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <MX_USART3_UART_Init+0x90>)
 8000d1e:	f006 fec3 	bl	8007aa8 <HAL_UARTEx_DisableFifoMode>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f000 f8cc 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	24000124 	.word	0x24000124
 8000d34:	40004800 	.word	0x40004800

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	4a37      	ldr	r2, [pc, #220]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5e:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b31      	ldr	r3, [pc, #196]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	4a30      	ldr	r2, [pc, #192]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	4a28      	ldr	r2, [pc, #160]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9a:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_GPIO_Init+0xfc>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2101      	movs	r1, #1
 8000dca:	481b      	ldr	r0, [pc, #108]	@ (8000e38 <MX_GPIO_Init+0x100>)
 8000dcc:	f001 fcc2 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	4819      	ldr	r0, [pc, #100]	@ (8000e3c <MX_GPIO_Init+0x104>)
 8000dd6:	f001 fcbd 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <MX_GPIO_Init+0x108>)
 8000df0:	f001 faf0 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000df4:	2301      	movs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	@ (8000e38 <MX_GPIO_Init+0x100>)
 8000e0c:	f001 fae2 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_GPIO_Init+0x104>)
 8000e28:	f001 fad4 	bl	80023d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	@ 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020400 	.word	0x58020400
 8000e3c:	58021000 	.word	0x58021000
 8000e40:	58020800 	.word	0x58020800

08000e44 <_write>:
	 */
int _write(int file, char*ptr, int len)
#else
int fputc(int ch, FILE *f)
#endif /*(__GNUC__)*/
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	/* Place your implementation of fputc here*/
	/* e.g write a character to the UART3 and Loop until the end of transmission */
	int i = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e009      	b.n	8000e6e <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fcbc 	bl	80007e0 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbf1      	blt.n	8000e5a <_write+0x16>
	}
	return len;
 8000e76:	687b      	ldr	r3, [r7, #4]

}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <goto_application>:

static void goto_application (void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	printf("Jumping to Application \r\n");
 8000e86:	480a      	ldr	r0, [pc, #40]	@ (8000eb0 <goto_application+0x30>)
 8000e88:	f007 f83c 	bl	8007f04 <puts>

	const void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t *)(0x08040000 + 0x04));
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <goto_application+0x34>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	607b      	str	r3, [r7, #4]
	//app_reset_handler = (void *)*(volatile uint32_t *)reset_handler_address;
	//const JumpStruct* vector_p = (JumpStruct*)reset_handler_address;
	//__set_MSP((*(volatile uint32_t *) 0x08080000));

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //turn off the GREEN LED PB0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	4808      	ldr	r0, [pc, #32]	@ (8000eb8 <goto_application+0x38>)
 8000e98:	f001 fc5c 	bl	8002754 <HAL_GPIO_WritePin>

	SCB->VTOR = (uint32_t) *((__IO uint32_t*)ETX_APP_FLASH_ADDR);
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <goto_application+0x3c>)
 8000e9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <goto_application+0x40>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6093      	str	r3, [r2, #8]

	app_reset_handler();	//call the application reset handler
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4798      	blx	r3
    //asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	08008d98 	.word	0x08008d98
 8000eb4:	08040004 	.word	0x08040004
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	08040000 	.word	0x08040000
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ba      	sub	sp, #232	@ 0xe8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	22b8      	movs	r2, #184	@ 0xb8
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 fff5 	bl	8007f14 <memset>
  if(huart->Instance==USART2)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a51      	ldr	r2, [pc, #324]	@ (8001074 <HAL_UART_MspInit+0x170>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d14e      	bne.n	8000fd2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f34:	f04f 0202 	mov.w	r2, #2
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fbbc 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f56:	f7ff ffb5 	bl	8000ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	4b47      	ldr	r3, [pc, #284]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8000f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f60:	4a45      	ldr	r2, [pc, #276]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f6a:	4b43      	ldr	r3, [pc, #268]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8000f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	4b3f      	ldr	r3, [pc, #252]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f88:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f96:	2360      	movs	r3, #96	@ 0x60
 8000f98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4830      	ldr	r0, [pc, #192]	@ (800107c <HAL_UART_MspInit+0x178>)
 8000fbc:	f001 fa0a 	bl	80023d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2026      	movs	r0, #38	@ 0x26
 8000fc6:	f000 fb44 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fca:	2026      	movs	r0, #38	@ 0x26
 8000fcc:	f000 fb5b 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd0:	e04b      	b.n	800106a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8001080 <HAL_UART_MspInit+0x17c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d146      	bne.n	800106a <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fdc:	f04f 0202 	mov.w	r2, #2
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 fb68 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000ffe:	f7ff ff61 	bl	8000ec4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8001004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_UART_MspInit+0x174>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8001014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_UART_MspInit+0x174>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_UART_MspInit+0x178>)
 8001066:	f001 f9b5 	bl	80023d4 <HAL_GPIO_Init>
}
 800106a:	bf00      	nop
 800106c:	37e8      	adds	r7, #232	@ 0xe8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	58024400 	.word	0x58024400
 800107c:	58020c00 	.word	0x58020c00
 8001080:	40004800 	.word	0x40004800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <UsageFault_Handler+0x4>

080010ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010da:	f000 f9a9 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e8:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <USART2_IRQHandler+0x10>)
 80010ea:	f004 f9d9 	bl	80054a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	24000090 	.word	0x24000090

080010f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e00a      	b.n	8001120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110a:	f3af 8000 	nop.w
 800110e:	4601      	mov	r1, r0
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf0      	blt.n	800110a <_read+0x12>
  }

  return len;
 8001128:	687b      	ldr	r3, [r7, #4]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800115a:	605a      	str	r2, [r3, #4]
  return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <_isatty>:

int _isatty(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f006 feaa 	bl	8007f24 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	24050000 	.word	0x24050000
 80011fc:	00000400 	.word	0x00000400
 8001200:	240005d4 	.word	0x240005d4
 8001204:	24000748 	.word	0x24000748

08001208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800120c:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <SystemInit+0xd0>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001212:	4a31      	ldr	r2, [pc, #196]	@ (80012d8 <SystemInit+0xd0>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800121c:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <SystemInit+0xd4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	2b06      	cmp	r3, #6
 8001226:	d807      	bhi.n	8001238 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001228:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <SystemInit+0xd4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 030f 	bic.w	r3, r3, #15
 8001230:	4a2a      	ldr	r2, [pc, #168]	@ (80012dc <SystemInit+0xd4>)
 8001232:	f043 0307 	orr.w	r3, r3, #7
 8001236:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <SystemInit+0xd8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a28      	ldr	r2, [pc, #160]	@ (80012e0 <SystemInit+0xd8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001244:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <SystemInit+0xd8>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <SystemInit+0xd8>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4924      	ldr	r1, [pc, #144]	@ (80012e0 <SystemInit+0xd8>)
 8001250:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <SystemInit+0xdc>)
 8001252:	4013      	ands	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <SystemInit+0xd4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <SystemInit+0xd4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 030f 	bic.w	r3, r3, #15
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <SystemInit+0xd4>)
 800126c:	f043 0307 	orr.w	r3, r3, #7
 8001270:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <SystemInit+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <SystemInit+0xd8>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <SystemInit+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <SystemInit+0xd8>)
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <SystemInit+0xe0>)
 8001288:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <SystemInit+0xd8>)
 800128c:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <SystemInit+0xe4>)
 800128e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <SystemInit+0xd8>)
 8001292:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <SystemInit+0xe8>)
 8001294:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <SystemInit+0xd8>)
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <SystemInit+0xd8>)
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <SystemInit+0xe8>)
 80012a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <SystemInit+0xd8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <SystemInit+0xd8>)
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <SystemInit+0xe8>)
 80012ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <SystemInit+0xd8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <SystemInit+0xd8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a09      	ldr	r2, [pc, #36]	@ (80012e0 <SystemInit+0xd8>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <SystemInit+0xd8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <SystemInit+0xec>)
 80012c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	52002000 	.word	0x52002000
 80012e0:	58024400 	.word	0x58024400
 80012e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012e8:	02020200 	.word	0x02020200
 80012ec:	01ff0000 	.word	0x01ff0000
 80012f0:	01010280 	.word	0x01010280
 80012f4:	52004000 	.word	0x52004000

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012fc:	f7ff ff84 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	@ (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	@ (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f006 fe03 	bl	8007f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff fb91 	bl	8000a50 <main>
  bx  lr
 800132e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001338:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 800133c:	08008e30 	.word	0x08008e30
  ldr r2, =_sbss
 8001340:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001344:	24000744 	.word	0x24000744

08001348 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC3_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f972 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001358:	f001 ffe0 	bl	800331c <HAL_RCC_GetSysClockFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_Init+0x68>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	4913      	ldr	r1, [pc, #76]	@ (80013b8 <HAL_Init+0x6c>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_Init+0x68>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <HAL_Init+0x6c>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <HAL_Init+0x70>)
 800138e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001390:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <HAL_Init+0x74>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001396:	200f      	movs	r0, #15
 8001398:	f000 f814 	bl	80013c4 <HAL_InitTick>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e002      	b.n	80013ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013a6:	f7ff fd93 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	58024400 	.word	0x58024400
 80013b8:	08008db4 	.word	0x08008db4
 80013bc:	24000008 	.word	0x24000008
 80013c0:	24000004 	.word	0x24000004

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <HAL_InitTick+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e021      	b.n	800141c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <HAL_InitTick+0x64>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_InitTick+0x60>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f95b 	bl	80016aa <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800140c:	f000 f921 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	@ (800142c <HAL_InitTick+0x68>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	24000010 	.word	0x24000010
 8001428:	24000004 	.word	0x24000004
 800142c:	2400000c 	.word	0x2400000c

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	24000010 	.word	0x24000010
 8001454:	240005d8 	.word	0x240005d8

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	240005d8 	.word	0x240005d8

08001470 <__NVIC_SetPriorityGrouping>:
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	4313      	orrs	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	05fa0000 	.word	0x05fa0000

080014b8 <__NVIC_GetPriorityGrouping>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	@ (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	@ (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	@ (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	@ 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <__NVIC_SystemReset>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015d0:	f3bf 8f4f 	dsb	sy
}
 80015d4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <__NVIC_SystemReset+0x24>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015de:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <__NVIC_SystemReset+0x24>)
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_SystemReset+0x28>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80015e6:	f3bf 8f4f 	dsb	sy
}
 80015ea:	bf00      	nop
    __NOP();
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <__NVIC_SystemReset+0x20>
 80015f0:	e000ed00 	.word	0xe000ed00
 80015f4:	05fa0004 	.word	0x05fa0004

080015f8 <SysTick_Config>:
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800161c:	f7ff ff78 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff13 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff2a 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff7a 	bl	8001564 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff49 	bl	8001510 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff1d 	bl	80014d4 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80016a6:	f7ff ff91 	bl	80015cc <__NVIC_SystemReset>

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa0 	bl	80015f8 <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff fec4 	bl	8001458 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e2dc      	b.n	8001c96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d008      	beq.n	80016fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e2cd      	b.n	8001c96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a76      	ldr	r2, [pc, #472]	@ (80018d8 <HAL_DMA_Abort+0x214>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04a      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a74      	ldr	r2, [pc, #464]	@ (80018dc <HAL_DMA_Abort+0x218>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d045      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a73      	ldr	r2, [pc, #460]	@ (80018e0 <HAL_DMA_Abort+0x21c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d040      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a71      	ldr	r2, [pc, #452]	@ (80018e4 <HAL_DMA_Abort+0x220>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d03b      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a70      	ldr	r2, [pc, #448]	@ (80018e8 <HAL_DMA_Abort+0x224>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d036      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6e      	ldr	r2, [pc, #440]	@ (80018ec <HAL_DMA_Abort+0x228>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a6d      	ldr	r2, [pc, #436]	@ (80018f0 <HAL_DMA_Abort+0x22c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d02c      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6b      	ldr	r2, [pc, #428]	@ (80018f4 <HAL_DMA_Abort+0x230>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d027      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6a      	ldr	r2, [pc, #424]	@ (80018f8 <HAL_DMA_Abort+0x234>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a68      	ldr	r2, [pc, #416]	@ (80018fc <HAL_DMA_Abort+0x238>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01d      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a67      	ldr	r2, [pc, #412]	@ (8001900 <HAL_DMA_Abort+0x23c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d018      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a65      	ldr	r2, [pc, #404]	@ (8001904 <HAL_DMA_Abort+0x240>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a64      	ldr	r2, [pc, #400]	@ (8001908 <HAL_DMA_Abort+0x244>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a62      	ldr	r2, [pc, #392]	@ (800190c <HAL_DMA_Abort+0x248>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a61      	ldr	r2, [pc, #388]	@ (8001910 <HAL_DMA_Abort+0x24c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Abort+0xd6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5f      	ldr	r2, [pc, #380]	@ (8001914 <HAL_DMA_Abort+0x250>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_DMA_Abort+0xda>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_DMA_Abort+0xdc>
 800179e:	2300      	movs	r3, #0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 021e 	bic.w	r2, r2, #30
 80017b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e00a      	b.n	80017e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020e 	bic.w	r2, r2, #14
 80017da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a3c      	ldr	r2, [pc, #240]	@ (80018d8 <HAL_DMA_Abort+0x214>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d072      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a3a      	ldr	r2, [pc, #232]	@ (80018dc <HAL_DMA_Abort+0x218>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d06d      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a39      	ldr	r2, [pc, #228]	@ (80018e0 <HAL_DMA_Abort+0x21c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d068      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a37      	ldr	r2, [pc, #220]	@ (80018e4 <HAL_DMA_Abort+0x220>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d063      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a36      	ldr	r2, [pc, #216]	@ (80018e8 <HAL_DMA_Abort+0x224>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d05e      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a34      	ldr	r2, [pc, #208]	@ (80018ec <HAL_DMA_Abort+0x228>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d059      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a33      	ldr	r2, [pc, #204]	@ (80018f0 <HAL_DMA_Abort+0x22c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d054      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a31      	ldr	r2, [pc, #196]	@ (80018f4 <HAL_DMA_Abort+0x230>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d04f      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a30      	ldr	r2, [pc, #192]	@ (80018f8 <HAL_DMA_Abort+0x234>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2e      	ldr	r2, [pc, #184]	@ (80018fc <HAL_DMA_Abort+0x238>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2d      	ldr	r2, [pc, #180]	@ (8001900 <HAL_DMA_Abort+0x23c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2b      	ldr	r2, [pc, #172]	@ (8001904 <HAL_DMA_Abort+0x240>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2a      	ldr	r2, [pc, #168]	@ (8001908 <HAL_DMA_Abort+0x244>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a28      	ldr	r2, [pc, #160]	@ (800190c <HAL_DMA_Abort+0x248>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <HAL_DMA_Abort+0x24c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a25      	ldr	r2, [pc, #148]	@ (8001914 <HAL_DMA_Abort+0x250>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <HAL_DMA_Abort+0x254>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a22      	ldr	r2, [pc, #136]	@ (800191c <HAL_DMA_Abort+0x258>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <HAL_DMA_Abort+0x25c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001924 <HAL_DMA_Abort+0x260>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001928 <HAL_DMA_Abort+0x264>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <HAL_DMA_Abort+0x268>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <HAL_DMA_Abort+0x26c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort+0x20e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a19      	ldr	r2, [pc, #100]	@ (8001934 <HAL_DMA_Abort+0x270>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d132      	bne.n	8001938 <HAL_DMA_Abort+0x274>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e031      	b.n	800193a <HAL_DMA_Abort+0x276>
 80018d6:	bf00      	nop
 80018d8:	40020010 	.word	0x40020010
 80018dc:	40020028 	.word	0x40020028
 80018e0:	40020040 	.word	0x40020040
 80018e4:	40020058 	.word	0x40020058
 80018e8:	40020070 	.word	0x40020070
 80018ec:	40020088 	.word	0x40020088
 80018f0:	400200a0 	.word	0x400200a0
 80018f4:	400200b8 	.word	0x400200b8
 80018f8:	40020410 	.word	0x40020410
 80018fc:	40020428 	.word	0x40020428
 8001900:	40020440 	.word	0x40020440
 8001904:	40020458 	.word	0x40020458
 8001908:	40020470 	.word	0x40020470
 800190c:	40020488 	.word	0x40020488
 8001910:	400204a0 	.word	0x400204a0
 8001914:	400204b8 	.word	0x400204b8
 8001918:	58025408 	.word	0x58025408
 800191c:	5802541c 	.word	0x5802541c
 8001920:	58025430 	.word	0x58025430
 8001924:	58025444 	.word	0x58025444
 8001928:	58025458 	.word	0x58025458
 800192c:	5802546c 	.word	0x5802546c
 8001930:	58025480 	.word	0x58025480
 8001934:	58025494 	.word	0x58025494
 8001938:	2300      	movs	r3, #0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001948:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800194c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6d      	ldr	r2, [pc, #436]	@ (8001b08 <HAL_DMA_Abort+0x444>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d04a      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b0c <HAL_DMA_Abort+0x448>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d045      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6a      	ldr	r2, [pc, #424]	@ (8001b10 <HAL_DMA_Abort+0x44c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d040      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a68      	ldr	r2, [pc, #416]	@ (8001b14 <HAL_DMA_Abort+0x450>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d03b      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a67      	ldr	r2, [pc, #412]	@ (8001b18 <HAL_DMA_Abort+0x454>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d036      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a65      	ldr	r2, [pc, #404]	@ (8001b1c <HAL_DMA_Abort+0x458>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d031      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a64      	ldr	r2, [pc, #400]	@ (8001b20 <HAL_DMA_Abort+0x45c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d02c      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a62      	ldr	r2, [pc, #392]	@ (8001b24 <HAL_DMA_Abort+0x460>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d027      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a61      	ldr	r2, [pc, #388]	@ (8001b28 <HAL_DMA_Abort+0x464>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5f      	ldr	r2, [pc, #380]	@ (8001b2c <HAL_DMA_Abort+0x468>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01d      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b30 <HAL_DMA_Abort+0x46c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d018      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001b34 <HAL_DMA_Abort+0x470>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001b38 <HAL_DMA_Abort+0x474>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00e      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a59      	ldr	r2, [pc, #356]	@ (8001b3c <HAL_DMA_Abort+0x478>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d009      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a58      	ldr	r2, [pc, #352]	@ (8001b40 <HAL_DMA_Abort+0x47c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_DMA_Abort+0x32a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a56      	ldr	r2, [pc, #344]	@ (8001b44 <HAL_DMA_Abort+0x480>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d108      	bne.n	8001a00 <HAL_DMA_Abort+0x33c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e007      	b.n	8001a10 <HAL_DMA_Abort+0x34c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a10:	e013      	b.n	8001a3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a12:	f7ff fd21 	bl	8001458 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d90c      	bls.n	8001a3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e12d      	b.n	8001c96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e5      	bne.n	8001a12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b08 <HAL_DMA_Abort+0x444>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d04a      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2d      	ldr	r2, [pc, #180]	@ (8001b0c <HAL_DMA_Abort+0x448>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d045      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b10 <HAL_DMA_Abort+0x44c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d040      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2a      	ldr	r2, [pc, #168]	@ (8001b14 <HAL_DMA_Abort+0x450>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d03b      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a29      	ldr	r2, [pc, #164]	@ (8001b18 <HAL_DMA_Abort+0x454>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d036      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a27      	ldr	r2, [pc, #156]	@ (8001b1c <HAL_DMA_Abort+0x458>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d031      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a26      	ldr	r2, [pc, #152]	@ (8001b20 <HAL_DMA_Abort+0x45c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d02c      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <HAL_DMA_Abort+0x460>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d027      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <HAL_DMA_Abort+0x464>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d022      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a21      	ldr	r2, [pc, #132]	@ (8001b2c <HAL_DMA_Abort+0x468>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01d      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <HAL_DMA_Abort+0x46c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d018      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b34 <HAL_DMA_Abort+0x470>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b38 <HAL_DMA_Abort+0x474>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00e      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b3c <HAL_DMA_Abort+0x478>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <HAL_DMA_Abort+0x47c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d004      	beq.n	8001ae6 <HAL_DMA_Abort+0x422>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <HAL_DMA_Abort+0x480>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_DMA_Abort+0x426>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_DMA_Abort+0x428>
 8001aea:	2300      	movs	r3, #0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d02b      	beq.n	8001b48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	223f      	movs	r2, #63	@ 0x3f
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	e02a      	b.n	8001b5e <HAL_DMA_Abort+0x49a>
 8001b08:	40020010 	.word	0x40020010
 8001b0c:	40020028 	.word	0x40020028
 8001b10:	40020040 	.word	0x40020040
 8001b14:	40020058 	.word	0x40020058
 8001b18:	40020070 	.word	0x40020070
 8001b1c:	40020088 	.word	0x40020088
 8001b20:	400200a0 	.word	0x400200a0
 8001b24:	400200b8 	.word	0x400200b8
 8001b28:	40020410 	.word	0x40020410
 8001b2c:	40020428 	.word	0x40020428
 8001b30:	40020440 	.word	0x40020440
 8001b34:	40020458 	.word	0x40020458
 8001b38:	40020470 	.word	0x40020470
 8001b3c:	40020488 	.word	0x40020488
 8001b40:	400204a0 	.word	0x400204a0
 8001b44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	2201      	movs	r2, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca0 <HAL_DMA_Abort+0x5dc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d072      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca4 <HAL_DMA_Abort+0x5e0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d06d      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca8 <HAL_DMA_Abort+0x5e4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d068      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a4a      	ldr	r2, [pc, #296]	@ (8001cac <HAL_DMA_Abort+0x5e8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d063      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a49      	ldr	r2, [pc, #292]	@ (8001cb0 <HAL_DMA_Abort+0x5ec>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d05e      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a47      	ldr	r2, [pc, #284]	@ (8001cb4 <HAL_DMA_Abort+0x5f0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d059      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a46      	ldr	r2, [pc, #280]	@ (8001cb8 <HAL_DMA_Abort+0x5f4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d054      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a44      	ldr	r2, [pc, #272]	@ (8001cbc <HAL_DMA_Abort+0x5f8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d04f      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a43      	ldr	r2, [pc, #268]	@ (8001cc0 <HAL_DMA_Abort+0x5fc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d04a      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a41      	ldr	r2, [pc, #260]	@ (8001cc4 <HAL_DMA_Abort+0x600>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d045      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a40      	ldr	r2, [pc, #256]	@ (8001cc8 <HAL_DMA_Abort+0x604>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d040      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8001ccc <HAL_DMA_Abort+0x608>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d03b      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd0 <HAL_DMA_Abort+0x60c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d036      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd4 <HAL_DMA_Abort+0x610>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d031      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a3a      	ldr	r2, [pc, #232]	@ (8001cd8 <HAL_DMA_Abort+0x614>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d02c      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a38      	ldr	r2, [pc, #224]	@ (8001cdc <HAL_DMA_Abort+0x618>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d027      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a37      	ldr	r2, [pc, #220]	@ (8001ce0 <HAL_DMA_Abort+0x61c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a35      	ldr	r2, [pc, #212]	@ (8001ce4 <HAL_DMA_Abort+0x620>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01d      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a34      	ldr	r2, [pc, #208]	@ (8001ce8 <HAL_DMA_Abort+0x624>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d018      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a32      	ldr	r2, [pc, #200]	@ (8001cec <HAL_DMA_Abort+0x628>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a31      	ldr	r2, [pc, #196]	@ (8001cf0 <HAL_DMA_Abort+0x62c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00e      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf4 <HAL_DMA_Abort+0x630>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf8 <HAL_DMA_Abort+0x634>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_DMA_Abort+0x58a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2c      	ldr	r2, [pc, #176]	@ (8001cfc <HAL_DMA_Abort+0x638>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_DMA_Abort+0x58e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_Abort+0x590>
 8001c52:	2300      	movs	r3, #0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40020010 	.word	0x40020010
 8001ca4:	40020028 	.word	0x40020028
 8001ca8:	40020040 	.word	0x40020040
 8001cac:	40020058 	.word	0x40020058
 8001cb0:	40020070 	.word	0x40020070
 8001cb4:	40020088 	.word	0x40020088
 8001cb8:	400200a0 	.word	0x400200a0
 8001cbc:	400200b8 	.word	0x400200b8
 8001cc0:	40020410 	.word	0x40020410
 8001cc4:	40020428 	.word	0x40020428
 8001cc8:	40020440 	.word	0x40020440
 8001ccc:	40020458 	.word	0x40020458
 8001cd0:	40020470 	.word	0x40020470
 8001cd4:	40020488 	.word	0x40020488
 8001cd8:	400204a0 	.word	0x400204a0
 8001cdc:	400204b8 	.word	0x400204b8
 8001ce0:	58025408 	.word	0x58025408
 8001ce4:	5802541c 	.word	0x5802541c
 8001ce8:	58025430 	.word	0x58025430
 8001cec:	58025444 	.word	0x58025444
 8001cf0:	58025458 	.word	0x58025458
 8001cf4:	5802546c 	.word	0x5802546c
 8001cf8:	58025480 	.word	0x58025480
 8001cfc:	58025494 	.word	0x58025494

08001d00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e237      	b.n	8002182 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d004      	beq.n	8001d28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2280      	movs	r2, #128	@ 0x80
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e22c      	b.n	8002182 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea0 <HAL_DMA_Abort_IT+0x1a0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04a      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea4 <HAL_DMA_Abort_IT+0x1a4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d045      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a59      	ldr	r2, [pc, #356]	@ (8001ea8 <HAL_DMA_Abort_IT+0x1a8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d040      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a58      	ldr	r2, [pc, #352]	@ (8001eac <HAL_DMA_Abort_IT+0x1ac>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d03b      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a56      	ldr	r2, [pc, #344]	@ (8001eb0 <HAL_DMA_Abort_IT+0x1b0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d036      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a55      	ldr	r2, [pc, #340]	@ (8001eb4 <HAL_DMA_Abort_IT+0x1b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d031      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a53      	ldr	r2, [pc, #332]	@ (8001eb8 <HAL_DMA_Abort_IT+0x1b8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02c      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a52      	ldr	r2, [pc, #328]	@ (8001ebc <HAL_DMA_Abort_IT+0x1bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d027      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	@ (8001ec0 <HAL_DMA_Abort_IT+0x1c0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec4 <HAL_DMA_Abort_IT+0x1c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec8 <HAL_DMA_Abort_IT+0x1c8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001ecc <HAL_DMA_Abort_IT+0x1cc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed0 <HAL_DMA_Abort_IT+0x1d0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a49      	ldr	r2, [pc, #292]	@ (8001ed4 <HAL_DMA_Abort_IT+0x1d4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a47      	ldr	r2, [pc, #284]	@ (8001ed8 <HAL_DMA_Abort_IT+0x1d8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xc8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a46      	ldr	r2, [pc, #280]	@ (8001edc <HAL_DMA_Abort_IT+0x1dc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Abort_IT+0xcc>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_DMA_Abort_IT+0xce>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8086 	beq.w	8001ee0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea0 <HAL_DMA_Abort_IT+0x1a0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d04a      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea4 <HAL_DMA_Abort_IT+0x1a4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d045      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea8 <HAL_DMA_Abort_IT+0x1a8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d040      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8001eac <HAL_DMA_Abort_IT+0x1ac>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d03b      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a29      	ldr	r2, [pc, #164]	@ (8001eb0 <HAL_DMA_Abort_IT+0x1b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d036      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a28      	ldr	r2, [pc, #160]	@ (8001eb4 <HAL_DMA_Abort_IT+0x1b4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a26      	ldr	r2, [pc, #152]	@ (8001eb8 <HAL_DMA_Abort_IT+0x1b8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02c      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a25      	ldr	r2, [pc, #148]	@ (8001ebc <HAL_DMA_Abort_IT+0x1bc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d027      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a23      	ldr	r2, [pc, #140]	@ (8001ec0 <HAL_DMA_Abort_IT+0x1c0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a22      	ldr	r2, [pc, #136]	@ (8001ec4 <HAL_DMA_Abort_IT+0x1c4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01d      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a20      	ldr	r2, [pc, #128]	@ (8001ec8 <HAL_DMA_Abort_IT+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ecc <HAL_DMA_Abort_IT+0x1cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_DMA_Abort_IT+0x1d0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <HAL_DMA_Abort_IT+0x1d4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed8 <HAL_DMA_Abort_IT+0x1d8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x17c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_DMA_Abort_IT+0x1dc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <HAL_DMA_Abort_IT+0x18e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e178      	b.n	8002180 <HAL_DMA_Abort_IT+0x480>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e16f      	b.n	8002180 <HAL_DMA_Abort_IT+0x480>
 8001ea0:	40020010 	.word	0x40020010
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40020040 	.word	0x40020040
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40020070 	.word	0x40020070
 8001eb4:	40020088 	.word	0x40020088
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	400200b8 	.word	0x400200b8
 8001ec0:	40020410 	.word	0x40020410
 8001ec4:	40020428 	.word	0x40020428
 8001ec8:	40020440 	.word	0x40020440
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	40020470 	.word	0x40020470
 8001ed4:	40020488 	.word	0x40020488
 8001ed8:	400204a0 	.word	0x400204a0
 8001edc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020e 	bic.w	r2, r2, #14
 8001eee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6c      	ldr	r2, [pc, #432]	@ (80020a8 <HAL_DMA_Abort_IT+0x3a8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d04a      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6b      	ldr	r2, [pc, #428]	@ (80020ac <HAL_DMA_Abort_IT+0x3ac>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d045      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_DMA_Abort_IT+0x3b0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d040      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a68      	ldr	r2, [pc, #416]	@ (80020b4 <HAL_DMA_Abort_IT+0x3b4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d03b      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a66      	ldr	r2, [pc, #408]	@ (80020b8 <HAL_DMA_Abort_IT+0x3b8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d036      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a65      	ldr	r2, [pc, #404]	@ (80020bc <HAL_DMA_Abort_IT+0x3bc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d031      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a63      	ldr	r2, [pc, #396]	@ (80020c0 <HAL_DMA_Abort_IT+0x3c0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d02c      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a62      	ldr	r2, [pc, #392]	@ (80020c4 <HAL_DMA_Abort_IT+0x3c4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d027      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a60      	ldr	r2, [pc, #384]	@ (80020c8 <HAL_DMA_Abort_IT+0x3c8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d022      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5f      	ldr	r2, [pc, #380]	@ (80020cc <HAL_DMA_Abort_IT+0x3cc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d01d      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	@ (80020d0 <HAL_DMA_Abort_IT+0x3d0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d018      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a5c      	ldr	r2, [pc, #368]	@ (80020d4 <HAL_DMA_Abort_IT+0x3d4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a5a      	ldr	r2, [pc, #360]	@ (80020d8 <HAL_DMA_Abort_IT+0x3d8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00e      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a59      	ldr	r2, [pc, #356]	@ (80020dc <HAL_DMA_Abort_IT+0x3dc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a57      	ldr	r2, [pc, #348]	@ (80020e0 <HAL_DMA_Abort_IT+0x3e0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x290>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a56      	ldr	r2, [pc, #344]	@ (80020e4 <HAL_DMA_Abort_IT+0x3e4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d108      	bne.n	8001fa2 <HAL_DMA_Abort_IT+0x2a2>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e007      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x2b2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80020a8 <HAL_DMA_Abort_IT+0x3a8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d072      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80020ac <HAL_DMA_Abort_IT+0x3ac>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d06d      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a39      	ldr	r2, [pc, #228]	@ (80020b0 <HAL_DMA_Abort_IT+0x3b0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d068      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a37      	ldr	r2, [pc, #220]	@ (80020b4 <HAL_DMA_Abort_IT+0x3b4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d063      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a36      	ldr	r2, [pc, #216]	@ (80020b8 <HAL_DMA_Abort_IT+0x3b8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d05e      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a34      	ldr	r2, [pc, #208]	@ (80020bc <HAL_DMA_Abort_IT+0x3bc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d059      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a33      	ldr	r2, [pc, #204]	@ (80020c0 <HAL_DMA_Abort_IT+0x3c0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d054      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a31      	ldr	r2, [pc, #196]	@ (80020c4 <HAL_DMA_Abort_IT+0x3c4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d04f      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a30      	ldr	r2, [pc, #192]	@ (80020c8 <HAL_DMA_Abort_IT+0x3c8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04a      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2e      	ldr	r2, [pc, #184]	@ (80020cc <HAL_DMA_Abort_IT+0x3cc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d045      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2d      	ldr	r2, [pc, #180]	@ (80020d0 <HAL_DMA_Abort_IT+0x3d0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d040      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <HAL_DMA_Abort_IT+0x3d4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d03b      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2a      	ldr	r2, [pc, #168]	@ (80020d8 <HAL_DMA_Abort_IT+0x3d8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d036      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a28      	ldr	r2, [pc, #160]	@ (80020dc <HAL_DMA_Abort_IT+0x3dc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a27      	ldr	r2, [pc, #156]	@ (80020e0 <HAL_DMA_Abort_IT+0x3e0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d02c      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a25      	ldr	r2, [pc, #148]	@ (80020e4 <HAL_DMA_Abort_IT+0x3e4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d027      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <HAL_DMA_Abort_IT+0x3e8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d022      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a22      	ldr	r2, [pc, #136]	@ (80020ec <HAL_DMA_Abort_IT+0x3ec>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01d      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a21      	ldr	r2, [pc, #132]	@ (80020f0 <HAL_DMA_Abort_IT+0x3f0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d018      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <HAL_DMA_Abort_IT+0x3f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <HAL_DMA_Abort_IT+0x3f8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <HAL_DMA_Abort_IT+0x3fc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <HAL_DMA_Abort_IT+0x400>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x3a2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a19      	ldr	r2, [pc, #100]	@ (8002104 <HAL_DMA_Abort_IT+0x404>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d132      	bne.n	8002108 <HAL_DMA_Abort_IT+0x408>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e031      	b.n	800210a <HAL_DMA_Abort_IT+0x40a>
 80020a6:	bf00      	nop
 80020a8:	40020010 	.word	0x40020010
 80020ac:	40020028 	.word	0x40020028
 80020b0:	40020040 	.word	0x40020040
 80020b4:	40020058 	.word	0x40020058
 80020b8:	40020070 	.word	0x40020070
 80020bc:	40020088 	.word	0x40020088
 80020c0:	400200a0 	.word	0x400200a0
 80020c4:	400200b8 	.word	0x400200b8
 80020c8:	40020410 	.word	0x40020410
 80020cc:	40020428 	.word	0x40020428
 80020d0:	40020440 	.word	0x40020440
 80020d4:	40020458 	.word	0x40020458
 80020d8:	40020470 	.word	0x40020470
 80020dc:	40020488 	.word	0x40020488
 80020e0:	400204a0 	.word	0x400204a0
 80020e4:	400204b8 	.word	0x400204b8
 80020e8:	58025408 	.word	0x58025408
 80020ec:	5802541c 	.word	0x5802541c
 80020f0:	58025430 	.word	0x58025430
 80020f4:	58025444 	.word	0x58025444
 80020f8:	58025458 	.word	0x58025458
 80020fc:	5802546c 	.word	0x5802546c
 8002100:	58025480 	.word	0x58025480
 8002104:	58025494 	.word	0x58025494
 8002108:	2300      	movs	r3, #0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d028      	beq.n	8002160 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800211c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2201      	movs	r2, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800213c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002154:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800215e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop

0800218c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	@ 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80021a0:	2308      	movs	r3, #8
 80021a2:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <HAL_FLASH_Program+0xd8>)
 80021a6:	7d1b      	ldrb	r3, [r3, #20]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_FLASH_Program+0x24>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e054      	b.n	800225a <HAL_FLASH_Program+0xce>
 80021b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_FLASH_Program+0xd8>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021bc:	d316      	bcc.n	80021ec <HAL_FLASH_Program+0x60>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80021c4:	d212      	bcs.n	80021ec <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 80021ca:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021cc:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <HAL_FLASH_Program+0xd8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80021d2:	6979      	ldr	r1, [r7, #20]
 80021d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021d8:	f000 f882 	bl	80022e0 <FLASH_WaitForLastOperation>
 80021dc:	4603      	mov	r3, r0
 80021de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 80021e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d132      	bne.n	8002250 <HAL_FLASH_Program+0xc4>
 80021ea:	e001      	b.n	80021f0 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e034      	b.n	800225a <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <HAL_FLASH_Program+0xdc>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002268 <HAL_FLASH_Program+0xdc>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 80021fc:	f3bf 8f6f 	isb	sy
}
 8002200:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002202:	f3bf 8f4f 	dsb	sy
}
 8002206:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	3304      	adds	r3, #4
 8002214:	623b      	str	r3, [r7, #32]
        src_addr++;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	61fb      	str	r3, [r7, #28]
        row_index--;
 800221c:	7efb      	ldrb	r3, [r7, #27]
 800221e:	3b01      	subs	r3, #1
 8002220:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8002222:	7efb      	ldrb	r3, [r7, #27]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ef      	bne.n	8002208 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8002228:	f3bf 8f6f 	isb	sy
}
 800222c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800222e:	f3bf 8f4f 	dsb	sy
}
 8002232:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8002234:	6979      	ldr	r1, [r7, #20]
 8002236:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800223a:	f000 f851 	bl	80022e0 <FLASH_WaitForLastOperation>
 800223e:	4603      	mov	r3, r0
 8002240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_FLASH_Program+0xdc>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <HAL_FLASH_Program+0xdc>)
 800224a:	f023 0302 	bic.w	r3, r3, #2
 800224e:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <HAL_FLASH_Program+0xd8>)
 8002252:	2200      	movs	r2, #0
 8002254:	751a      	strb	r2, [r3, #20]

  return status;
 8002256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800225a:	4618      	mov	r0, r3
 800225c:	3728      	adds	r7, #40	@ 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	240005dc 	.word	0x240005dc
 8002268:	52002000 	.word	0x52002000

0800226c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_FLASH_Unlock+0x38>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_FLASH_Unlock+0x38>)
 800227e:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <HAL_FLASH_Unlock+0x3c>)
 8002280:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_FLASH_Unlock+0x38>)
 8002284:	4a09      	ldr	r2, [pc, #36]	@ (80022ac <HAL_FLASH_Unlock+0x40>)
 8002286:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_FLASH_Unlock+0x38>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	52002000 	.word	0x52002000
 80022a8:	45670123 	.word	0x45670123
 80022ac:	cdef89ab 	.word	0xcdef89ab

080022b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_FLASH_Lock+0x2c>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_FLASH_Lock+0x2c>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_FLASH_Lock+0x2c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	52002000 	.word	0x52002000

080022e0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80022ea:	2304      	movs	r3, #4
 80022ec:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022f2:	f7ff f8b1 	bl	8001458 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80022f8:	e010      	b.n	800231c <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002300:	d00c      	beq.n	800231c <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002302:	f7ff f8a9 	bl	8001458 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d302      	bcc.n	8002318 <FLASH_WaitForLastOperation+0x38>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e02d      	b.n	8002378 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800231c:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <FLASH_WaitForLastOperation+0xa0>)
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	429a      	cmp	r2, r3
 8002328:	d0e7      	beq.n	80022fa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d104      	bne.n	800233a <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <FLASH_WaitForLastOperation+0xa0>)
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <FLASH_WaitForLastOperation+0xa4>)
 8002336:	4013      	ands	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8002344:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <FLASH_WaitForLastOperation+0xa8>)
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	4a0e      	ldr	r2, [pc, #56]	@ (8002388 <FLASH_WaitForLastOperation+0xa8>)
 800234e:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8002350:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <FLASH_WaitForLastOperation+0xa0>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e00e      	b.n	8002378 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10a      	bne.n	8002376 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002360:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <FLASH_WaitForLastOperation+0xa0>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d103      	bne.n	8002376 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <FLASH_WaitForLastOperation+0xa0>)
 8002370:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002374:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	52002000 	.word	0x52002000
 8002384:	17ee0000 	.word	0x17ee0000
 8002388:	240005dc 	.word	0x240005dc

0800238c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d010      	beq.n	80023c4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80023a2:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <FLASH_Erase_Sector+0x44>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <FLASH_Erase_Sector+0x44>)
 80023a8:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80023ac:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80023ae:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <FLASH_Erase_Sector+0x44>)
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	0219      	lsls	r1, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	4313      	orrs	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <FLASH_Erase_Sector+0x44>)
 80023be:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80023c2:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	52002000 	.word	0x52002000

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	@ 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023e2:	4b86      	ldr	r3, [pc, #536]	@ (80025fc <HAL_GPIO_Init+0x228>)
 80023e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023e6:	e18c      	b.n	8002702 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2101      	movs	r1, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 817e 	beq.w	80026fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d005      	beq.n	8002418 <HAL_GPIO_Init+0x44>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d130      	bne.n	800247a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800244e:	2201      	movs	r2, #1
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 0201 	and.w	r2, r3, #1
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b03      	cmp	r3, #3
 8002484:	d017      	beq.n	80024b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d123      	bne.n	800250a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	08da      	lsrs	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3208      	adds	r2, #8
 80024ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	08da      	lsrs	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3208      	adds	r2, #8
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0203 	and.w	r2, r3, #3
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80d8 	beq.w	80026fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254c:	4b2c      	ldr	r3, [pc, #176]	@ (8002600 <HAL_GPIO_Init+0x22c>)
 800254e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002552:	4a2b      	ldr	r2, [pc, #172]	@ (8002600 <HAL_GPIO_Init+0x22c>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800255c:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <HAL_GPIO_Init+0x22c>)
 800255e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256a:	4a26      	ldr	r2, [pc, #152]	@ (8002604 <HAL_GPIO_Init+0x230>)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <HAL_GPIO_Init+0x234>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04a      	beq.n	800262c <HAL_GPIO_Init+0x258>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <HAL_GPIO_Init+0x238>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x222>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002610 <HAL_GPIO_Init+0x23c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x21e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002614 <HAL_GPIO_Init+0x240>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a19      	ldr	r2, [pc, #100]	@ (8002618 <HAL_GPIO_Init+0x244>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x216>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a18      	ldr	r2, [pc, #96]	@ (800261c <HAL_GPIO_Init+0x248>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x212>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a17      	ldr	r2, [pc, #92]	@ (8002620 <HAL_GPIO_Init+0x24c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a16      	ldr	r2, [pc, #88]	@ (8002624 <HAL_GPIO_Init+0x250>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x20a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a15      	ldr	r2, [pc, #84]	@ (8002628 <HAL_GPIO_Init+0x254>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x206>
 80025d6:	2309      	movs	r3, #9
 80025d8:	e029      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025da:	230a      	movs	r3, #10
 80025dc:	e027      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025de:	2307      	movs	r3, #7
 80025e0:	e025      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e023      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e021      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e01f      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e01d      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e01b      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e019      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025fa:	bf00      	nop
 80025fc:	58000080 	.word	0x58000080
 8002600:	58024400 	.word	0x58024400
 8002604:	58000400 	.word	0x58000400
 8002608:	58020000 	.word	0x58020000
 800260c:	58020400 	.word	0x58020400
 8002610:	58020800 	.word	0x58020800
 8002614:	58020c00 	.word	0x58020c00
 8002618:	58021000 	.word	0x58021000
 800261c:	58021400 	.word	0x58021400
 8002620:	58021800 	.word	0x58021800
 8002624:	58021c00 	.word	0x58021c00
 8002628:	58022400 	.word	0x58022400
 800262c:	2300      	movs	r3, #0
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	f002 0203 	and.w	r2, r2, #3
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	4093      	lsls	r3, r2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263e:	4938      	ldr	r1, [pc, #224]	@ (8002720 <HAL_GPIO_Init+0x34c>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f ae6b 	bne.w	80023e8 <HAL_GPIO_Init+0x14>
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3724      	adds	r7, #36	@ 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	58000400 	.word	0x58000400

08002724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e001      	b.n	8002746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00a      	beq.n	80027b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800279c:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d001      	beq.n	80027ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e01f      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e01d      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	490f      	ldr	r1, [pc, #60]	@ (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027c2:	f7fe fe49 	bl	8001458 <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027c8:	e009      	b.n	80027de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027ca:	f7fe fe45 	bl	8001458 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027d8:	d901      	bls.n	80027de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e007      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_PWREx_ConfigSupply+0x70>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ea:	d1ee      	bne.n	80027ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	58024800 	.word	0x58024800

080027fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	@ 0x30
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e3c8      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8087 	beq.w	800292a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281c:	4b88      	ldr	r3, [pc, #544]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002826:	4b86      	ldr	r3, [pc, #536]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800282c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282e:	2b10      	cmp	r3, #16
 8002830:	d007      	beq.n	8002842 <HAL_RCC_OscConfig+0x46>
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b18      	cmp	r3, #24
 8002836:	d110      	bne.n	800285a <HAL_RCC_OscConfig+0x5e>
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d10b      	bne.n	800285a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002842:	4b7f      	ldr	r3, [pc, #508]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d06c      	beq.n	8002928 <HAL_RCC_OscConfig+0x12c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d168      	bne.n	8002928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e3a2      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x76>
 8002864:	4b76      	ldr	r3, [pc, #472]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a75      	ldr	r2, [pc, #468]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e02e      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x98>
 800287a:	4b71      	ldr	r3, [pc, #452]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a70      	ldr	r2, [pc, #448]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b6e      	ldr	r3, [pc, #440]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 800288c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01d      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0xbc>
 800289e:	4b68      	ldr	r3, [pc, #416]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a67      	ldr	r2, [pc, #412]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b65      	ldr	r3, [pc, #404]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a64      	ldr	r2, [pc, #400]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 80028b8:	4b61      	ldr	r3, [pc, #388]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a60      	ldr	r2, [pc, #384]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fdbe 	bl	8001458 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fdba 	bl	8001458 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	@ 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e356      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028f2:	4b53      	ldr	r3, [pc, #332]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe4>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fdaa 	bl	8001458 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe fda6 	bl	8001458 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e342      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800291a:	4b49      	ldr	r3, [pc, #292]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x10c>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 808c 	beq.w	8002a50 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002938:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002940:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002942:	4b3f      	ldr	r3, [pc, #252]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_RCC_OscConfig+0x162>
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2b18      	cmp	r3, #24
 8002952:	d137      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1c8>
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d132      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295e:	4b38      	ldr	r3, [pc, #224]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x17a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e314      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002976:	4b32      	ldr	r3, [pc, #200]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0219 	bic.w	r2, r3, #25
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	492f      	ldr	r1, [pc, #188]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fd66 	bl	8001458 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe fd62 	bl	8001458 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e2fe      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a2:	4b27      	ldr	r3, [pc, #156]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b24      	ldr	r3, [pc, #144]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	061b      	lsls	r3, r3, #24
 80029bc:	4920      	ldr	r1, [pc, #128]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c2:	e045      	b.n	8002a50 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d026      	beq.n	8002a1a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 0219 	bic.w	r2, r3, #25
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4919      	ldr	r1, [pc, #100]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe fd3b 	bl	8001458 <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe fd37 	bl	8001458 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e2d3      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	490b      	ldr	r1, [pc, #44]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
 8002a18:	e01a      	b.n	8002a50 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a08      	ldr	r2, [pc, #32]	@ (8002a40 <HAL_RCC_OscConfig+0x244>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fd17 	bl	8001458 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fd13 	bl	8001458 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d903      	bls.n	8002a44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e2af      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
 8002a40:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a44:	4b96      	ldr	r3, [pc, #600]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d06a      	beq.n	8002b32 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5c:	4b90      	ldr	r3, [pc, #576]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a64:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a66:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d007      	beq.n	8002a82 <HAL_RCC_OscConfig+0x286>
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b18      	cmp	r3, #24
 8002a76:	d11b      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2b4>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a82:	4b87      	ldr	r3, [pc, #540]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x29e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e282      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	497d      	ldr	r1, [pc, #500]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aae:	e040      	b.n	8002b32 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ab8:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a78      	ldr	r2, [pc, #480]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fcc8 	bl	8001458 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002acc:	f7fe fcc4 	bl	8001458 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e260      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ade:	4b70      	ldr	r3, [pc, #448]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	4969      	ldr	r1, [pc, #420]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60cb      	str	r3, [r1, #12]
 8002afe:	e018      	b.n	8002b32 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b00:	4b67      	ldr	r3, [pc, #412]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a66      	ldr	r2, [pc, #408]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fca4 	bl	8001458 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b14:	f7fe fca0 	bl	8001458 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e23c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b26:	4b5e      	ldr	r3, [pc, #376]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d036      	beq.n	8002bac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d019      	beq.n	8002b7a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	4b56      	ldr	r3, [pc, #344]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4a:	4a55      	ldr	r2, [pc, #340]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe fc81 	bl	8001458 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fc7d 	bl	8001458 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e219      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x35e>
 8002b78:	e018      	b.n	8002bac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7e:	4a48      	ldr	r2, [pc, #288]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fc67 	bl	8001458 <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fc63 	bl	8001458 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1ff      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d036      	beq.n	8002c26 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d019      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bc0:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a36      	ldr	r2, [pc, #216]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002bc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fc44 	bl	8001458 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd4:	f7fe fc40 	bl	8001458 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1dc      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002be6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x3d8>
 8002bf2:	e018      	b.n	8002c26 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a29      	ldr	r2, [pc, #164]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002bfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fc2a 	bl	8001458 <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c08:	f7fe fc26 	bl	8001458 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1c2      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8086 	beq.w	8002d40 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x4a8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <HAL_RCC_OscConfig+0x4a8>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fc0a 	bl	8001458 <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe fc06 	bl	8001458 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	@ 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1a2      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_OscConfig+0x4a8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x480>
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7a:	e032      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x4ac>
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	4a02      	ldr	r2, [pc, #8]	@ (8002ca0 <HAL_RCC_OscConfig+0x4a4>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9c:	e021      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e6>
 8002c9e:	bf00      	nop
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	58024800 	.word	0x58024800
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x4ce>
 8002cb0:	4b83      	ldr	r3, [pc, #524]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a82      	ldr	r2, [pc, #520]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	4b80      	ldr	r3, [pc, #512]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e6>
 8002cca:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a7c      	ldr	r2, [pc, #496]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	4a79      	ldr	r2, [pc, #484]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fbb5 	bl	8001458 <HAL_GetTick>
 8002cee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fbb1 	bl	8001458 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e14b      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d08:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ee      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x4f6>
 8002d14:	e014      	b.n	8002d40 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe fb9f 	bl	8001458 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fb9b 	bl	8001458 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e135      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d34:	4b62      	ldr	r3, [pc, #392]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ee      	bne.n	8002d1e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 812a 	beq.w	8002f9e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d52:	2b18      	cmp	r3, #24
 8002d54:	f000 80ba 	beq.w	8002ecc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	f040 8095 	bne.w	8002e8c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b57      	ldr	r3, [pc, #348]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a56      	ldr	r2, [pc, #344]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fb73 	bl	8001458 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fe fb6f 	bl	8001458 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e10b      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d88:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d94:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d98:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec4 <HAL_RCC_OscConfig+0x6c8>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	430a      	orrs	r2, r1
 8002da8:	4945      	ldr	r1, [pc, #276]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	3b01      	subs	r3, #1
 8002db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	025b      	lsls	r3, r3, #9
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002dde:	4938      	ldr	r1, [pc, #224]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	4a35      	ldr	r2, [pc, #212]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002df0:	4b33      	ldr	r3, [pc, #204]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df4:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <HAL_RCC_OscConfig+0x6cc>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dfc:	00d2      	lsls	r2, r2, #3
 8002dfe:	4930      	ldr	r1, [pc, #192]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e08:	f023 020c 	bic.w	r2, r3, #12
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	492b      	ldr	r1, [pc, #172]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e16:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	f023 0202 	bic.w	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	4927      	ldr	r1, [pc, #156]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e28:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	4a24      	ldr	r2, [pc, #144]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e34:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	4a21      	ldr	r2, [pc, #132]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e40:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe faf8 	bl	8001458 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe faf4 	bl	8001458 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e090      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x670>
 8002e8a:	e088      	b.n	8002f9e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fade 	bl	8001458 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fada 	bl	8001458 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e076      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb2:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_RCC_OscConfig+0x6c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x6a4>
 8002ebe:	e06e      	b.n	8002f9e <HAL_RCC_OscConfig+0x7a2>
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	fffffc0c 	.word	0xfffffc0c
 8002ec8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ecc:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ed2:	4b35      	ldr	r3, [pc, #212]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d031      	beq.n	8002f44 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0203 	and.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d12a      	bne.n	8002f44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d122      	bne.n	8002f44 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d11a      	bne.n	8002f44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0a5b      	lsrs	r3, r3, #9
 8002f12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d111      	bne.n	8002f44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d108      	bne.n	8002f44 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0e1b      	lsrs	r3, r3, #24
 8002f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e02b      	b.n	8002fa0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f48:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d01f      	beq.n	8002f9e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f5e:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	4a11      	ldr	r2, [pc, #68]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f6a:	f7fe fa75 	bl	8001458 <HAL_GetTick>
 8002f6e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f70:	bf00      	nop
 8002f72:	f7fe fa71 	bl	8001458 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d0f9      	beq.n	8002f72 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <HAL_RCC_OscConfig+0x7b0>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f8a:	00d2      	lsls	r2, r2, #3
 8002f8c:	4906      	ldr	r1, [pc, #24]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_RCC_OscConfig+0x7ac>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3730      	adds	r7, #48	@ 0x30
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	ffff0007 	.word	0xffff0007

08002fb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e19c      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b8a      	ldr	r3, [pc, #552]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d910      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b87      	ldr	r3, [pc, #540]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	4985      	ldr	r1, [pc, #532]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b83      	ldr	r3, [pc, #524]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e184      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	4b7b      	ldr	r3, [pc, #492]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800300c:	429a      	cmp	r2, r3
 800300e:	d908      	bls.n	8003022 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003010:	4b78      	ldr	r3, [pc, #480]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4975      	ldr	r1, [pc, #468]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 800301e:	4313      	orrs	r3, r2
 8003020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	4b70      	ldr	r3, [pc, #448]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d908      	bls.n	8003050 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800303e:	4b6d      	ldr	r3, [pc, #436]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	496a      	ldr	r1, [pc, #424]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	4b64      	ldr	r3, [pc, #400]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800306c:	4b61      	ldr	r3, [pc, #388]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	495e      	ldr	r1, [pc, #376]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d010      	beq.n	80030ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003096:	429a      	cmp	r2, r3
 8003098:	d908      	bls.n	80030ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800309a:	4b56      	ldr	r3, [pc, #344]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4953      	ldr	r1, [pc, #332]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d010      	beq.n	80030da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	4b4d      	ldr	r3, [pc, #308]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d908      	bls.n	80030da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c8:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f023 020f 	bic.w	r2, r3, #15
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4947      	ldr	r1, [pc, #284]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d055      	beq.n	8003192 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030e6:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4940      	ldr	r1, [pc, #256]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003100:	4b3c      	ldr	r3, [pc, #240]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d121      	bne.n	8003150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0f6      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d107      	bne.n	8003128 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003118:	4b36      	ldr	r3, [pc, #216]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d115      	bne.n	8003150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0ea      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003130:	4b30      	ldr	r3, [pc, #192]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0de      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003140:	4b2c      	ldr	r3, [pc, #176]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0d6      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003150:	4b28      	ldr	r3, [pc, #160]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f023 0207 	bic.w	r2, r3, #7
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4925      	ldr	r1, [pc, #148]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 800315e:	4313      	orrs	r3, r2
 8003160:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003162:	f7fe f979 	bl	8001458 <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003168:	e00a      	b.n	8003180 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316a:	f7fe f975 	bl	8001458 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0be      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003180:	4b1c      	ldr	r3, [pc, #112]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	429a      	cmp	r2, r3
 8003190:	d1eb      	bne.n	800316a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	4b14      	ldr	r3, [pc, #80]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d208      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ae:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f023 020f 	bic.w	r2, r3, #15
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	490e      	ldr	r1, [pc, #56]	@ (80031f4 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d214      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 020f 	bic.w	r2, r3, #15
 80031d6:	4906      	ldr	r1, [pc, #24]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <HAL_RCC_ClockConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e086      	b.n	80032fe <HAL_RCC_ClockConfig+0x34e>
 80031f0:	52002000 	.word	0x52002000
 80031f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	4b3f      	ldr	r3, [pc, #252]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003210:	429a      	cmp	r2, r3
 8003212:	d208      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003214:	4b3c      	ldr	r3, [pc, #240]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4939      	ldr	r1, [pc, #228]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003222:	4313      	orrs	r3, r2
 8003224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003242:	4b31      	ldr	r3, [pc, #196]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	492e      	ldr	r1, [pc, #184]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003250:	4313      	orrs	r3, r2
 8003252:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800326c:	429a      	cmp	r2, r3
 800326e:	d208      	bcs.n	8003282 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003270:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4922      	ldr	r1, [pc, #136]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 800327e:	4313      	orrs	r3, r2
 8003280:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800329a:	429a      	cmp	r2, r3
 800329c:	d208      	bcs.n	80032b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4917      	ldr	r1, [pc, #92]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032b0:	f000 f834 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	4912      	ldr	r1, [pc, #72]	@ (800330c <HAL_RCC_ClockConfig+0x35c>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <HAL_RCC_ClockConfig+0x358>)
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <HAL_RCC_ClockConfig+0x35c>)
 80032d8:	5cd3      	ldrb	r3, [r2, r3]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <HAL_RCC_ClockConfig+0x360>)
 80032e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <HAL_RCC_ClockConfig+0x364>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <HAL_RCC_ClockConfig+0x368>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe f866 	bl	80013c4 <HAL_InitTick>
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	58024400 	.word	0x58024400
 800330c:	08008db4 	.word	0x08008db4
 8003310:	24000008 	.word	0x24000008
 8003314:	24000004 	.word	0x24000004
 8003318:	2400000c 	.word	0x2400000c

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	@ 0x24
 8003320:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003322:	4bb3      	ldr	r3, [pc, #716]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800332a:	2b18      	cmp	r3, #24
 800332c:	f200 8155 	bhi.w	80035da <HAL_RCC_GetSysClockFreq+0x2be>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	0800339d 	.word	0x0800339d
 800333c:	080035db 	.word	0x080035db
 8003340:	080035db 	.word	0x080035db
 8003344:	080035db 	.word	0x080035db
 8003348:	080035db 	.word	0x080035db
 800334c:	080035db 	.word	0x080035db
 8003350:	080035db 	.word	0x080035db
 8003354:	080035db 	.word	0x080035db
 8003358:	080033c3 	.word	0x080033c3
 800335c:	080035db 	.word	0x080035db
 8003360:	080035db 	.word	0x080035db
 8003364:	080035db 	.word	0x080035db
 8003368:	080035db 	.word	0x080035db
 800336c:	080035db 	.word	0x080035db
 8003370:	080035db 	.word	0x080035db
 8003374:	080035db 	.word	0x080035db
 8003378:	080033c9 	.word	0x080033c9
 800337c:	080035db 	.word	0x080035db
 8003380:	080035db 	.word	0x080035db
 8003384:	080035db 	.word	0x080035db
 8003388:	080035db 	.word	0x080035db
 800338c:	080035db 	.word	0x080035db
 8003390:	080035db 	.word	0x080035db
 8003394:	080035db 	.word	0x080035db
 8003398:	080033cf 	.word	0x080033cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800339c:	4b94      	ldr	r3, [pc, #592]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033a8:	4b91      	ldr	r3, [pc, #580]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	08db      	lsrs	r3, r3, #3
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	4a90      	ldr	r2, [pc, #576]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033ba:	e111      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033bc:	4b8d      	ldr	r3, [pc, #564]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033be:	61bb      	str	r3, [r7, #24]
      break;
 80033c0:	e10e      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033c2:	4b8d      	ldr	r3, [pc, #564]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033c4:	61bb      	str	r3, [r7, #24]
      break;
 80033c6:	e10b      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033c8:	4b8c      	ldr	r3, [pc, #560]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033ca:	61bb      	str	r3, [r7, #24]
      break;
 80033cc:	e108      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033ce:	4b88      	ldr	r3, [pc, #544]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033d8:	4b85      	ldr	r3, [pc, #532]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033e4:	4b82      	ldr	r3, [pc, #520]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033ee:	4b80      	ldr	r3, [pc, #512]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	08db      	lsrs	r3, r3, #3
 80033f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80e1 	beq.w	80035d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b02      	cmp	r3, #2
 8003416:	f000 8083 	beq.w	8003520 <HAL_RCC_GetSysClockFreq+0x204>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b02      	cmp	r3, #2
 800341e:	f200 80a1 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x248>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x114>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d056      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800342e:	e099      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003430:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02d      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800343c:	4b6c      	ldr	r3, [pc, #432]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	4a6b      	ldr	r2, [pc, #428]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a02 	vldr	s12, [r7, #8]
 800347a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003600 <HAL_RCC_GetSysClockFreq+0x2e4>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003496:	e087      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034aa:	4b51      	ldr	r3, [pc, #324]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80034be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003600 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034da:	e065      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003608 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ee:	4b40      	ldr	r3, [pc, #256]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003502:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003600 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800351e:	e043      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800360c <HAL_RCC_GetSysClockFreq+0x2f0>
 800352e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003532:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003542:	ed97 6a02 	vldr	s12, [r7, #8]
 8003546:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003600 <HAL_RCC_GetSysClockFreq+0x2e4>
 800354a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003562:	e021      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003608 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003576:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003586:	ed97 6a02 	vldr	s12, [r7, #8]
 800358a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003600 <HAL_RCC_GetSysClockFreq+0x2e4>
 800358e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800359a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	0a5b      	lsrs	r3, r3, #9
 80035ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035b2:	3301      	adds	r3, #1
 80035b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035cc:	ee17 3a90 	vmov	r3, s15
 80035d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035d2:	e005      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
      break;
 80035d8:	e002      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035dc:	61bb      	str	r3, [r7, #24]
      break;
 80035de:	bf00      	nop
  }

  return sysclockfreq;
 80035e0:	69bb      	ldr	r3, [r7, #24]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	@ 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	58024400 	.word	0x58024400
 80035f4:	03d09000 	.word	0x03d09000
 80035f8:	003d0900 	.word	0x003d0900
 80035fc:	017d7840 	.word	0x017d7840
 8003600:	46000000 	.word	0x46000000
 8003604:	4c742400 	.word	0x4c742400
 8003608:	4a742400 	.word	0x4a742400
 800360c:	4bbebc20 	.word	0x4bbebc20

08003610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003616:	f7ff fe81 	bl	800331c <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <HAL_RCC_GetHCLKFreq+0x50>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490f      	ldr	r1, [pc, #60]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x54>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003634:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <HAL_RCC_GetHCLKFreq+0x50>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	4a09      	ldr	r2, [pc, #36]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x54>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a07      	ldr	r2, [pc, #28]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x58>)
 800364c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800364e:	4a07      	ldr	r2, [pc, #28]	@ (800366c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x58>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	58024400 	.word	0x58024400
 8003664:	08008db4 	.word	0x08008db4
 8003668:	24000008 	.word	0x24000008
 800366c:	24000004 	.word	0x24000004

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003674:	f7ff ffcc 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4904      	ldr	r1, [pc, #16]	@ (8003698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	58024400 	.word	0x58024400
 8003698:	08008db4 	.word	0x08008db4

0800369c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036a0:	f7ff ffb6 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	@ (80036c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	58024400 	.word	0x58024400
 80036c4:	08008db4 	.word	0x08008db4

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b0c6      	sub	sp, #280	@ 0x118
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80036ec:	2500      	movs	r5, #0
 80036ee:	ea54 0305 	orrs.w	r3, r4, r5
 80036f2:	d049      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036fe:	d02f      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003700:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003704:	d828      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003706:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800370a:	d01a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800370c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003710:	d822      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800371a:	d007      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800371c:	e01c      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371e:	4bab      	ldr	r3, [pc, #684]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	4aaa      	ldr	r2, [pc, #680]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003728:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800372a:	e01a      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800372c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003730:	3308      	adds	r3, #8
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fc25 	bl	8004f84 <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003740:	e00f      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003746:	3328      	adds	r3, #40	@ 0x28
 8003748:	2102      	movs	r1, #2
 800374a:	4618      	mov	r0, r3
 800374c:	f001 fccc 	bl	80050e8 <RCCEx_PLL3_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003756:	e004      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003762:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800376a:	4b98      	ldr	r3, [pc, #608]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003778:	4a94      	ldr	r2, [pc, #592]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800377a:	430b      	orrs	r3, r1
 800377c:	6513      	str	r3, [r2, #80]	@ 0x50
 800377e:	e003      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003784:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003794:	f04f 0900 	mov.w	r9, #0
 8003798:	ea58 0309 	orrs.w	r3, r8, r9
 800379c:	d047      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d82a      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037a8:	a201      	add	r2, pc, #4	@ (adr r2, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037c5 	.word	0x080037c5
 80037b4:	080037d3 	.word	0x080037d3
 80037b8:	080037e9 	.word	0x080037e9
 80037bc:	08003807 	.word	0x08003807
 80037c0:	08003807 	.word	0x08003807
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b81      	ldr	r3, [pc, #516]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	4a80      	ldr	r2, [pc, #512]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d0:	e01a      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d6:	3308      	adds	r3, #8
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fbd2 	bl	8004f84 <RCCEx_PLL2_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037e6:	e00f      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ec:	3328      	adds	r3, #40	@ 0x28
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 fc79 	bl	80050e8 <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037fc:	e004      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003804:	e000      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003810:	4b6e      	ldr	r3, [pc, #440]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003814:	f023 0107 	bic.w	r1, r3, #7
 8003818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	4a6b      	ldr	r2, [pc, #428]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6513      	str	r3, [r2, #80]	@ 0x50
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800382e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800383a:	f04f 0b00 	mov.w	fp, #0
 800383e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003842:	d05b      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800384c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003850:	d03b      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003852:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003856:	d834      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800385c:	d037      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 800385e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003862:	d82e      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003864:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003868:	d033      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800386a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800386e:	d828      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003874:	d01a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003876:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800387a:	d822      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003884:	d007      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003886:	e01c      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003888:	4b50      	ldr	r3, [pc, #320]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	4a4f      	ldr	r2, [pc, #316]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800388e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003894:	e01e      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800389a:	3308      	adds	r3, #8
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fb70 	bl	8004f84 <RCCEx_PLL2_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038aa:	e013      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b0:	3328      	adds	r3, #40	@ 0x28
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 fc17 	bl	80050e8 <RCCEx_PLL3_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038c0:	e008      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038c8:	e004      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80038d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038ec:	4a37      	ldr	r2, [pc, #220]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ee:	430b      	orrs	r3, r1
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038f2:	e003      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003908:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003912:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	d05d      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003920:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003924:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003928:	d03b      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800392a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800392e:	d834      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003934:	d037      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003936:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800393a:	d82e      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800393c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003940:	d033      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003942:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003946:	d828      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394c:	d01a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800394e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003952:	d822      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395c:	d007      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800395e:	e01c      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003960:	4b1a      	ldr	r3, [pc, #104]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800396a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800396c:	e01e      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800396e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003972:	3308      	adds	r3, #8
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f001 fb04 	bl	8004f84 <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003982:	e013      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003988:	3328      	adds	r3, #40	@ 0x28
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f001 fbab 	bl	80050e8 <RCCEx_PLL3_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003998:	e008      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039a0:	e004      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80039aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039c4:	4a01      	ldr	r2, [pc, #4]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ca:	e005      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80039cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80039d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039ee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d03a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80039f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	2b30      	cmp	r3, #48	@ 0x30
 8003a00:	d01f      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003a02:	2b30      	cmp	r3, #48	@ 0x30
 8003a04:	d819      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d00c      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d815      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d019      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d111      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a16:	4baa      	ldr	r3, [pc, #680]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	4aa9      	ldr	r2, [pc, #676]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	3308      	adds	r3, #8
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 faa9 	bl	8004f84 <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a50:	4b9b      	ldr	r3, [pc, #620]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	4a98      	ldr	r2, [pc, #608]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a64:	e003      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	d051      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a98:	d035      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a9e:	d82e      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003aa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aa4:	d031      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003aa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aaa:	d828      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab0:	d01a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab6:	d822      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac0:	d007      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003ac2:	e01c      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e01c      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fa52 	bl	8004f84 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e011      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aec:	3328      	adds	r3, #40	@ 0x28
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 faf9 	bl	80050e8 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003afc:	e006      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b04:	e002      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b14:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b22:	4a67      	ldr	r2, [pc, #412]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d053      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b5c:	d033      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003b5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b62:	d82c      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b68:	d02f      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003b6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b6e:	d826      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b74:	d02b      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003b76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b7a:	d820      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b80:	d012      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b86:	d81a      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b90:	d115      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b96:	3308      	adds	r3, #8
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 f9f2 	bl	8004f84 <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ba6:	e015      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bac:	3328      	adds	r3, #40	@ 0x28
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 fa99 	bl	80050e8 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bdc:	4b38      	ldr	r3, [pc, #224]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bea:	4a35      	ldr	r2, [pc, #212]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c10:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d058      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c26:	d033      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c2c:	d82c      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c32:	d02f      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c38:	d826      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c3e:	d02b      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c44:	d820      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c4a:	d012      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c50:	d81a      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d022      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c5a:	d115      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c60:	3308      	adds	r3, #8
 8003c62:	2101      	movs	r1, #1
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 f98d 	bl	8004f84 <RCCEx_PLL2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c70:	e015      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c76:	3328      	adds	r3, #40	@ 0x28
 8003c78:	2101      	movs	r1, #1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fa34 	bl	80050e8 <RCCEx_PLL3_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c86:	e00a      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c8e:	e006      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c90:	bf00      	nop
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c94:	bf00      	nop
 8003c96:	e002      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ca6:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003caa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cb6:	4a02      	ldr	r2, [pc, #8]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbc:	e006      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003cbe:	bf00      	nop
 8003cc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ce2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d037      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf6:	d00e      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cfc:	d816      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d06:	d111      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4bc4      	ldr	r3, [pc, #784]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4ac3      	ldr	r2, [pc, #780]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d14:	e00f      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 f930 	bl	8004f84 <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d2a:	e004      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d3e:	4bb7      	ldr	r3, [pc, #732]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4c:	4ab3      	ldr	r2, [pc, #716]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d52:	e003      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d039      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d81c      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d86:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003d9d 	.word	0x08003d9d
 8003d94:	08003dab 	.word	0x08003dab
 8003d98:	08003dc9 	.word	0x08003dc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b9f      	ldr	r3, [pc, #636]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a9e      	ldr	r2, [pc, #632]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dae:	3308      	adds	r3, #8
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f8e6 	bl	8004f84 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dd2:	4b92      	ldr	r3, [pc, #584]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	f023 0103 	bic.w	r1, r3, #3
 8003dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de0:	4a8e      	ldr	r2, [pc, #568]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003de2:	430b      	orrs	r3, r1
 8003de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f000 8099 	beq.w	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e12:	4b83      	ldr	r3, [pc, #524]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a82      	ldr	r2, [pc, #520]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fb1b 	bl	8001458 <HAL_GetTick>
 8003e22:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e26:	e00b      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e28:	f7fd fb16 	bl	8001458 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	@ 0x64
 8003e36:	d903      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e3e:	e005      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e40:	4b77      	ldr	r3, [pc, #476]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ed      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d173      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e54:	4b71      	ldr	r3, [pc, #452]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e60:	4053      	eors	r3, r2
 8003e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e6a:	4b6c      	ldr	r3, [pc, #432]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e72:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e76:	4b69      	ldr	r3, [pc, #420]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7a:	4a68      	ldr	r2, [pc, #416]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e82:	4b66      	ldr	r3, [pc, #408]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	4a65      	ldr	r2, [pc, #404]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e8e:	4a63      	ldr	r2, [pc, #396]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea2:	d118      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fad8 	bl	8001458 <HAL_GetTick>
 8003ea8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eac:	e00d      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd fad3 	bl	8001458 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003eb8:	1ad2      	subs	r2, r2, r3
 8003eba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d903      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eca:	4b54      	ldr	r3, [pc, #336]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0eb      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d129      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eee:	d10e      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f00:	091a      	lsrs	r2, r3, #4
 8003f02:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	4a45      	ldr	r2, [pc, #276]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6113      	str	r3, [r2, #16]
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003f0e:	4b43      	ldr	r3, [pc, #268]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	4a42      	ldr	r2, [pc, #264]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f18:	6113      	str	r3, [r2, #16]
 8003f1a:	4b40      	ldr	r3, [pc, #256]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f1c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2a:	4a3c      	ldr	r2, [pc, #240]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	e008      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f002 0301 	and.w	r3, r2, #1
 8003f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f000 808f 	beq.w	8004084 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f6c:	2b28      	cmp	r3, #40	@ 0x28
 8003f6e:	d871      	bhi.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003f70:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	0800405d 	.word	0x0800405d
 8003f7c:	08004055 	.word	0x08004055
 8003f80:	08004055 	.word	0x08004055
 8003f84:	08004055 	.word	0x08004055
 8003f88:	08004055 	.word	0x08004055
 8003f8c:	08004055 	.word	0x08004055
 8003f90:	08004055 	.word	0x08004055
 8003f94:	08004055 	.word	0x08004055
 8003f98:	08004029 	.word	0x08004029
 8003f9c:	08004055 	.word	0x08004055
 8003fa0:	08004055 	.word	0x08004055
 8003fa4:	08004055 	.word	0x08004055
 8003fa8:	08004055 	.word	0x08004055
 8003fac:	08004055 	.word	0x08004055
 8003fb0:	08004055 	.word	0x08004055
 8003fb4:	08004055 	.word	0x08004055
 8003fb8:	0800403f 	.word	0x0800403f
 8003fbc:	08004055 	.word	0x08004055
 8003fc0:	08004055 	.word	0x08004055
 8003fc4:	08004055 	.word	0x08004055
 8003fc8:	08004055 	.word	0x08004055
 8003fcc:	08004055 	.word	0x08004055
 8003fd0:	08004055 	.word	0x08004055
 8003fd4:	08004055 	.word	0x08004055
 8003fd8:	0800405d 	.word	0x0800405d
 8003fdc:	08004055 	.word	0x08004055
 8003fe0:	08004055 	.word	0x08004055
 8003fe4:	08004055 	.word	0x08004055
 8003fe8:	08004055 	.word	0x08004055
 8003fec:	08004055 	.word	0x08004055
 8003ff0:	08004055 	.word	0x08004055
 8003ff4:	08004055 	.word	0x08004055
 8003ff8:	0800405d 	.word	0x0800405d
 8003ffc:	08004055 	.word	0x08004055
 8004000:	08004055 	.word	0x08004055
 8004004:	08004055 	.word	0x08004055
 8004008:	08004055 	.word	0x08004055
 800400c:	08004055 	.word	0x08004055
 8004010:	08004055 	.word	0x08004055
 8004014:	08004055 	.word	0x08004055
 8004018:	0800405d 	.word	0x0800405d
 800401c:	58024400 	.word	0x58024400
 8004020:	58024800 	.word	0x58024800
 8004024:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402c:	3308      	adds	r3, #8
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ffa7 	bl	8004f84 <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800403c:	e00f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f84e 	bl	80050e8 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004066:	4bbf      	ldr	r3, [pc, #764]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004074:	4abb      	ldr	r2, [pc, #748]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004076:	430b      	orrs	r3, r1
 8004078:	6553      	str	r3, [r2, #84]	@ 0x54
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004080:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f002 0302 	and.w	r3, r2, #2
 8004090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800409a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d041      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d824      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80040ae:	a201      	add	r2, pc, #4	@ (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	08004101 	.word	0x08004101
 80040b8:	080040cd 	.word	0x080040cd
 80040bc:	080040e3 	.word	0x080040e3
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004101 	.word	0x08004101
 80040c8:	08004101 	.word	0x08004101
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d0:	3308      	adds	r3, #8
 80040d2:	2101      	movs	r1, #1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 ff55 	bl	8004f84 <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040e0:	e00f      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fffc 	bl	80050e8 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040f6:	e004      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800410a:	4b96      	ldr	r3, [pc, #600]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	f023 0107 	bic.w	r1, r3, #7
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004118:	4a92      	ldr	r2, [pc, #584]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800411a:	430b      	orrs	r3, r1
 800411c:	6553      	str	r3, [r2, #84]	@ 0x54
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 0304 	and.w	r3, r2, #4
 8004134:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800413e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d044      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004150:	2b05      	cmp	r3, #5
 8004152:	d825      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004154:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	080041a9 	.word	0x080041a9
 8004160:	08004175 	.word	0x08004175
 8004164:	0800418b 	.word	0x0800418b
 8004168:	080041a9 	.word	0x080041a9
 800416c:	080041a9 	.word	0x080041a9
 8004170:	080041a9 	.word	0x080041a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004178:	3308      	adds	r3, #8
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 ff01 	bl	8004f84 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418e:	3328      	adds	r3, #40	@ 0x28
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ffa8 	bl	80050e8 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f023 0107 	bic.w	r1, r3, #7
 80041ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c2:	4a68      	ldr	r2, [pc, #416]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f002 0320 	and.w	r3, r2, #32
 80041de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d055      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fe:	d033      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004204:	d82c      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d02f      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004210:	d826      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004212:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004216:	d02b      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004218:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800421c:	d820      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004222:	d012      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004228:	d81a      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d022      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800422e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004232:	d115      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004238:	3308      	adds	r3, #8
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fea1 	bl	8004f84 <RCCEx_PLL2_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004248:	e015      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424e:	3328      	adds	r3, #40	@ 0x28
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff48 	bl	80050e8 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800425e:	e00a      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004266:	e006      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004268:	bf00      	nop
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800426c:	bf00      	nop
 800426e:	e002      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800428e:	4a35      	ldr	r2, [pc, #212]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6553      	str	r3, [r2, #84]	@ 0x54
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800429a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800429e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d058      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042ca:	d033      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80042cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042d0:	d82c      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	d02f      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042dc:	d826      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e2:	d02b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80042e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e8:	d820      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f4:	d81a      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d022      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042fe:	d115      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004304:	3308      	adds	r3, #8
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe3b 	bl	8004f84 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004314:	e015      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fee2 	bl	80050e8 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800432a:	e00a      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004332:	e006      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004334:	bf00      	nop
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004338:	bf00      	nop
 800433a:	e002      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10e      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435a:	4a02      	ldr	r2, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800436c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800437c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004386:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800438a:	460b      	mov	r3, r1
 800438c:	4313      	orrs	r3, r2
 800438e:	d055      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004394:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004398:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800439c:	d033      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800439e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043a2:	d82c      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a8:	d02f      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80043aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ae:	d826      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80043b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043b4:	d02b      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80043b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043ba:	d820      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c0:	d012      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80043c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c6:	d81a      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d022      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d0:	d115      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d6:	3308      	adds	r3, #8
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fdd2 	bl	8004f84 <RCCEx_PLL2_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043e6:	e015      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ec:	3328      	adds	r3, #40	@ 0x28
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fe79 	bl	80050e8 <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043fc:	e00a      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800441c:	4ba0      	ldr	r3, [pc, #640]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004428:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800442c:	4a9c      	ldr	r2, [pc, #624]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800442e:	430b      	orrs	r3, r1
 8004430:	6593      	str	r3, [r2, #88]	@ 0x58
 8004432:	e003      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004438:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800443c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 0308 	and.w	r3, r2, #8
 8004448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004452:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d01e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fe38 	bl	80050e8 <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004484:	4b86      	ldr	r3, [pc, #536]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004494:	4a82      	ldr	r2, [pc, #520]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004496:	430b      	orrs	r3, r1
 8004498:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800449a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f002 0310 	and.w	r3, r2, #16
 80044a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d01e      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	2102      	movs	r1, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fe09 	bl	80050e8 <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e2:	4b6f      	ldr	r3, [pc, #444]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f2:	4a6b      	ldr	r2, [pc, #428]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004504:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004506:	2300      	movs	r3, #0
 8004508:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800450a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800450e:	460b      	mov	r3, r1
 8004510:	4313      	orrs	r3, r2
 8004512:	d03e      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800451c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004520:	d022      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004526:	d81b      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d00b      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004532:	e015      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	3308      	adds	r3, #8
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fd21 	bl	8004f84 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004548:	e00f      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454e:	3328      	adds	r3, #40	@ 0x28
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fdc8 	bl	80050e8 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800455e:	e004      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004572:	4b4b      	ldr	r3, [pc, #300]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800457a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004582:	4a47      	ldr	r2, [pc, #284]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004584:	430b      	orrs	r3, r1
 8004586:	6593      	str	r3, [r2, #88]	@ 0x58
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800459e:	673b      	str	r3, [r7, #112]	@ 0x70
 80045a0:	2300      	movs	r3, #0
 80045a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80045a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	d03b      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045ba:	d01f      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80045bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045c0:	d818      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80045c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045cc:	d007      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4b33      	ldr	r3, [pc, #204]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	4a32      	ldr	r2, [pc, #200]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045dc:	e00f      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e2:	3328      	adds	r3, #40	@ 0x28
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fd7e 	bl	80050e8 <RCCEx_PLL3_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80045f2:	e004      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80045fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004606:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800460e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004616:	4a22      	ldr	r2, [pc, #136]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004618:	430b      	orrs	r3, r1
 800461a:	6553      	str	r3, [r2, #84]	@ 0x54
 800461c:	e003      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004622:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004632:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004634:	2300      	movs	r3, #0
 8004636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004638:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800463c:	460b      	mov	r3, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	d034      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d007      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004652:	e011      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	4a11      	ldr	r2, [pc, #68]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800465a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800465e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004660:	e00e      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004666:	3308      	adds	r3, #8
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fc8a 	bl	8004f84 <RCCEx_PLL2_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004676:	e003      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800467e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10d      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800468a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004696:	4a02      	ldr	r2, [pc, #8]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004698:	430b      	orrs	r3, r1
 800469a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800469c:	e006      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800469e:	bf00      	nop
 80046a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ba:	2300      	movs	r3, #0
 80046bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80046be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046c2:	460b      	mov	r3, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	d00c      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046cc:	3328      	adds	r3, #40	@ 0x28
 80046ce:	2102      	movs	r1, #2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fd09 	bl	80050e8 <RCCEx_PLL3_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046f0:	2300      	movs	r3, #0
 80046f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d036      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004708:	d018      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800470a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470e:	d811      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004714:	d014      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471a:	d80b      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d011      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004724:	d106      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004726:	4bb7      	ldr	r3, [pc, #732]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	4ab6      	ldr	r2, [pc, #728]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800472c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004732:	e008      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800473a:	e004      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800473c:	bf00      	nop
 800473e:	e002      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800474e:	4bad      	ldr	r3, [pc, #692]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004752:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800475c:	4aa9      	ldr	r2, [pc, #676]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800475e:	430b      	orrs	r3, r1
 8004760:	6553      	str	r3, [r2, #84]	@ 0x54
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004768:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004778:	653b      	str	r3, [r7, #80]	@ 0x50
 800477a:	2300      	movs	r3, #0
 800477c:	657b      	str	r3, [r7, #84]	@ 0x54
 800477e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004788:	4b9e      	ldr	r3, [pc, #632]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800478a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	4a9b      	ldr	r2, [pc, #620]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004798:	430b      	orrs	r3, r1
 800479a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800479c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047aa:	2300      	movs	r3, #0
 80047ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047b8:	4b92      	ldr	r3, [pc, #584]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047bc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c6:	4a8f      	ldr	r2, [pc, #572]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80047d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80047da:	2300      	movs	r3, #0
 80047dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047e2:	460b      	mov	r3, r1
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047e8:	4b86      	ldr	r3, [pc, #536]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	4a85      	ldr	r2, [pc, #532]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047f2:	6113      	str	r3, [r2, #16]
 80047f4:	4b83      	ldr	r3, [pc, #524]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047f6:	6919      	ldr	r1, [r3, #16]
 80047f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004800:	4a80      	ldr	r2, [pc, #512]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004802:	430b      	orrs	r3, r1
 8004804:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004812:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004814:	2300      	movs	r3, #0
 8004816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004818:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004822:	4b78      	ldr	r3, [pc, #480]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004826:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800482a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004830:	4a74      	ldr	r2, [pc, #464]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004832:	430b      	orrs	r3, r1
 8004834:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004842:	633b      	str	r3, [r7, #48]	@ 0x30
 8004844:	2300      	movs	r3, #0
 8004846:	637b      	str	r3, [r7, #52]	@ 0x34
 8004848:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004852:	4b6c      	ldr	r3, [pc, #432]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800485a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004862:	4a68      	ldr	r2, [pc, #416]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004864:	430b      	orrs	r3, r1
 8004866:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	2100      	movs	r1, #0
 8004872:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d011      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004888:	3308      	adds	r3, #8
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fb79 	bl	8004f84 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	2100      	movs	r1, #0
 80048b2:	6239      	str	r1, [r7, #32]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d011      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	3308      	adds	r3, #8
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fb59 	bl	8004f84 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	2100      	movs	r1, #0
 80048f2:	61b9      	str	r1, [r7, #24]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d011      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004908:	3308      	adds	r3, #8
 800490a:	2102      	movs	r1, #2
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fb39 	bl	8004f84 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	2100      	movs	r1, #0
 8004932:	6139      	str	r1, [r7, #16]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d011      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004948:	3328      	adds	r3, #40	@ 0x28
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fbcb 	bl	80050e8 <RCCEx_PLL3_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	2100      	movs	r1, #0
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d011      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004988:	3328      	adds	r3, #40	@ 0x28
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fbab 	bl	80050e8 <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	2100      	movs	r1, #0
 80049b2:	6039      	str	r1, [r7, #0]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d011      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c8:	3328      	adds	r3, #40	@ 0x28
 80049ca:	2102      	movs	r1, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fb8b 	bl	80050e8 <RCCEx_PLL3_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80049d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80049e8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80049fc:	46bd      	mov	sp, r7
 80049fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400

08004a08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a0c:	f7fe fe00 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4904      	ldr	r1, [pc, #16]	@ (8004a30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	08008db4 	.word	0x08008db4

08004a34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b089      	sub	sp, #36	@ 0x24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a3c:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a46:	4b9f      	ldr	r3, [pc, #636]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4a:	0b1b      	lsrs	r3, r3, #12
 8004a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a52:	4b9c      	ldr	r3, [pc, #624]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a5e:	4b99      	ldr	r3, [pc, #612]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	fb02 f303 	mul.w	r3, r2, r3
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8111 	beq.w	8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	f000 8083 	beq.w	8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f200 80a1 	bhi.w	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d056      	beq.n	8004b4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a9e:	e099      	b.n	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa0:	4b88      	ldr	r3, [pc, #544]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02d      	beq.n	8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aac:	4b85      	ldr	r3, [pc, #532]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	08db      	lsrs	r3, r3, #3
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	4a84      	ldr	r2, [pc, #528]	@ (8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b06:	e087      	b.n	8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e065      	b.n	8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b59      	ldr	r3, [pc, #356]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	e043      	b.n	8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b48      	ldr	r3, [pc, #288]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd2:	e021      	b.n	8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c18:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	0a5b      	lsrs	r3, r3, #9
 8004c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3e:	ee17 2a90 	vmov	r2, s15
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c46:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4a:	0c1b      	lsrs	r3, r3, #16
 8004c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c6c:	ee17 2a90 	vmov	r2, s15
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c74:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c78:	0e1b      	lsrs	r3, r3, #24
 8004c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9a:	ee17 2a90 	vmov	r2, s15
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	609a      	str	r2, [r3, #8]
}
 8004cb6:	bf00      	nop
 8004cb8:	3724      	adds	r7, #36	@ 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	03d09000 	.word	0x03d09000
 8004ccc:	46000000 	.word	0x46000000
 8004cd0:	4c742400 	.word	0x4c742400
 8004cd4:	4a742400 	.word	0x4a742400
 8004cd8:	4bbebc20 	.word	0x4bbebc20

08004cdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	@ 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ce4:	4ba1      	ldr	r3, [pc, #644]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cee:	4b9f      	ldr	r3, [pc, #636]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	0d1b      	lsrs	r3, r3, #20
 8004cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d06:	4b99      	ldr	r3, [pc, #612]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8111 	beq.w	8004f4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	f000 8083 	beq.w	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	f200 80a1 	bhi.w	8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d056      	beq.n	8004df4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d46:	e099      	b.n	8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d48:	4b88      	ldr	r3, [pc, #544]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d02d      	beq.n	8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d54:	4b85      	ldr	r3, [pc, #532]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	08db      	lsrs	r3, r3, #3
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	4a84      	ldr	r2, [pc, #528]	@ (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004dae:	e087      	b.n	8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df2:	e065      	b.n	8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e06:	4b59      	ldr	r3, [pc, #356]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e36:	e043      	b.n	8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4a:	4b48      	ldr	r3, [pc, #288]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7a:	e021      	b.n	8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8e:	4b37      	ldr	r3, [pc, #220]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ebe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	0a5b      	lsrs	r3, r3, #9
 8004ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee6:	ee17 2a90 	vmov	r2, s15
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eee:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef8:	ee07 3a90 	vmov	s15, r3
 8004efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f14:	ee17 2a90 	vmov	r2, s15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f1c:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	0e1b      	lsrs	r3, r3, #24
 8004f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f42:	ee17 2a90 	vmov	r2, s15
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f4a:	e008      	b.n	8004f5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	609a      	str	r2, [r3, #8]
}
 8004f5e:	bf00      	nop
 8004f60:	3724      	adds	r7, #36	@ 0x24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	03d09000 	.word	0x03d09000
 8004f74:	46000000 	.word	0x46000000
 8004f78:	4c742400 	.word	0x4c742400
 8004f7c:	4a742400 	.word	0x4a742400
 8004f80:	4bbebc20 	.word	0x4bbebc20

08004f84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f92:	4b53      	ldr	r3, [pc, #332]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d101      	bne.n	8004fa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e099      	b.n	80050d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fae:	f7fc fa53 	bl	8001458 <HAL_GetTick>
 8004fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fb4:	e008      	b.n	8004fc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fb6:	f7fc fa4f 	bl	8001458 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e086      	b.n	80050d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fc8:	4b45      	ldr	r3, [pc, #276]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fd4:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	493f      	ldr	r1, [pc, #252]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	025b      	lsls	r3, r3, #9
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	3b01      	subs	r3, #1
 8005004:	041b      	lsls	r3, r3, #16
 8005006:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	3b01      	subs	r3, #1
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005018:	4931      	ldr	r1, [pc, #196]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800501e:	4b30      	ldr	r3, [pc, #192]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	492d      	ldr	r1, [pc, #180]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005030:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	f023 0220 	bic.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	4928      	ldr	r1, [pc, #160]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005042:	4b27      	ldr	r3, [pc, #156]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005048:	f023 0310 	bic.w	r3, r3, #16
 800504c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800504e:	4b24      	ldr	r3, [pc, #144]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005052:	4b24      	ldr	r3, [pc, #144]	@ (80050e4 <RCCEx_PLL2_Config+0x160>)
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	69d2      	ldr	r2, [r2, #28]
 800505a:	00d2      	lsls	r2, r2, #3
 800505c:	4920      	ldr	r1, [pc, #128]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	4a1e      	ldr	r2, [pc, #120]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005068:	f043 0310 	orr.w	r3, r3, #16
 800506c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005074:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	4a19      	ldr	r2, [pc, #100]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800507a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800507e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005080:	e00f      	b.n	80050a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d106      	bne.n	8005096 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005088:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	4a14      	ldr	r2, [pc, #80]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800508e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005092:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005094:	e005      	b.n	80050a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005096:	4b12      	ldr	r3, [pc, #72]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a11      	ldr	r2, [pc, #68]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 800509c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050a2:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 80050a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ae:	f7fc f9d3 	bl	8001458 <HAL_GetTick>
 80050b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050b4:	e008      	b.n	80050c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050b6:	f7fc f9cf 	bl	8001458 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e006      	b.n	80050d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <RCCEx_PLL2_Config+0x15c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	ffff0007 	.word	0xffff0007

080050e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050f6:	4b53      	ldr	r3, [pc, #332]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d101      	bne.n	8005106 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e099      	b.n	800523a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005106:	4b4f      	ldr	r3, [pc, #316]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a4e      	ldr	r2, [pc, #312]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 800510c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005112:	f7fc f9a1 	bl	8001458 <HAL_GetTick>
 8005116:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005118:	e008      	b.n	800512c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800511a:	f7fc f99d 	bl	8001458 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e086      	b.n	800523a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800512c:	4b45      	ldr	r3, [pc, #276]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005138:	4b42      	ldr	r3, [pc, #264]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	051b      	lsls	r3, r3, #20
 8005146:	493f      	ldr	r1, [pc, #252]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	628b      	str	r3, [r1, #40]	@ 0x28
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	3b01      	subs	r3, #1
 8005152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	3b01      	subs	r3, #1
 800515c:	025b      	lsls	r3, r3, #9
 800515e:	b29b      	uxth	r3, r3
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	3b01      	subs	r3, #1
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	3b01      	subs	r3, #1
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800517c:	4931      	ldr	r1, [pc, #196]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005182:	4b30      	ldr	r3, [pc, #192]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	492d      	ldr	r1, [pc, #180]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005194:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4928      	ldr	r1, [pc, #160]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051a6:	4b27      	ldr	r3, [pc, #156]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	4a26      	ldr	r2, [pc, #152]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051b2:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051b6:	4b24      	ldr	r3, [pc, #144]	@ (8005248 <RCCEx_PLL3_Config+0x160>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	69d2      	ldr	r2, [r2, #28]
 80051be:	00d2      	lsls	r2, r2, #3
 80051c0:	4920      	ldr	r1, [pc, #128]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	4a19      	ldr	r2, [pc, #100]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051e4:	e00f      	b.n	8005206 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051ec:	4b15      	ldr	r3, [pc, #84]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	4a14      	ldr	r2, [pc, #80]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051f8:	e005      	b.n	8005206 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051fa:	4b12      	ldr	r3, [pc, #72]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	4a11      	ldr	r2, [pc, #68]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 8005200:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005204:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005206:	4b0f      	ldr	r3, [pc, #60]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a0e      	ldr	r2, [pc, #56]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005212:	f7fc f921 	bl	8001458 <HAL_GetTick>
 8005216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005218:	e008      	b.n	800522c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800521a:	f7fc f91d 	bl	8001458 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e006      	b.n	800523a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <RCCEx_PLL3_Config+0x15c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	58024400 	.word	0x58024400
 8005248:	ffff0007 	.word	0xffff0007

0800524c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e042      	b.n	80052e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fb fe47 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2224      	movs	r2, #36	@ 0x24
 800527a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fb48 	bl	800692c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fcd9 	bl	8005c54 <UART_SetConfig>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e01b      	b.n	80052e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fbc7 	bl	8006a70 <UART_CheckIdleState>
 80052e2:	4603      	mov	r3, r0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	@ 0x28
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005302:	2b20      	cmp	r3, #32
 8005304:	d17b      	bne.n	80053fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_UART_Transmit+0x26>
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e074      	b.n	8005400 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2221      	movs	r2, #33	@ 0x21
 8005322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005326:	f7fc f897 	bl	8001458 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88fa      	ldrh	r2, [r7, #6]
 8005330:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005344:	d108      	bne.n	8005358 <HAL_UART_Transmit+0x6c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	e003      	b.n	8005360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005360:	e030      	b.n	80053c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2200      	movs	r2, #0
 800536a:	2180      	movs	r1, #128	@ 0x80
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f001 fc29 	bl	8006bc4 <UART_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e03d      	b.n	8005400 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005398:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	3302      	adds	r3, #2
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e007      	b.n	80053b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1c8      	bne.n	8005362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	2140      	movs	r1, #64	@ 0x40
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 fbf2 	bl	8006bc4 <UART_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e006      	b.n	8005400 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	@ 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800541c:	2b20      	cmp	r3, #32
 800541e:	d137      	bne.n	8005490 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_UART_Receive_IT+0x24>
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e030      	b.n	8005492 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a18      	ldr	r2, [pc, #96]	@ (800549c <HAL_UART_Receive_IT+0x94>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01f      	beq.n	8005480 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d018      	beq.n	8005480 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	613b      	str	r3, [r7, #16]
   return(result);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	61bb      	str	r3, [r7, #24]
   return(result);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	461a      	mov	r2, r3
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f001 fc0a 	bl	8006ca0 <UART_Start_Receive_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	e000      	b.n	8005492 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3728      	adds	r7, #40	@ 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	58000c00 	.word	0x58000c00

080054a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b0ba      	sub	sp, #232	@ 0xe8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80054ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80054ce:	4013      	ands	r3, r2
 80054d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80054d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d11b      	bne.n	8005514 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8377 	beq.w	8005bf8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	4798      	blx	r3
      }
      return;
 8005512:	e371      	b.n	8005bf8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8123 	beq.w	8005764 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800551e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005522:	4b8d      	ldr	r3, [pc, #564]	@ (8005758 <HAL_UART_IRQHandler+0x2b8>)
 8005524:	4013      	ands	r3, r2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800552a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800552e:	4b8b      	ldr	r3, [pc, #556]	@ (800575c <HAL_UART_IRQHandler+0x2bc>)
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8116 	beq.w	8005764 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <HAL_UART_IRQHandler+0xc8>
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00b      	beq.n	8005568 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2201      	movs	r2, #1
 8005556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555e:	f043 0201 	orr.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d011      	beq.n	8005598 <HAL_UART_IRQHandler+0xf8>
 8005574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2202      	movs	r2, #2
 8005586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558e:	f043 0204 	orr.w	r2, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d011      	beq.n	80055c8 <HAL_UART_IRQHandler+0x128>
 80055a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2204      	movs	r2, #4
 80055b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	f043 0202 	orr.w	r2, r3, #2
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d017      	beq.n	8005604 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80055e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80055e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005758 <HAL_UART_IRQHandler+0x2b8>)
 80055e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2208      	movs	r2, #8
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	f043 0208 	orr.w	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800560c:	2b00      	cmp	r3, #0
 800560e:	d012      	beq.n	8005636 <HAL_UART_IRQHandler+0x196>
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005614:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00c      	beq.n	8005636 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 82dd 	beq.w	8005bfc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d013      	beq.n	8005676 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800565a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568a:	2b40      	cmp	r3, #64	@ 0x40
 800568c:	d005      	beq.n	800569a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800568e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005692:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005696:	2b00      	cmp	r3, #0
 8005698:	d054      	beq.n	8005744 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fc22 	bl	8006ee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056aa:	2b40      	cmp	r3, #64	@ 0x40
 80056ac:	d146      	bne.n	800573c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1d9      	bne.n	80056ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005700:	2b00      	cmp	r3, #0
 8005702:	d017      	beq.n	8005734 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800570a:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <HAL_UART_IRQHandler+0x2c0>)
 800570c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005714:	4618      	mov	r0, r3
 8005716:	f7fc faf3 	bl	8001d00 <HAL_DMA_Abort_IT>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d019      	beq.n	8005754 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005732:	e00f      	b.n	8005754 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fa77 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573a:	e00b      	b.n	8005754 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fa73 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005742:	e007      	b.n	8005754 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa6f 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005752:	e253      	b.n	8005bfc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	bf00      	nop
    return;
 8005756:	e251      	b.n	8005bfc <HAL_UART_IRQHandler+0x75c>
 8005758:	10000001 	.word	0x10000001
 800575c:	04000120 	.word	0x04000120
 8005760:	08006fb1 	.word	0x08006fb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005768:	2b01      	cmp	r3, #1
 800576a:	f040 81e7 	bne.w	8005b3c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 81e0 	beq.w	8005b3c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 81d9 	beq.w	8005b3c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2210      	movs	r2, #16
 8005790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579c:	2b40      	cmp	r3, #64	@ 0x40
 800579e:	f040 8151 	bne.w	8005a44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a96      	ldr	r2, [pc, #600]	@ (8005a04 <HAL_UART_IRQHandler+0x564>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d068      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a93      	ldr	r2, [pc, #588]	@ (8005a08 <HAL_UART_IRQHandler+0x568>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d061      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a91      	ldr	r2, [pc, #580]	@ (8005a0c <HAL_UART_IRQHandler+0x56c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d05a      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005a10 <HAL_UART_IRQHandler+0x570>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d053      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a8c      	ldr	r2, [pc, #560]	@ (8005a14 <HAL_UART_IRQHandler+0x574>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d04c      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a89      	ldr	r2, [pc, #548]	@ (8005a18 <HAL_UART_IRQHandler+0x578>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d045      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a87      	ldr	r2, [pc, #540]	@ (8005a1c <HAL_UART_IRQHandler+0x57c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d03e      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a84      	ldr	r2, [pc, #528]	@ (8005a20 <HAL_UART_IRQHandler+0x580>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d037      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a82      	ldr	r2, [pc, #520]	@ (8005a24 <HAL_UART_IRQHandler+0x584>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d030      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a7f      	ldr	r2, [pc, #508]	@ (8005a28 <HAL_UART_IRQHandler+0x588>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d029      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a7d      	ldr	r2, [pc, #500]	@ (8005a2c <HAL_UART_IRQHandler+0x58c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d022      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a7a      	ldr	r2, [pc, #488]	@ (8005a30 <HAL_UART_IRQHandler+0x590>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01b      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a78      	ldr	r2, [pc, #480]	@ (8005a34 <HAL_UART_IRQHandler+0x594>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d014      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a75      	ldr	r2, [pc, #468]	@ (8005a38 <HAL_UART_IRQHandler+0x598>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00d      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a73      	ldr	r2, [pc, #460]	@ (8005a3c <HAL_UART_IRQHandler+0x59c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d006      	beq.n	8005882 <HAL_UART_IRQHandler+0x3e2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a70      	ldr	r2, [pc, #448]	@ (8005a40 <HAL_UART_IRQHandler+0x5a0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d106      	bne.n	8005890 <HAL_UART_IRQHandler+0x3f0>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b29b      	uxth	r3, r3
 800588e:	e005      	b.n	800589c <HAL_UART_IRQHandler+0x3fc>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 81ab 	beq.w	8005c00 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058b4:	429a      	cmp	r2, r3
 80058b6:	f080 81a3 	bcs.w	8005c00 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d0:	f000 8087 	beq.w	80059e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005902:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800590a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1da      	bne.n	80058d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800592e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005942:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005946:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800594a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e1      	bne.n	800591e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800596a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800596c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005970:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800597e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005980:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005984:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800598c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e3      	bne.n	800595a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059b0:	f023 0310 	bic.w	r3, r3, #16
 80059b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e4      	bne.n	80059a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fb fe71 	bl	80016c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f91d 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a02:	e0fd      	b.n	8005c00 <HAL_UART_IRQHandler+0x760>
 8005a04:	40020010 	.word	0x40020010
 8005a08:	40020028 	.word	0x40020028
 8005a0c:	40020040 	.word	0x40020040
 8005a10:	40020058 	.word	0x40020058
 8005a14:	40020070 	.word	0x40020070
 8005a18:	40020088 	.word	0x40020088
 8005a1c:	400200a0 	.word	0x400200a0
 8005a20:	400200b8 	.word	0x400200b8
 8005a24:	40020410 	.word	0x40020410
 8005a28:	40020428 	.word	0x40020428
 8005a2c:	40020440 	.word	0x40020440
 8005a30:	40020458 	.word	0x40020458
 8005a34:	40020470 	.word	0x40020470
 8005a38:	40020488 	.word	0x40020488
 8005a3c:	400204a0 	.word	0x400204a0
 8005a40:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80cf 	beq.w	8005c04 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005a66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80ca 	beq.w	8005c04 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a94:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e4      	bne.n	8005a70 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab6:	6a3a      	ldr	r2, [r7, #32]
 8005ab8:	4b55      	ldr	r3, [pc, #340]	@ (8005c10 <HAL_UART_IRQHandler+0x770>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005aca:	633a      	str	r2, [r7, #48]	@ 0x30
 8005acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e3      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0310 	bic.w	r3, r3, #16
 8005b06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	69b9      	ldr	r1, [r7, #24]
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	617b      	str	r3, [r7, #20]
   return(result);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e4      	bne.n	8005af2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f881 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b3a:	e063      	b.n	8005c04 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00e      	beq.n	8005b66 <HAL_UART_IRQHandler+0x6c6>
 8005b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 ff84 	bl	8007a6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b64:	e051      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d014      	beq.n	8005b9c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d105      	bne.n	8005b8a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d03a      	beq.n	8005c08 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
    }
    return;
 8005b9a:	e035      	b.n	8005c08 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_UART_IRQHandler+0x71c>
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fa11 	bl	8006fdc <UART_EndTransmit_IT>
    return;
 8005bba:	e026      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <HAL_UART_IRQHandler+0x73c>
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 ff5d 	bl	8007a94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bda:	e016      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d010      	beq.n	8005c0a <HAL_UART_IRQHandler+0x76a>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	da0c      	bge.n	8005c0a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 ff45 	bl	8007a80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bf6:	e008      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
      return;
 8005bf8:	bf00      	nop
 8005bfa:	e006      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
    return;
 8005bfc:	bf00      	nop
 8005bfe:	e004      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
      return;
 8005c00:	bf00      	nop
 8005c02:	e002      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
      return;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <HAL_UART_IRQHandler+0x76a>
    return;
 8005c08:	bf00      	nop
  }
}
 8005c0a:	37e8      	adds	r7, #232	@ 0xe8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	effffffe 	.word	0xeffffffe

08005c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c58:	b092      	sub	sp, #72	@ 0x48
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4bbe      	ldr	r3, [pc, #760]	@ (8005f7c <UART_SetConfig+0x328>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4ab3      	ldr	r2, [pc, #716]	@ (8005f80 <UART_SetConfig+0x32c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	4baf      	ldr	r3, [pc, #700]	@ (8005f84 <UART_SetConfig+0x330>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	f023 010f 	bic.w	r1, r3, #15
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4aa6      	ldr	r2, [pc, #664]	@ (8005f88 <UART_SetConfig+0x334>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d177      	bne.n	8005de4 <UART_SetConfig+0x190>
 8005cf4:	4ba5      	ldr	r3, [pc, #660]	@ (8005f8c <UART_SetConfig+0x338>)
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cfc:	2b28      	cmp	r3, #40	@ 0x28
 8005cfe:	d86d      	bhi.n	8005ddc <UART_SetConfig+0x188>
 8005d00:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <UART_SetConfig+0xb4>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005dad 	.word	0x08005dad
 8005d0c:	08005ddd 	.word	0x08005ddd
 8005d10:	08005ddd 	.word	0x08005ddd
 8005d14:	08005ddd 	.word	0x08005ddd
 8005d18:	08005ddd 	.word	0x08005ddd
 8005d1c:	08005ddd 	.word	0x08005ddd
 8005d20:	08005ddd 	.word	0x08005ddd
 8005d24:	08005ddd 	.word	0x08005ddd
 8005d28:	08005db5 	.word	0x08005db5
 8005d2c:	08005ddd 	.word	0x08005ddd
 8005d30:	08005ddd 	.word	0x08005ddd
 8005d34:	08005ddd 	.word	0x08005ddd
 8005d38:	08005ddd 	.word	0x08005ddd
 8005d3c:	08005ddd 	.word	0x08005ddd
 8005d40:	08005ddd 	.word	0x08005ddd
 8005d44:	08005ddd 	.word	0x08005ddd
 8005d48:	08005dbd 	.word	0x08005dbd
 8005d4c:	08005ddd 	.word	0x08005ddd
 8005d50:	08005ddd 	.word	0x08005ddd
 8005d54:	08005ddd 	.word	0x08005ddd
 8005d58:	08005ddd 	.word	0x08005ddd
 8005d5c:	08005ddd 	.word	0x08005ddd
 8005d60:	08005ddd 	.word	0x08005ddd
 8005d64:	08005ddd 	.word	0x08005ddd
 8005d68:	08005dc5 	.word	0x08005dc5
 8005d6c:	08005ddd 	.word	0x08005ddd
 8005d70:	08005ddd 	.word	0x08005ddd
 8005d74:	08005ddd 	.word	0x08005ddd
 8005d78:	08005ddd 	.word	0x08005ddd
 8005d7c:	08005ddd 	.word	0x08005ddd
 8005d80:	08005ddd 	.word	0x08005ddd
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005dcd 	.word	0x08005dcd
 8005d8c:	08005ddd 	.word	0x08005ddd
 8005d90:	08005ddd 	.word	0x08005ddd
 8005d94:	08005ddd 	.word	0x08005ddd
 8005d98:	08005ddd 	.word	0x08005ddd
 8005d9c:	08005ddd 	.word	0x08005ddd
 8005da0:	08005ddd 	.word	0x08005ddd
 8005da4:	08005ddd 	.word	0x08005ddd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e326      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e322      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e31e      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e31a      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005dcc:	2320      	movs	r3, #32
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e316      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005dd4:	2340      	movs	r3, #64	@ 0x40
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e312      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005ddc:	2380      	movs	r3, #128	@ 0x80
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e30e      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a69      	ldr	r2, [pc, #420]	@ (8005f90 <UART_SetConfig+0x33c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d130      	bne.n	8005e50 <UART_SetConfig+0x1fc>
 8005dee:	4b67      	ldr	r3, [pc, #412]	@ (8005f8c <UART_SetConfig+0x338>)
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d826      	bhi.n	8005e48 <UART_SetConfig+0x1f4>
 8005dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <UART_SetConfig+0x1ac>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e19 	.word	0x08005e19
 8005e04:	08005e21 	.word	0x08005e21
 8005e08:	08005e29 	.word	0x08005e29
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e39 	.word	0x08005e39
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e2f0      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e2ec      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e2e8      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e2e4      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e38:	2320      	movs	r3, #32
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e2e0      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e40:	2340      	movs	r3, #64	@ 0x40
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e2dc      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e48:	2380      	movs	r3, #128	@ 0x80
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e2d8      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a4f      	ldr	r2, [pc, #316]	@ (8005f94 <UART_SetConfig+0x340>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d130      	bne.n	8005ebc <UART_SetConfig+0x268>
 8005e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8005f8c <UART_SetConfig+0x338>)
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d826      	bhi.n	8005eb4 <UART_SetConfig+0x260>
 8005e66:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <UART_SetConfig+0x218>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005e85 	.word	0x08005e85
 8005e70:	08005e8d 	.word	0x08005e8d
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e2ba      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e2b6      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e2b2      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e2ae      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e2aa      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005eac:	2340      	movs	r3, #64	@ 0x40
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e2a6      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005eb4:	2380      	movs	r3, #128	@ 0x80
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e2a2      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a35      	ldr	r2, [pc, #212]	@ (8005f98 <UART_SetConfig+0x344>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d130      	bne.n	8005f28 <UART_SetConfig+0x2d4>
 8005ec6:	4b31      	ldr	r3, [pc, #196]	@ (8005f8c <UART_SetConfig+0x338>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d826      	bhi.n	8005f20 <UART_SetConfig+0x2cc>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <UART_SetConfig+0x284>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005ef1 	.word	0x08005ef1
 8005edc:	08005ef9 	.word	0x08005ef9
 8005ee0:	08005f01 	.word	0x08005f01
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f19 	.word	0x08005f19
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e284      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e280      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f00:	2308      	movs	r3, #8
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e27c      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e278      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f10:	2320      	movs	r3, #32
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e274      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f18:	2340      	movs	r3, #64	@ 0x40
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e270      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f20:	2380      	movs	r3, #128	@ 0x80
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e26c      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <UART_SetConfig+0x348>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d142      	bne.n	8005fb8 <UART_SetConfig+0x364>
 8005f32:	4b16      	ldr	r3, [pc, #88]	@ (8005f8c <UART_SetConfig+0x338>)
 8005f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d838      	bhi.n	8005fb0 <UART_SetConfig+0x35c>
 8005f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <UART_SetConfig+0x2f0>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f65 	.word	0x08005f65
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005fa1 	.word	0x08005fa1
 8005f58:	08005fa9 	.word	0x08005fa9
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e24e      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f64:	2304      	movs	r3, #4
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e24a      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e246      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f74:	2310      	movs	r3, #16
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e242      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005f7c:	cfff69f3 	.word	0xcfff69f3
 8005f80:	58000c00 	.word	0x58000c00
 8005f84:	11fff4ff 	.word	0x11fff4ff
 8005f88:	40011000 	.word	0x40011000
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	40004400 	.word	0x40004400
 8005f94:	40004800 	.word	0x40004800
 8005f98:	40004c00 	.word	0x40004c00
 8005f9c:	40005000 	.word	0x40005000
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e22c      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005fa8:	2340      	movs	r3, #64	@ 0x40
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e228      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e224      	b.n	8006402 <UART_SetConfig+0x7ae>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4ab1      	ldr	r2, [pc, #708]	@ (8006284 <UART_SetConfig+0x630>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d176      	bne.n	80060b0 <UART_SetConfig+0x45c>
 8005fc2:	4bb1      	ldr	r3, [pc, #708]	@ (8006288 <UART_SetConfig+0x634>)
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fca:	2b28      	cmp	r3, #40	@ 0x28
 8005fcc:	d86c      	bhi.n	80060a8 <UART_SetConfig+0x454>
 8005fce:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <UART_SetConfig+0x380>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08006079 	.word	0x08006079
 8005fd8:	080060a9 	.word	0x080060a9
 8005fdc:	080060a9 	.word	0x080060a9
 8005fe0:	080060a9 	.word	0x080060a9
 8005fe4:	080060a9 	.word	0x080060a9
 8005fe8:	080060a9 	.word	0x080060a9
 8005fec:	080060a9 	.word	0x080060a9
 8005ff0:	080060a9 	.word	0x080060a9
 8005ff4:	08006081 	.word	0x08006081
 8005ff8:	080060a9 	.word	0x080060a9
 8005ffc:	080060a9 	.word	0x080060a9
 8006000:	080060a9 	.word	0x080060a9
 8006004:	080060a9 	.word	0x080060a9
 8006008:	080060a9 	.word	0x080060a9
 800600c:	080060a9 	.word	0x080060a9
 8006010:	080060a9 	.word	0x080060a9
 8006014:	08006089 	.word	0x08006089
 8006018:	080060a9 	.word	0x080060a9
 800601c:	080060a9 	.word	0x080060a9
 8006020:	080060a9 	.word	0x080060a9
 8006024:	080060a9 	.word	0x080060a9
 8006028:	080060a9 	.word	0x080060a9
 800602c:	080060a9 	.word	0x080060a9
 8006030:	080060a9 	.word	0x080060a9
 8006034:	08006091 	.word	0x08006091
 8006038:	080060a9 	.word	0x080060a9
 800603c:	080060a9 	.word	0x080060a9
 8006040:	080060a9 	.word	0x080060a9
 8006044:	080060a9 	.word	0x080060a9
 8006048:	080060a9 	.word	0x080060a9
 800604c:	080060a9 	.word	0x080060a9
 8006050:	080060a9 	.word	0x080060a9
 8006054:	08006099 	.word	0x08006099
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060a9 	.word	0x080060a9
 8006060:	080060a9 	.word	0x080060a9
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060a9 	.word	0x080060a9
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060a9 	.word	0x080060a9
 8006074:	080060a1 	.word	0x080060a1
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e1c0      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e1bc      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e1b8      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e1b4      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006098:	2320      	movs	r3, #32
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e1b0      	b.n	8006402 <UART_SetConfig+0x7ae>
 80060a0:	2340      	movs	r3, #64	@ 0x40
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e1ac      	b.n	8006402 <UART_SetConfig+0x7ae>
 80060a8:	2380      	movs	r3, #128	@ 0x80
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e1a8      	b.n	8006402 <UART_SetConfig+0x7ae>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a75      	ldr	r2, [pc, #468]	@ (800628c <UART_SetConfig+0x638>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d130      	bne.n	800611c <UART_SetConfig+0x4c8>
 80060ba:	4b73      	ldr	r3, [pc, #460]	@ (8006288 <UART_SetConfig+0x634>)
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d826      	bhi.n	8006114 <UART_SetConfig+0x4c0>
 80060c6:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <UART_SetConfig+0x478>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060e5 	.word	0x080060e5
 80060d0:	080060ed 	.word	0x080060ed
 80060d4:	080060f5 	.word	0x080060f5
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e18a      	b.n	8006402 <UART_SetConfig+0x7ae>
 80060ec:	2304      	movs	r3, #4
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e186      	b.n	8006402 <UART_SetConfig+0x7ae>
 80060f4:	2308      	movs	r3, #8
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e182      	b.n	8006402 <UART_SetConfig+0x7ae>
 80060fc:	2310      	movs	r3, #16
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e17e      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006104:	2320      	movs	r3, #32
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e17a      	b.n	8006402 <UART_SetConfig+0x7ae>
 800610c:	2340      	movs	r3, #64	@ 0x40
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e176      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006114:	2380      	movs	r3, #128	@ 0x80
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e172      	b.n	8006402 <UART_SetConfig+0x7ae>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5b      	ldr	r2, [pc, #364]	@ (8006290 <UART_SetConfig+0x63c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d130      	bne.n	8006188 <UART_SetConfig+0x534>
 8006126:	4b58      	ldr	r3, [pc, #352]	@ (8006288 <UART_SetConfig+0x634>)
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b05      	cmp	r3, #5
 8006130:	d826      	bhi.n	8006180 <UART_SetConfig+0x52c>
 8006132:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <UART_SetConfig+0x4e4>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006151 	.word	0x08006151
 800613c:	08006159 	.word	0x08006159
 8006140:	08006161 	.word	0x08006161
 8006144:	08006169 	.word	0x08006169
 8006148:	08006171 	.word	0x08006171
 800614c:	08006179 	.word	0x08006179
 8006150:	2300      	movs	r3, #0
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e154      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e150      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e14c      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e148      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006170:	2320      	movs	r3, #32
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e144      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006178:	2340      	movs	r3, #64	@ 0x40
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e140      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e13c      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a41      	ldr	r2, [pc, #260]	@ (8006294 <UART_SetConfig+0x640>)
 800618e:	4293      	cmp	r3, r2
 8006190:	f040 8082 	bne.w	8006298 <UART_SetConfig+0x644>
 8006194:	4b3c      	ldr	r3, [pc, #240]	@ (8006288 <UART_SetConfig+0x634>)
 8006196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800619c:	2b28      	cmp	r3, #40	@ 0x28
 800619e:	d86d      	bhi.n	800627c <UART_SetConfig+0x628>
 80061a0:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0x554>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	0800624d 	.word	0x0800624d
 80061ac:	0800627d 	.word	0x0800627d
 80061b0:	0800627d 	.word	0x0800627d
 80061b4:	0800627d 	.word	0x0800627d
 80061b8:	0800627d 	.word	0x0800627d
 80061bc:	0800627d 	.word	0x0800627d
 80061c0:	0800627d 	.word	0x0800627d
 80061c4:	0800627d 	.word	0x0800627d
 80061c8:	08006255 	.word	0x08006255
 80061cc:	0800627d 	.word	0x0800627d
 80061d0:	0800627d 	.word	0x0800627d
 80061d4:	0800627d 	.word	0x0800627d
 80061d8:	0800627d 	.word	0x0800627d
 80061dc:	0800627d 	.word	0x0800627d
 80061e0:	0800627d 	.word	0x0800627d
 80061e4:	0800627d 	.word	0x0800627d
 80061e8:	0800625d 	.word	0x0800625d
 80061ec:	0800627d 	.word	0x0800627d
 80061f0:	0800627d 	.word	0x0800627d
 80061f4:	0800627d 	.word	0x0800627d
 80061f8:	0800627d 	.word	0x0800627d
 80061fc:	0800627d 	.word	0x0800627d
 8006200:	0800627d 	.word	0x0800627d
 8006204:	0800627d 	.word	0x0800627d
 8006208:	08006265 	.word	0x08006265
 800620c:	0800627d 	.word	0x0800627d
 8006210:	0800627d 	.word	0x0800627d
 8006214:	0800627d 	.word	0x0800627d
 8006218:	0800627d 	.word	0x0800627d
 800621c:	0800627d 	.word	0x0800627d
 8006220:	0800627d 	.word	0x0800627d
 8006224:	0800627d 	.word	0x0800627d
 8006228:	0800626d 	.word	0x0800626d
 800622c:	0800627d 	.word	0x0800627d
 8006230:	0800627d 	.word	0x0800627d
 8006234:	0800627d 	.word	0x0800627d
 8006238:	0800627d 	.word	0x0800627d
 800623c:	0800627d 	.word	0x0800627d
 8006240:	0800627d 	.word	0x0800627d
 8006244:	0800627d 	.word	0x0800627d
 8006248:	08006275 	.word	0x08006275
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e0d6      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006254:	2304      	movs	r3, #4
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e0d2      	b.n	8006402 <UART_SetConfig+0x7ae>
 800625c:	2308      	movs	r3, #8
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e0ce      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006264:	2310      	movs	r3, #16
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e0ca      	b.n	8006402 <UART_SetConfig+0x7ae>
 800626c:	2320      	movs	r3, #32
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e0c6      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006274:	2340      	movs	r3, #64	@ 0x40
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e0c2      	b.n	8006402 <UART_SetConfig+0x7ae>
 800627c:	2380      	movs	r3, #128	@ 0x80
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e0be      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006284:	40011400 	.word	0x40011400
 8006288:	58024400 	.word	0x58024400
 800628c:	40007800 	.word	0x40007800
 8006290:	40007c00 	.word	0x40007c00
 8006294:	40011800 	.word	0x40011800
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4aad      	ldr	r2, [pc, #692]	@ (8006554 <UART_SetConfig+0x900>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d176      	bne.n	8006390 <UART_SetConfig+0x73c>
 80062a2:	4bad      	ldr	r3, [pc, #692]	@ (8006558 <UART_SetConfig+0x904>)
 80062a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062aa:	2b28      	cmp	r3, #40	@ 0x28
 80062ac:	d86c      	bhi.n	8006388 <UART_SetConfig+0x734>
 80062ae:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <UART_SetConfig+0x660>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	08006359 	.word	0x08006359
 80062b8:	08006389 	.word	0x08006389
 80062bc:	08006389 	.word	0x08006389
 80062c0:	08006389 	.word	0x08006389
 80062c4:	08006389 	.word	0x08006389
 80062c8:	08006389 	.word	0x08006389
 80062cc:	08006389 	.word	0x08006389
 80062d0:	08006389 	.word	0x08006389
 80062d4:	08006361 	.word	0x08006361
 80062d8:	08006389 	.word	0x08006389
 80062dc:	08006389 	.word	0x08006389
 80062e0:	08006389 	.word	0x08006389
 80062e4:	08006389 	.word	0x08006389
 80062e8:	08006389 	.word	0x08006389
 80062ec:	08006389 	.word	0x08006389
 80062f0:	08006389 	.word	0x08006389
 80062f4:	08006369 	.word	0x08006369
 80062f8:	08006389 	.word	0x08006389
 80062fc:	08006389 	.word	0x08006389
 8006300:	08006389 	.word	0x08006389
 8006304:	08006389 	.word	0x08006389
 8006308:	08006389 	.word	0x08006389
 800630c:	08006389 	.word	0x08006389
 8006310:	08006389 	.word	0x08006389
 8006314:	08006371 	.word	0x08006371
 8006318:	08006389 	.word	0x08006389
 800631c:	08006389 	.word	0x08006389
 8006320:	08006389 	.word	0x08006389
 8006324:	08006389 	.word	0x08006389
 8006328:	08006389 	.word	0x08006389
 800632c:	08006389 	.word	0x08006389
 8006330:	08006389 	.word	0x08006389
 8006334:	08006379 	.word	0x08006379
 8006338:	08006389 	.word	0x08006389
 800633c:	08006389 	.word	0x08006389
 8006340:	08006389 	.word	0x08006389
 8006344:	08006389 	.word	0x08006389
 8006348:	08006389 	.word	0x08006389
 800634c:	08006389 	.word	0x08006389
 8006350:	08006389 	.word	0x08006389
 8006354:	08006381 	.word	0x08006381
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800635e:	e050      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006366:	e04c      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800636e:	e048      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006376:	e044      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006378:	2320      	movs	r3, #32
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800637e:	e040      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006380:	2340      	movs	r3, #64	@ 0x40
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006386:	e03c      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638e:	e038      	b.n	8006402 <UART_SetConfig+0x7ae>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a71      	ldr	r2, [pc, #452]	@ (800655c <UART_SetConfig+0x908>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d130      	bne.n	80063fc <UART_SetConfig+0x7a8>
 800639a:	4b6f      	ldr	r3, [pc, #444]	@ (8006558 <UART_SetConfig+0x904>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d826      	bhi.n	80063f4 <UART_SetConfig+0x7a0>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <UART_SetConfig+0x758>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063c5 	.word	0x080063c5
 80063b0:	080063cd 	.word	0x080063cd
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	2302      	movs	r3, #2
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ca:	e01a      	b.n	8006402 <UART_SetConfig+0x7ae>
 80063cc:	2304      	movs	r3, #4
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d2:	e016      	b.n	8006402 <UART_SetConfig+0x7ae>
 80063d4:	2308      	movs	r3, #8
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063da:	e012      	b.n	8006402 <UART_SetConfig+0x7ae>
 80063dc:	2310      	movs	r3, #16
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e2:	e00e      	b.n	8006402 <UART_SetConfig+0x7ae>
 80063e4:	2320      	movs	r3, #32
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ea:	e00a      	b.n	8006402 <UART_SetConfig+0x7ae>
 80063ec:	2340      	movs	r3, #64	@ 0x40
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e006      	b.n	8006402 <UART_SetConfig+0x7ae>
 80063f4:	2380      	movs	r3, #128	@ 0x80
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fa:	e002      	b.n	8006402 <UART_SetConfig+0x7ae>
 80063fc:	2380      	movs	r3, #128	@ 0x80
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a55      	ldr	r2, [pc, #340]	@ (800655c <UART_SetConfig+0x908>)
 8006408:	4293      	cmp	r3, r2
 800640a:	f040 80f8 	bne.w	80065fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800640e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006412:	2b20      	cmp	r3, #32
 8006414:	dc46      	bgt.n	80064a4 <UART_SetConfig+0x850>
 8006416:	2b02      	cmp	r3, #2
 8006418:	db75      	blt.n	8006506 <UART_SetConfig+0x8b2>
 800641a:	3b02      	subs	r3, #2
 800641c:	2b1e      	cmp	r3, #30
 800641e:	d872      	bhi.n	8006506 <UART_SetConfig+0x8b2>
 8006420:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <UART_SetConfig+0x7d4>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	080064ab 	.word	0x080064ab
 800642c:	08006507 	.word	0x08006507
 8006430:	080064b3 	.word	0x080064b3
 8006434:	08006507 	.word	0x08006507
 8006438:	08006507 	.word	0x08006507
 800643c:	08006507 	.word	0x08006507
 8006440:	080064c3 	.word	0x080064c3
 8006444:	08006507 	.word	0x08006507
 8006448:	08006507 	.word	0x08006507
 800644c:	08006507 	.word	0x08006507
 8006450:	08006507 	.word	0x08006507
 8006454:	08006507 	.word	0x08006507
 8006458:	08006507 	.word	0x08006507
 800645c:	08006507 	.word	0x08006507
 8006460:	080064d3 	.word	0x080064d3
 8006464:	08006507 	.word	0x08006507
 8006468:	08006507 	.word	0x08006507
 800646c:	08006507 	.word	0x08006507
 8006470:	08006507 	.word	0x08006507
 8006474:	08006507 	.word	0x08006507
 8006478:	08006507 	.word	0x08006507
 800647c:	08006507 	.word	0x08006507
 8006480:	08006507 	.word	0x08006507
 8006484:	08006507 	.word	0x08006507
 8006488:	08006507 	.word	0x08006507
 800648c:	08006507 	.word	0x08006507
 8006490:	08006507 	.word	0x08006507
 8006494:	08006507 	.word	0x08006507
 8006498:	08006507 	.word	0x08006507
 800649c:	08006507 	.word	0x08006507
 80064a0:	080064f9 	.word	0x080064f9
 80064a4:	2b40      	cmp	r3, #64	@ 0x40
 80064a6:	d02a      	beq.n	80064fe <UART_SetConfig+0x8aa>
 80064a8:	e02d      	b.n	8006506 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064aa:	f7fe faad 	bl	8004a08 <HAL_RCCEx_GetD3PCLK1Freq>
 80064ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064b0:	e02f      	b.n	8006512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fabc 	bl	8004a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c0:	e027      	b.n	8006512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c2:	f107 0318 	add.w	r3, r7, #24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fc08 	bl	8004cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d0:	e01f      	b.n	8006512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d2:	4b21      	ldr	r3, [pc, #132]	@ (8006558 <UART_SetConfig+0x904>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064de:	4b1e      	ldr	r3, [pc, #120]	@ (8006558 <UART_SetConfig+0x904>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	08db      	lsrs	r3, r3, #3
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006560 <UART_SetConfig+0x90c>)
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064f0:	e00f      	b.n	8006512 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80064f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006560 <UART_SetConfig+0x90c>)
 80064f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f6:	e00c      	b.n	8006512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006564 <UART_SetConfig+0x910>)
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006504:	e005      	b.n	8006512 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 81ee 	beq.w	80068f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	4a12      	ldr	r2, [pc, #72]	@ (8006568 <UART_SetConfig+0x914>)
 8006520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006524:	461a      	mov	r2, r3
 8006526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006528:	fbb3 f3f2 	udiv	r3, r3, r2
 800652c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	4413      	add	r3, r2
 8006538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653a:	429a      	cmp	r2, r3
 800653c:	d305      	bcc.n	800654a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006546:	429a      	cmp	r2, r3
 8006548:	d910      	bls.n	800656c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006550:	e1d1      	b.n	80068f6 <UART_SetConfig+0xca2>
 8006552:	bf00      	nop
 8006554:	40011c00 	.word	0x40011c00
 8006558:	58024400 	.word	0x58024400
 800655c:	58000c00 	.word	0x58000c00
 8006560:	03d09000 	.word	0x03d09000
 8006564:	003d0900 	.word	0x003d0900
 8006568:	08008dc4 	.word	0x08008dc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656e:	2200      	movs	r2, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	60fa      	str	r2, [r7, #12]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	4ac0      	ldr	r2, [pc, #768]	@ (800687c <UART_SetConfig+0xc28>)
 800657a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800657e:	b29b      	uxth	r3, r3
 8006580:	2200      	movs	r2, #0
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800658e:	f7f9 ff0f 	bl	80003b0 <__aeabi_uldivmod>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4610      	mov	r0, r2
 8006598:	4619      	mov	r1, r3
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	020b      	lsls	r3, r1, #8
 80065a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065a8:	0202      	lsls	r2, r0, #8
 80065aa:	6979      	ldr	r1, [r7, #20]
 80065ac:	6849      	ldr	r1, [r1, #4]
 80065ae:	0849      	lsrs	r1, r1, #1
 80065b0:	2000      	movs	r0, #0
 80065b2:	460c      	mov	r4, r1
 80065b4:	4605      	mov	r5, r0
 80065b6:	eb12 0804 	adds.w	r8, r2, r4
 80065ba:	eb43 0905 	adc.w	r9, r3, r5
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	469a      	mov	sl, r3
 80065c6:	4693      	mov	fp, r2
 80065c8:	4652      	mov	r2, sl
 80065ca:	465b      	mov	r3, fp
 80065cc:	4640      	mov	r0, r8
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7f9 feee 	bl	80003b0 <__aeabi_uldivmod>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4613      	mov	r3, r2
 80065da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e2:	d308      	bcc.n	80065f6 <UART_SetConfig+0x9a2>
 80065e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ea:	d204      	bcs.n	80065f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e17f      	b.n	80068f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065fc:	e17b      	b.n	80068f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006606:	f040 80bd 	bne.w	8006784 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800660a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800660e:	2b20      	cmp	r3, #32
 8006610:	dc48      	bgt.n	80066a4 <UART_SetConfig+0xa50>
 8006612:	2b00      	cmp	r3, #0
 8006614:	db7b      	blt.n	800670e <UART_SetConfig+0xaba>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d879      	bhi.n	800670e <UART_SetConfig+0xaba>
 800661a:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <UART_SetConfig+0x9cc>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	080066ab 	.word	0x080066ab
 8006624:	080066b3 	.word	0x080066b3
 8006628:	0800670f 	.word	0x0800670f
 800662c:	0800670f 	.word	0x0800670f
 8006630:	080066bb 	.word	0x080066bb
 8006634:	0800670f 	.word	0x0800670f
 8006638:	0800670f 	.word	0x0800670f
 800663c:	0800670f 	.word	0x0800670f
 8006640:	080066cb 	.word	0x080066cb
 8006644:	0800670f 	.word	0x0800670f
 8006648:	0800670f 	.word	0x0800670f
 800664c:	0800670f 	.word	0x0800670f
 8006650:	0800670f 	.word	0x0800670f
 8006654:	0800670f 	.word	0x0800670f
 8006658:	0800670f 	.word	0x0800670f
 800665c:	0800670f 	.word	0x0800670f
 8006660:	080066db 	.word	0x080066db
 8006664:	0800670f 	.word	0x0800670f
 8006668:	0800670f 	.word	0x0800670f
 800666c:	0800670f 	.word	0x0800670f
 8006670:	0800670f 	.word	0x0800670f
 8006674:	0800670f 	.word	0x0800670f
 8006678:	0800670f 	.word	0x0800670f
 800667c:	0800670f 	.word	0x0800670f
 8006680:	0800670f 	.word	0x0800670f
 8006684:	0800670f 	.word	0x0800670f
 8006688:	0800670f 	.word	0x0800670f
 800668c:	0800670f 	.word	0x0800670f
 8006690:	0800670f 	.word	0x0800670f
 8006694:	0800670f 	.word	0x0800670f
 8006698:	0800670f 	.word	0x0800670f
 800669c:	0800670f 	.word	0x0800670f
 80066a0:	08006701 	.word	0x08006701
 80066a4:	2b40      	cmp	r3, #64	@ 0x40
 80066a6:	d02e      	beq.n	8006706 <UART_SetConfig+0xab2>
 80066a8:	e031      	b.n	800670e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066aa:	f7fc ffe1 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80066ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066b0:	e033      	b.n	800671a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b2:	f7fc fff3 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 80066b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066b8:	e02f      	b.n	800671a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe f9b8 	bl	8004a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c8:	e027      	b.n	800671a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ca:	f107 0318 	add.w	r3, r7, #24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fb04 	bl	8004cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d8:	e01f      	b.n	800671a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066da:	4b69      	ldr	r3, [pc, #420]	@ (8006880 <UART_SetConfig+0xc2c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066e6:	4b66      	ldr	r3, [pc, #408]	@ (8006880 <UART_SetConfig+0xc2c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	4a64      	ldr	r2, [pc, #400]	@ (8006884 <UART_SetConfig+0xc30>)
 80066f2:	fa22 f303 	lsr.w	r3, r2, r3
 80066f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066f8:	e00f      	b.n	800671a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80066fa:	4b62      	ldr	r3, [pc, #392]	@ (8006884 <UART_SetConfig+0xc30>)
 80066fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066fe:	e00c      	b.n	800671a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006700:	4b61      	ldr	r3, [pc, #388]	@ (8006888 <UART_SetConfig+0xc34>)
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006704:	e009      	b.n	800671a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800670c:	e005      	b.n	800671a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800671a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80ea 	beq.w	80068f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	4a55      	ldr	r2, [pc, #340]	@ (800687c <UART_SetConfig+0xc28>)
 8006728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800672c:	461a      	mov	r2, r3
 800672e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006730:	fbb3 f3f2 	udiv	r3, r3, r2
 8006734:	005a      	lsls	r2, r3, #1
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	441a      	add	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d916      	bls.n	800677c <UART_SetConfig+0xb28>
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006754:	d212      	bcs.n	800677c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	b29b      	uxth	r3, r3
 800675a:	f023 030f 	bic.w	r3, r3, #15
 800675e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	b29a      	uxth	r2, r3
 800676c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800676e:	4313      	orrs	r3, r2
 8006770:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e0bc      	b.n	80068f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006782:	e0b8      	b.n	80068f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006784:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006788:	2b20      	cmp	r3, #32
 800678a:	dc4b      	bgt.n	8006824 <UART_SetConfig+0xbd0>
 800678c:	2b00      	cmp	r3, #0
 800678e:	f2c0 8087 	blt.w	80068a0 <UART_SetConfig+0xc4c>
 8006792:	2b20      	cmp	r3, #32
 8006794:	f200 8084 	bhi.w	80068a0 <UART_SetConfig+0xc4c>
 8006798:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <UART_SetConfig+0xb4c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	0800682b 	.word	0x0800682b
 80067a4:	08006833 	.word	0x08006833
 80067a8:	080068a1 	.word	0x080068a1
 80067ac:	080068a1 	.word	0x080068a1
 80067b0:	0800683b 	.word	0x0800683b
 80067b4:	080068a1 	.word	0x080068a1
 80067b8:	080068a1 	.word	0x080068a1
 80067bc:	080068a1 	.word	0x080068a1
 80067c0:	0800684b 	.word	0x0800684b
 80067c4:	080068a1 	.word	0x080068a1
 80067c8:	080068a1 	.word	0x080068a1
 80067cc:	080068a1 	.word	0x080068a1
 80067d0:	080068a1 	.word	0x080068a1
 80067d4:	080068a1 	.word	0x080068a1
 80067d8:	080068a1 	.word	0x080068a1
 80067dc:	080068a1 	.word	0x080068a1
 80067e0:	0800685b 	.word	0x0800685b
 80067e4:	080068a1 	.word	0x080068a1
 80067e8:	080068a1 	.word	0x080068a1
 80067ec:	080068a1 	.word	0x080068a1
 80067f0:	080068a1 	.word	0x080068a1
 80067f4:	080068a1 	.word	0x080068a1
 80067f8:	080068a1 	.word	0x080068a1
 80067fc:	080068a1 	.word	0x080068a1
 8006800:	080068a1 	.word	0x080068a1
 8006804:	080068a1 	.word	0x080068a1
 8006808:	080068a1 	.word	0x080068a1
 800680c:	080068a1 	.word	0x080068a1
 8006810:	080068a1 	.word	0x080068a1
 8006814:	080068a1 	.word	0x080068a1
 8006818:	080068a1 	.word	0x080068a1
 800681c:	080068a1 	.word	0x080068a1
 8006820:	08006893 	.word	0x08006893
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d037      	beq.n	8006898 <UART_SetConfig+0xc44>
 8006828:	e03a      	b.n	80068a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682a:	f7fc ff21 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 800682e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006830:	e03c      	b.n	80068ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006832:	f7fc ff33 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 8006836:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006838:	e038      	b.n	80068ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800683a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe f8f8 	bl	8004a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006848:	e030      	b.n	80068ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800684a:	f107 0318 	add.w	r3, r7, #24
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fa44 	bl	8004cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006858:	e028      	b.n	80068ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800685a:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <UART_SetConfig+0xc2c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d012      	beq.n	800688c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006866:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <UART_SetConfig+0xc2c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	08db      	lsrs	r3, r3, #3
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	4a04      	ldr	r2, [pc, #16]	@ (8006884 <UART_SetConfig+0xc30>)
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006878:	e018      	b.n	80068ac <UART_SetConfig+0xc58>
 800687a:	bf00      	nop
 800687c:	08008dc4 	.word	0x08008dc4
 8006880:	58024400 	.word	0x58024400
 8006884:	03d09000 	.word	0x03d09000
 8006888:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800688c:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <UART_SetConfig+0xccc>)
 800688e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006890:	e00c      	b.n	80068ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006892:	4b24      	ldr	r3, [pc, #144]	@ (8006924 <UART_SetConfig+0xcd0>)
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006896:	e009      	b.n	80068ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800689c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689e:	e005      	b.n	80068ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80068aa:	bf00      	nop
    }

    if (pclk != 0U)
 80068ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d021      	beq.n	80068f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <UART_SetConfig+0xcd4>)
 80068b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068bc:	461a      	mov	r2, r3
 80068be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	441a      	add	r2, r3
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	2b0f      	cmp	r3, #15
 80068da:	d909      	bls.n	80068f0 <UART_SetConfig+0xc9c>
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e2:	d205      	bcs.n	80068f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e002      	b.n	80068f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2201      	movs	r2, #1
 8006902:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2200      	movs	r2, #0
 8006910:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006912:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006916:	4618      	mov	r0, r3
 8006918:	3748      	adds	r7, #72	@ 0x48
 800691a:	46bd      	mov	sp, r7
 800691c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006920:	03d09000 	.word	0x03d09000
 8006924:	003d0900 	.word	0x003d0900
 8006928:	08008dc4 	.word	0x08008dc4

0800692c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01a      	beq.n	8006a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2a:	d10a      	bne.n	8006a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
  }
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b098      	sub	sp, #96	@ 0x60
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a80:	f7fa fcea 	bl	8001458 <HAL_GetTick>
 8006a84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d12f      	bne.n	8006af4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f88e 	bl	8006bc4 <UART_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d022      	beq.n	8006af4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ace:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e6      	bne.n	8006aae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e063      	b.n	8006bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d149      	bne.n	8006b96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f857 	bl	8006bc4 <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d03c      	beq.n	8006b96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	623b      	str	r3, [r7, #32]
   return(result);
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e6      	bne.n	8006b1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3308      	adds	r3, #8
 8006b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b6e:	61fa      	str	r2, [r7, #28]
 8006b70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	69b9      	ldr	r1, [r7, #24]
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e5      	bne.n	8006b4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e012      	b.n	8006bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3758      	adds	r7, #88	@ 0x58
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd4:	e04f      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bdc:	d04b      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bde:	f7fa fc3b 	bl	8001458 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e04e      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d037      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b80      	cmp	r3, #128	@ 0x80
 8006c0a:	d034      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b40      	cmp	r3, #64	@ 0x40
 8006c10:	d031      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d110      	bne.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2208      	movs	r2, #8
 8006c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f95b 	bl	8006ee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2208      	movs	r2, #8
 8006c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e029      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c50:	d111      	bne.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f941 	bl	8006ee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e00f      	b.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	bf0c      	ite	eq
 8006c86:	2301      	moveq	r3, #1
 8006c88:	2300      	movne	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d0a0      	beq.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b0a3      	sub	sp, #140	@ 0x8c
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cd2:	d10e      	bne.n	8006cf2 <UART_Start_Receive_IT+0x52>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <UART_Start_Receive_IT+0x48>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ce6:	e02d      	b.n	8006d44 <UART_Start_Receive_IT+0xa4>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	22ff      	movs	r2, #255	@ 0xff
 8006cec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cf0:	e028      	b.n	8006d44 <UART_Start_Receive_IT+0xa4>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10d      	bne.n	8006d16 <UART_Start_Receive_IT+0x76>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <UART_Start_Receive_IT+0x6c>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	22ff      	movs	r2, #255	@ 0xff
 8006d06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d0a:	e01b      	b.n	8006d44 <UART_Start_Receive_IT+0xa4>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	227f      	movs	r2, #127	@ 0x7f
 8006d10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d14:	e016      	b.n	8006d44 <UART_Start_Receive_IT+0xa4>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d1e:	d10d      	bne.n	8006d3c <UART_Start_Receive_IT+0x9c>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <UART_Start_Receive_IT+0x92>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	227f      	movs	r2, #127	@ 0x7f
 8006d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d30:	e008      	b.n	8006d44 <UART_Start_Receive_IT+0xa4>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	223f      	movs	r2, #63	@ 0x3f
 8006d36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d3a:	e003      	b.n	8006d44 <UART_Start_Receive_IT+0xa4>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2222      	movs	r2, #34	@ 0x22
 8006d50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006d64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006d78:	673a      	str	r2, [r7, #112]	@ 0x70
 8006d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006d7e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006d86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e3      	bne.n	8006d54 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d94:	d14f      	bne.n	8006e36 <UART_Start_Receive_IT+0x196>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d349      	bcc.n	8006e36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006daa:	d107      	bne.n	8006dbc <UART_Start_Receive_IT+0x11c>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d103      	bne.n	8006dbc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a47      	ldr	r2, [pc, #284]	@ (8006ed4 <UART_Start_Receive_IT+0x234>)
 8006db8:	675a      	str	r2, [r3, #116]	@ 0x74
 8006dba:	e002      	b.n	8006dc2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4a46      	ldr	r2, [pc, #280]	@ (8006ed8 <UART_Start_Receive_IT+0x238>)
 8006dc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01a      	beq.n	8006e00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006df2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e4      	bne.n	8006dca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e20:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006e22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_Start_Receive_IT+0x160>
 8006e34:	e046      	b.n	8006ec4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3e:	d107      	bne.n	8006e50 <UART_Start_Receive_IT+0x1b0>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a24      	ldr	r2, [pc, #144]	@ (8006edc <UART_Start_Receive_IT+0x23c>)
 8006e4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006e4e:	e002      	b.n	8006e56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a23      	ldr	r2, [pc, #140]	@ (8006ee0 <UART_Start_Receive_IT+0x240>)
 8006e54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d019      	beq.n	8006e92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006e72:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e6      	bne.n	8006e5e <UART_Start_Receive_IT+0x1be>
 8006e90:	e018      	b.n	8006ec4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f043 0320 	orr.w	r3, r3, #32
 8006ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	69f9      	ldr	r1, [r7, #28]
 8006eb6:	6a3a      	ldr	r2, [r7, #32]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	378c      	adds	r7, #140	@ 0x8c
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	08007705 	.word	0x08007705
 8006ed8:	080073a5 	.word	0x080073a5
 8006edc:	080071ed 	.word	0x080071ed
 8006ee0:	08007035 	.word	0x08007035

08006ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b095      	sub	sp, #84	@ 0x54
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e6      	bne.n	8006eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	4b1e      	ldr	r3, [pc, #120]	@ (8006fac <UART_EndRxTransfer+0xc8>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e5      	bne.n	8006f1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d118      	bne.n	8006f8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0310 	bic.w	r3, r3, #16
 8006f6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6979      	ldr	r1, [r7, #20]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	613b      	str	r3, [r7, #16]
   return(result);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e6      	bne.n	8006f5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006fa0:	bf00      	nop
 8006fa2:	3754      	adds	r7, #84	@ 0x54
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	effffffe 	.word	0xeffffffe

08006fb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7fe fe2a 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6979      	ldr	r1, [r7, #20]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	613b      	str	r3, [r7, #16]
   return(result);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e6      	bne.n	8006fe4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fe fdf5 	bl	8005c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702a:	bf00      	nop
 800702c:	3720      	adds	r7, #32
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b09c      	sub	sp, #112	@ 0x70
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007042:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704c:	2b22      	cmp	r3, #34	@ 0x22
 800704e:	f040 80be 	bne.w	80071ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800705c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007060:	b2d9      	uxtb	r1, r3
 8007062:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007066:	b2da      	uxtb	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800706c:	400a      	ands	r2, r1
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 80a1 	bne.w	80071de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e6      	bne.n	800709c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e0:	f023 0301 	bic.w	r3, r3, #1
 80070e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80070ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80070f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e5      	bne.n	80070ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a33      	ldr	r2, [pc, #204]	@ (80071e8 <UART_RxISR_8BIT+0x1b4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d01f      	beq.n	8007160 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d018      	beq.n	8007160 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	623b      	str	r3, [r7, #32]
   return(result);
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007142:	663b      	str	r3, [r7, #96]	@ 0x60
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800714c:	633b      	str	r3, [r7, #48]	@ 0x30
 800714e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e6      	bne.n	800712e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d12e      	bne.n	80071c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	60fb      	str	r3, [r7, #12]
   return(result);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0310 	bic.w	r3, r3, #16
 8007182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	69b9      	ldr	r1, [r7, #24]
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	617b      	str	r3, [r7, #20]
   return(result);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d103      	bne.n	80071b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2210      	movs	r2, #16
 80071b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fe fd3c 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071c4:	e00b      	b.n	80071de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7f9 fb32 	bl	8000830 <HAL_UART_RxCpltCallback>
}
 80071cc:	e007      	b.n	80071de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	699a      	ldr	r2, [r3, #24]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0208 	orr.w	r2, r2, #8
 80071dc:	619a      	str	r2, [r3, #24]
}
 80071de:	bf00      	nop
 80071e0:	3770      	adds	r7, #112	@ 0x70
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	58000c00 	.word	0x58000c00

080071ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b09c      	sub	sp, #112	@ 0x70
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007204:	2b22      	cmp	r3, #34	@ 0x22
 8007206:	f040 80be 	bne.w	8007386 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007210:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800721a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800721e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007222:	4013      	ands	r3, r2
 8007224:	b29a      	uxth	r2, r3
 8007226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007228:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	1c9a      	adds	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	f040 80a1 	bne.w	8007396 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007268:	667b      	str	r3, [r7, #100]	@ 0x64
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007272:	657b      	str	r3, [r7, #84]	@ 0x54
 8007274:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007278:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e6      	bne.n	8007254 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	663b      	str	r3, [r7, #96]	@ 0x60
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80072a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e5      	bne.n	8007286 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2220      	movs	r2, #32
 80072be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a33      	ldr	r2, [pc, #204]	@ (80073a0 <UART_RxISR_16BIT+0x1b4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01f      	beq.n	8007318 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d018      	beq.n	8007318 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007306:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800730a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e6      	bne.n	80072e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d12e      	bne.n	800737e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	60bb      	str	r3, [r7, #8]
   return(result);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f023 0310 	bic.w	r3, r3, #16
 800733a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6979      	ldr	r1, [r7, #20]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	613b      	str	r3, [r7, #16]
   return(result);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e6      	bne.n	8007326 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b10      	cmp	r3, #16
 8007364:	d103      	bne.n	800736e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2210      	movs	r2, #16
 800736c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fe fc60 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800737c:	e00b      	b.n	8007396 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7f9 fa56 	bl	8000830 <HAL_UART_RxCpltCallback>
}
 8007384:	e007      	b.n	8007396 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0208 	orr.w	r2, r2, #8
 8007394:	619a      	str	r2, [r3, #24]
}
 8007396:	bf00      	nop
 8007398:	3770      	adds	r7, #112	@ 0x70
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	58000c00 	.word	0x58000c00

080073a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b0ac      	sub	sp, #176	@ 0xb0
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073da:	2b22      	cmp	r3, #34	@ 0x22
 80073dc:	f040 8180 	bne.w	80076e0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073ea:	e123      	b.n	8007634 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80073fa:	b2d9      	uxtb	r1, r3
 80073fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007400:	b2da      	uxtb	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007406:	400a      	ands	r2, r1
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d053      	beq.n	80074e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800743e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d011      	beq.n	800746e <UART_RxISR_8BIT_FIFOEN+0xca>
 800744a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800744e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2201      	movs	r2, #1
 800745c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007464:	f043 0201 	orr.w	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800746e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d011      	beq.n	800749e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800747a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2202      	movs	r2, #2
 800748c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007494:	f043 0204 	orr.w	r2, r3, #4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800749e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d011      	beq.n	80074ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2204      	movs	r2, #4
 80074bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c4:	f043 0202 	orr.w	r2, r3, #2
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d006      	beq.n	80074e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fe fba5 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f040 80a0 	bne.w	8007634 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007516:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007518:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800751c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e4      	bne.n	80074f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800753a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800753c:	4b6e      	ldr	r3, [pc, #440]	@ (80076f8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800753e:	4013      	ands	r3, r2
 8007540:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3308      	adds	r3, #8
 800754a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800754e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007550:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007554:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800755c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e3      	bne.n	800752a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a60      	ldr	r2, [pc, #384]	@ (80076fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d021      	beq.n	80075c4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01a      	beq.n	80075c4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800759c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800759e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80075b2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80075be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e4      	bne.n	800758e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d130      	bne.n	800762e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80075f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e4      	bne.n	80075d2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b10      	cmp	r3, #16
 8007614:	d103      	bne.n	800761e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2210      	movs	r2, #16
 800761c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fe fb08 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 800762c:	e002      	b.n	8007634 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7f9 f8fe 	bl	8000830 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007634:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800763c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	f47f aed1 	bne.w	80073ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007650:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007654:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007658:	2b00      	cmp	r3, #0
 800765a:	d049      	beq.n	80076f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007662:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007666:	429a      	cmp	r2, r3
 8007668:	d242      	bcs.n	80076f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	61fb      	str	r3, [r7, #28]
   return(result);
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800768e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007690:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e3      	bne.n	800766a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a16      	ldr	r2, [pc, #88]	@ (8007700 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80076a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f043 0320 	orr.w	r3, r3, #32
 80076bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6979      	ldr	r1, [r7, #20]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	613b      	str	r3, [r7, #16]
   return(result);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e4      	bne.n	80076a8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076de:	e007      	b.n	80076f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0208 	orr.w	r2, r2, #8
 80076ee:	619a      	str	r2, [r3, #24]
}
 80076f0:	bf00      	nop
 80076f2:	37b0      	adds	r7, #176	@ 0xb0
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	effffffe 	.word	0xeffffffe
 80076fc:	58000c00 	.word	0x58000c00
 8007700:	08007035 	.word	0x08007035

08007704 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b0ae      	sub	sp, #184	@ 0xb8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007712:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800773a:	2b22      	cmp	r3, #34	@ 0x22
 800773c:	f040 8184 	bne.w	8007a48 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007746:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800774a:	e127      	b.n	800799c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800775e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007762:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007766:	4013      	ands	r3, r2
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800776e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007774:	1c9a      	adds	r2, r3, #2
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007780:	b29b      	uxth	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d053      	beq.n	800784a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d011      	beq.n	80077d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80077ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2201      	movs	r2, #1
 80077c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c8:	f043 0201 	orr.w	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d011      	beq.n	8007802 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80077de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2202      	movs	r2, #2
 80077f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f8:	f043 0204 	orr.w	r2, r3, #4
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	d011      	beq.n	8007832 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800780e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2204      	movs	r2, #4
 8007820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007828:	f043 0202 	orr.w	r2, r3, #2
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007838:	2b00      	cmp	r3, #0
 800783a:	d006      	beq.n	800784a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7fe f9f3 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	f040 80a2 	bne.w	800799c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007866:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800786c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800787a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800787e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007882:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800788c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e2      	bne.n	8007858 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078a4:	4b6e      	ldr	r3, [pc, #440]	@ (8007a60 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80078a6:	4013      	ands	r3, r2
 80078a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80078b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e3      	bne.n	8007892 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a60      	ldr	r2, [pc, #384]	@ (8007a64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d021      	beq.n	800792c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01a      	beq.n	800792c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800790a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007918:	65bb      	str	r3, [r7, #88]	@ 0x58
 800791a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800791e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e4      	bne.n	80078f6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d130      	bne.n	8007996 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794a:	f023 0310 	bic.w	r3, r3, #16
 800794e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800795c:	647b      	str	r3, [r7, #68]	@ 0x44
 800795e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800796a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e4      	bne.n	800793a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	2b10      	cmp	r3, #16
 800797c:	d103      	bne.n	8007986 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2210      	movs	r2, #16
 8007984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fe f954 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 8007994:	e002      	b.n	800799c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7f8 ff4a 	bl	8000830 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800799c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d006      	beq.n	80079b2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80079a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f47f aecd 	bne.w	800774c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079b8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d049      	beq.n	8007a58 <UART_RxISR_16BIT_FIFOEN+0x354>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079ca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d242      	bcs.n	8007a58 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	623b      	str	r3, [r7, #32]
   return(result);
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80079f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80079f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a16      	ldr	r2, [pc, #88]	@ (8007a68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007a0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f043 0320 	orr.w	r3, r3, #32
 8007a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	69b9      	ldr	r1, [r7, #24]
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e4      	bne.n	8007a10 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a46:	e007      	b.n	8007a58 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0208 	orr.w	r2, r2, #8
 8007a56:	619a      	str	r2, [r3, #24]
}
 8007a58:	bf00      	nop
 8007a5a:	37b8      	adds	r7, #184	@ 0xb8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	effffffe 	.word	0xeffffffe
 8007a64:	58000c00 	.word	0x58000c00
 8007a68:	080071ed 	.word	0x080071ed

08007a6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_UARTEx_DisableFifoMode+0x16>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e027      	b.n	8007b0e <HAL_UARTEx_DisableFifoMode+0x66>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2224      	movs	r2, #36	@ 0x24
 8007aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0201 	bic.w	r2, r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007aec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e02d      	b.n	8007b8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2224      	movs	r2, #36	@ 0x24
 8007b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f850 	bl	8007c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007baa:	2302      	movs	r3, #2
 8007bac:	e02d      	b.n	8007c0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2224      	movs	r2, #36	@ 0x24
 8007bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f812 	bl	8007c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d108      	bne.n	8007c36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c34:	e031      	b.n	8007c9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c36:	2310      	movs	r3, #16
 8007c38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c3a:	2310      	movs	r3, #16
 8007c3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	0e5b      	lsrs	r3, r3, #25
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	0f5b      	lsrs	r3, r3, #29
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	7b3a      	ldrb	r2, [r7, #12]
 8007c62:	4911      	ldr	r1, [pc, #68]	@ (8007ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8007c64:	5c8a      	ldrb	r2, [r1, r2]
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c6a:	7b3a      	ldrb	r2, [r7, #12]
 8007c6c:	490f      	ldr	r1, [pc, #60]	@ (8007cac <UARTEx_SetNbDataToProcess+0x98>)
 8007c6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	7b7a      	ldrb	r2, [r7, #13]
 8007c80:	4909      	ldr	r1, [pc, #36]	@ (8007ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8007c82:	5c8a      	ldrb	r2, [r1, r2]
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c88:	7b7a      	ldrb	r2, [r7, #13]
 8007c8a:	4908      	ldr	r1, [pc, #32]	@ (8007cac <UARTEx_SetNbDataToProcess+0x98>)
 8007c8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	08008ddc 	.word	0x08008ddc
 8007cac:	08008de4 	.word	0x08008de4

08007cb0 <std>:
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cbe:	6083      	str	r3, [r0, #8]
 8007cc0:	8181      	strh	r1, [r0, #12]
 8007cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cc4:	81c2      	strh	r2, [r0, #14]
 8007cc6:	6183      	str	r3, [r0, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2208      	movs	r2, #8
 8007ccc:	305c      	adds	r0, #92	@ 0x5c
 8007cce:	f000 f921 	bl	8007f14 <memset>
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <std+0x58>)
 8007cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <std+0x5c>)
 8007cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <std+0x60>)
 8007cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <std+0x64>)
 8007ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <std+0x68>)
 8007ce4:	6224      	str	r4, [r4, #32]
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	d006      	beq.n	8007cf8 <std+0x48>
 8007cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cee:	4294      	cmp	r4, r2
 8007cf0:	d002      	beq.n	8007cf8 <std+0x48>
 8007cf2:	33d0      	adds	r3, #208	@ 0xd0
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d105      	bne.n	8007d04 <std+0x54>
 8007cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f000 b93a 	b.w	8007f78 <__retarget_lock_init_recursive>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	080087d1 	.word	0x080087d1
 8007d0c:	080087f3 	.word	0x080087f3
 8007d10:	0800882b 	.word	0x0800882b
 8007d14:	0800884f 	.word	0x0800884f
 8007d18:	240005f8 	.word	0x240005f8

08007d1c <stdio_exit_handler>:
 8007d1c:	4a02      	ldr	r2, [pc, #8]	@ (8007d28 <stdio_exit_handler+0xc>)
 8007d1e:	4903      	ldr	r1, [pc, #12]	@ (8007d2c <stdio_exit_handler+0x10>)
 8007d20:	4803      	ldr	r0, [pc, #12]	@ (8007d30 <stdio_exit_handler+0x14>)
 8007d22:	f000 b869 	b.w	8007df8 <_fwalk_sglue>
 8007d26:	bf00      	nop
 8007d28:	24000014 	.word	0x24000014
 8007d2c:	08008769 	.word	0x08008769
 8007d30:	24000024 	.word	0x24000024

08007d34 <cleanup_stdio>:
 8007d34:	6841      	ldr	r1, [r0, #4]
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <cleanup_stdio+0x34>)
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	d001      	beq.n	8007d44 <cleanup_stdio+0x10>
 8007d40:	f000 fd12 	bl	8008768 <_fflush_r>
 8007d44:	68a1      	ldr	r1, [r4, #8]
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <cleanup_stdio+0x38>)
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	d002      	beq.n	8007d52 <cleanup_stdio+0x1e>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f000 fd0b 	bl	8008768 <_fflush_r>
 8007d52:	68e1      	ldr	r1, [r4, #12]
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <cleanup_stdio+0x3c>)
 8007d56:	4299      	cmp	r1, r3
 8007d58:	d004      	beq.n	8007d64 <cleanup_stdio+0x30>
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f000 bd02 	b.w	8008768 <_fflush_r>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	240005f8 	.word	0x240005f8
 8007d6c:	24000660 	.word	0x24000660
 8007d70:	240006c8 	.word	0x240006c8

08007d74 <global_stdio_init.part.0>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <global_stdio_init.part.0+0x30>)
 8007d78:	4c0b      	ldr	r4, [pc, #44]	@ (8007da8 <global_stdio_init.part.0+0x34>)
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dac <global_stdio_init.part.0+0x38>)
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	2200      	movs	r2, #0
 8007d82:	2104      	movs	r1, #4
 8007d84:	f7ff ff94 	bl	8007cb0 <std>
 8007d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2109      	movs	r1, #9
 8007d90:	f7ff ff8e 	bl	8007cb0 <std>
 8007d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d98:	2202      	movs	r2, #2
 8007d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9e:	2112      	movs	r1, #18
 8007da0:	f7ff bf86 	b.w	8007cb0 <std>
 8007da4:	24000730 	.word	0x24000730
 8007da8:	240005f8 	.word	0x240005f8
 8007dac:	08007d1d 	.word	0x08007d1d

08007db0 <__sfp_lock_acquire>:
 8007db0:	4801      	ldr	r0, [pc, #4]	@ (8007db8 <__sfp_lock_acquire+0x8>)
 8007db2:	f000 b8e2 	b.w	8007f7a <__retarget_lock_acquire_recursive>
 8007db6:	bf00      	nop
 8007db8:	24000735 	.word	0x24000735

08007dbc <__sfp_lock_release>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__sfp_lock_release+0x8>)
 8007dbe:	f000 b8dd 	b.w	8007f7c <__retarget_lock_release_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	24000735 	.word	0x24000735

08007dc8 <__sinit>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	f7ff fff0 	bl	8007db0 <__sfp_lock_acquire>
 8007dd0:	6a23      	ldr	r3, [r4, #32]
 8007dd2:	b11b      	cbz	r3, 8007ddc <__sinit+0x14>
 8007dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd8:	f7ff bff0 	b.w	8007dbc <__sfp_lock_release>
 8007ddc:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <__sinit+0x28>)
 8007dde:	6223      	str	r3, [r4, #32]
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <__sinit+0x2c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f5      	bne.n	8007dd4 <__sinit+0xc>
 8007de8:	f7ff ffc4 	bl	8007d74 <global_stdio_init.part.0>
 8007dec:	e7f2      	b.n	8007dd4 <__sinit+0xc>
 8007dee:	bf00      	nop
 8007df0:	08007d35 	.word	0x08007d35
 8007df4:	24000730 	.word	0x24000730

08007df8 <_fwalk_sglue>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4688      	mov	r8, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	2600      	movs	r6, #0
 8007e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e08:	f1b9 0901 	subs.w	r9, r9, #1
 8007e0c:	d505      	bpl.n	8007e1a <_fwalk_sglue+0x22>
 8007e0e:	6824      	ldr	r4, [r4, #0]
 8007e10:	2c00      	cmp	r4, #0
 8007e12:	d1f7      	bne.n	8007e04 <_fwalk_sglue+0xc>
 8007e14:	4630      	mov	r0, r6
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d907      	bls.n	8007e30 <_fwalk_sglue+0x38>
 8007e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e24:	3301      	adds	r3, #1
 8007e26:	d003      	beq.n	8007e30 <_fwalk_sglue+0x38>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	4306      	orrs	r6, r0
 8007e30:	3568      	adds	r5, #104	@ 0x68
 8007e32:	e7e9      	b.n	8007e08 <_fwalk_sglue+0x10>

08007e34 <iprintf>:
 8007e34:	b40f      	push	{r0, r1, r2, r3}
 8007e36:	b507      	push	{r0, r1, r2, lr}
 8007e38:	4906      	ldr	r1, [pc, #24]	@ (8007e54 <iprintf+0x20>)
 8007e3a:	ab04      	add	r3, sp, #16
 8007e3c:	6808      	ldr	r0, [r1, #0]
 8007e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e42:	6881      	ldr	r1, [r0, #8]
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	f000 f8c3 	bl	8007fd0 <_vfiprintf_r>
 8007e4a:	b003      	add	sp, #12
 8007e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e50:	b004      	add	sp, #16
 8007e52:	4770      	bx	lr
 8007e54:	24000020 	.word	0x24000020

08007e58 <_puts_r>:
 8007e58:	6a03      	ldr	r3, [r0, #32]
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	6884      	ldr	r4, [r0, #8]
 8007e5e:	4605      	mov	r5, r0
 8007e60:	460e      	mov	r6, r1
 8007e62:	b90b      	cbnz	r3, 8007e68 <_puts_r+0x10>
 8007e64:	f7ff ffb0 	bl	8007dc8 <__sinit>
 8007e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e6a:	07db      	lsls	r3, r3, #31
 8007e6c:	d405      	bmi.n	8007e7a <_puts_r+0x22>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_puts_r+0x22>
 8007e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e76:	f000 f880 	bl	8007f7a <__retarget_lock_acquire_recursive>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	0719      	lsls	r1, r3, #28
 8007e7e:	d502      	bpl.n	8007e86 <_puts_r+0x2e>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d135      	bne.n	8007ef2 <_puts_r+0x9a>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 fd23 	bl	80088d4 <__swsetup_r>
 8007e8e:	b380      	cbz	r0, 8007ef2 <_puts_r+0x9a>
 8007e90:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007e94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e96:	07da      	lsls	r2, r3, #31
 8007e98:	d405      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_puts_r+0x4e>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea2:	f000 f86b 	bl	8007f7c <__retarget_lock_release_recursive>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da04      	bge.n	8007eb8 <_puts_r+0x60>
 8007eae:	69a2      	ldr	r2, [r4, #24]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	dc17      	bgt.n	8007ee4 <_puts_r+0x8c>
 8007eb4:	290a      	cmp	r1, #10
 8007eb6:	d015      	beq.n	8007ee4 <_puts_r+0x8c>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	7019      	strb	r1, [r3, #0]
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d1ed      	bne.n	8007eaa <_puts_r+0x52>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da11      	bge.n	8007ef6 <_puts_r+0x9e>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	210a      	movs	r1, #10
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fcbd 	bl	8008856 <__swbuf_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d0d7      	beq.n	8007e90 <_puts_r+0x38>
 8007ee0:	250a      	movs	r5, #10
 8007ee2:	e7d7      	b.n	8007e94 <_puts_r+0x3c>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 fcb5 	bl	8008856 <__swbuf_r>
 8007eec:	3001      	adds	r0, #1
 8007eee:	d1e7      	bne.n	8007ec0 <_puts_r+0x68>
 8007ef0:	e7ce      	b.n	8007e90 <_puts_r+0x38>
 8007ef2:	3e01      	subs	r6, #1
 8007ef4:	e7e4      	b.n	8007ec0 <_puts_r+0x68>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	220a      	movs	r2, #10
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	e7ee      	b.n	8007ee0 <_puts_r+0x88>
	...

08007f04 <puts>:
 8007f04:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <puts+0xc>)
 8007f06:	4601      	mov	r1, r0
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f7ff bfa5 	b.w	8007e58 <_puts_r>
 8007f0e:	bf00      	nop
 8007f10:	24000020 	.word	0x24000020

08007f14 <memset>:
 8007f14:	4402      	add	r2, r0
 8007f16:	4603      	mov	r3, r0
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d100      	bne.n	8007f1e <memset+0xa>
 8007f1c:	4770      	bx	lr
 8007f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f22:	e7f9      	b.n	8007f18 <memset+0x4>

08007f24 <__errno>:
 8007f24:	4b01      	ldr	r3, [pc, #4]	@ (8007f2c <__errno+0x8>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	24000020 	.word	0x24000020

08007f30 <__libc_init_array>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4d0d      	ldr	r5, [pc, #52]	@ (8007f68 <__libc_init_array+0x38>)
 8007f34:	4c0d      	ldr	r4, [pc, #52]	@ (8007f6c <__libc_init_array+0x3c>)
 8007f36:	1b64      	subs	r4, r4, r5
 8007f38:	10a4      	asrs	r4, r4, #2
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	d109      	bne.n	8007f54 <__libc_init_array+0x24>
 8007f40:	4d0b      	ldr	r5, [pc, #44]	@ (8007f70 <__libc_init_array+0x40>)
 8007f42:	4c0c      	ldr	r4, [pc, #48]	@ (8007f74 <__libc_init_array+0x44>)
 8007f44:	f000 fe40 	bl	8008bc8 <_init>
 8007f48:	1b64      	subs	r4, r4, r5
 8007f4a:	10a4      	asrs	r4, r4, #2
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	d105      	bne.n	8007f5e <__libc_init_array+0x2e>
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f58:	4798      	blx	r3
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	e7ee      	b.n	8007f3c <__libc_init_array+0xc>
 8007f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f62:	4798      	blx	r3
 8007f64:	3601      	adds	r6, #1
 8007f66:	e7f2      	b.n	8007f4e <__libc_init_array+0x1e>
 8007f68:	08008e28 	.word	0x08008e28
 8007f6c:	08008e28 	.word	0x08008e28
 8007f70:	08008e28 	.word	0x08008e28
 8007f74:	08008e2c 	.word	0x08008e2c

08007f78 <__retarget_lock_init_recursive>:
 8007f78:	4770      	bx	lr

08007f7a <__retarget_lock_acquire_recursive>:
 8007f7a:	4770      	bx	lr

08007f7c <__retarget_lock_release_recursive>:
 8007f7c:	4770      	bx	lr

08007f7e <__sfputc_r>:
 8007f7e:	6893      	ldr	r3, [r2, #8]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	b410      	push	{r4}
 8007f86:	6093      	str	r3, [r2, #8]
 8007f88:	da08      	bge.n	8007f9c <__sfputc_r+0x1e>
 8007f8a:	6994      	ldr	r4, [r2, #24]
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	db01      	blt.n	8007f94 <__sfputc_r+0x16>
 8007f90:	290a      	cmp	r1, #10
 8007f92:	d103      	bne.n	8007f9c <__sfputc_r+0x1e>
 8007f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f98:	f000 bc5d 	b.w	8008856 <__swbuf_r>
 8007f9c:	6813      	ldr	r3, [r2, #0]
 8007f9e:	1c58      	adds	r0, r3, #1
 8007fa0:	6010      	str	r0, [r2, #0]
 8007fa2:	7019      	strb	r1, [r3, #0]
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <__sfputs_r>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	4614      	mov	r4, r2
 8007fb4:	18d5      	adds	r5, r2, r3
 8007fb6:	42ac      	cmp	r4, r5
 8007fb8:	d101      	bne.n	8007fbe <__sfputs_r+0x12>
 8007fba:	2000      	movs	r0, #0
 8007fbc:	e007      	b.n	8007fce <__sfputs_r+0x22>
 8007fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff ffda 	bl	8007f7e <__sfputc_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d1f3      	bne.n	8007fb6 <__sfputs_r+0xa>
 8007fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fd0 <_vfiprintf_r>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	b09d      	sub	sp, #116	@ 0x74
 8007fd8:	4614      	mov	r4, r2
 8007fda:	4698      	mov	r8, r3
 8007fdc:	4606      	mov	r6, r0
 8007fde:	b118      	cbz	r0, 8007fe8 <_vfiprintf_r+0x18>
 8007fe0:	6a03      	ldr	r3, [r0, #32]
 8007fe2:	b90b      	cbnz	r3, 8007fe8 <_vfiprintf_r+0x18>
 8007fe4:	f7ff fef0 	bl	8007dc8 <__sinit>
 8007fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fea:	07d9      	lsls	r1, r3, #31
 8007fec:	d405      	bmi.n	8007ffa <_vfiprintf_r+0x2a>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	059a      	lsls	r2, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_vfiprintf_r+0x2a>
 8007ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ff6:	f7ff ffc0 	bl	8007f7a <__retarget_lock_acquire_recursive>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	071b      	lsls	r3, r3, #28
 8007ffe:	d501      	bpl.n	8008004 <_vfiprintf_r+0x34>
 8008000:	692b      	ldr	r3, [r5, #16]
 8008002:	b99b      	cbnz	r3, 800802c <_vfiprintf_r+0x5c>
 8008004:	4629      	mov	r1, r5
 8008006:	4630      	mov	r0, r6
 8008008:	f000 fc64 	bl	80088d4 <__swsetup_r>
 800800c:	b170      	cbz	r0, 800802c <_vfiprintf_r+0x5c>
 800800e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008010:	07dc      	lsls	r4, r3, #31
 8008012:	d504      	bpl.n	800801e <_vfiprintf_r+0x4e>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008018:	b01d      	add	sp, #116	@ 0x74
 800801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	0598      	lsls	r0, r3, #22
 8008022:	d4f7      	bmi.n	8008014 <_vfiprintf_r+0x44>
 8008024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008026:	f7ff ffa9 	bl	8007f7c <__retarget_lock_release_recursive>
 800802a:	e7f3      	b.n	8008014 <_vfiprintf_r+0x44>
 800802c:	2300      	movs	r3, #0
 800802e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008030:	2320      	movs	r3, #32
 8008032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008036:	f8cd 800c 	str.w	r8, [sp, #12]
 800803a:	2330      	movs	r3, #48	@ 0x30
 800803c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081ec <_vfiprintf_r+0x21c>
 8008040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008044:	f04f 0901 	mov.w	r9, #1
 8008048:	4623      	mov	r3, r4
 800804a:	469a      	mov	sl, r3
 800804c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008050:	b10a      	cbz	r2, 8008056 <_vfiprintf_r+0x86>
 8008052:	2a25      	cmp	r2, #37	@ 0x25
 8008054:	d1f9      	bne.n	800804a <_vfiprintf_r+0x7a>
 8008056:	ebba 0b04 	subs.w	fp, sl, r4
 800805a:	d00b      	beq.n	8008074 <_vfiprintf_r+0xa4>
 800805c:	465b      	mov	r3, fp
 800805e:	4622      	mov	r2, r4
 8008060:	4629      	mov	r1, r5
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff ffa2 	bl	8007fac <__sfputs_r>
 8008068:	3001      	adds	r0, #1
 800806a:	f000 80a7 	beq.w	80081bc <_vfiprintf_r+0x1ec>
 800806e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008070:	445a      	add	r2, fp
 8008072:	9209      	str	r2, [sp, #36]	@ 0x24
 8008074:	f89a 3000 	ldrb.w	r3, [sl]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 809f 	beq.w	80081bc <_vfiprintf_r+0x1ec>
 800807e:	2300      	movs	r3, #0
 8008080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008088:	f10a 0a01 	add.w	sl, sl, #1
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	9307      	str	r3, [sp, #28]
 8008090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008094:	931a      	str	r3, [sp, #104]	@ 0x68
 8008096:	4654      	mov	r4, sl
 8008098:	2205      	movs	r2, #5
 800809a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809e:	4853      	ldr	r0, [pc, #332]	@ (80081ec <_vfiprintf_r+0x21c>)
 80080a0:	f7f8 f936 	bl	8000310 <memchr>
 80080a4:	9a04      	ldr	r2, [sp, #16]
 80080a6:	b9d8      	cbnz	r0, 80080e0 <_vfiprintf_r+0x110>
 80080a8:	06d1      	lsls	r1, r2, #27
 80080aa:	bf44      	itt	mi
 80080ac:	2320      	movmi	r3, #32
 80080ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b2:	0713      	lsls	r3, r2, #28
 80080b4:	bf44      	itt	mi
 80080b6:	232b      	movmi	r3, #43	@ 0x2b
 80080b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080bc:	f89a 3000 	ldrb.w	r3, [sl]
 80080c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080c2:	d015      	beq.n	80080f0 <_vfiprintf_r+0x120>
 80080c4:	9a07      	ldr	r2, [sp, #28]
 80080c6:	4654      	mov	r4, sl
 80080c8:	2000      	movs	r0, #0
 80080ca:	f04f 0c0a 	mov.w	ip, #10
 80080ce:	4621      	mov	r1, r4
 80080d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080d4:	3b30      	subs	r3, #48	@ 0x30
 80080d6:	2b09      	cmp	r3, #9
 80080d8:	d94b      	bls.n	8008172 <_vfiprintf_r+0x1a2>
 80080da:	b1b0      	cbz	r0, 800810a <_vfiprintf_r+0x13a>
 80080dc:	9207      	str	r2, [sp, #28]
 80080de:	e014      	b.n	800810a <_vfiprintf_r+0x13a>
 80080e0:	eba0 0308 	sub.w	r3, r0, r8
 80080e4:	fa09 f303 	lsl.w	r3, r9, r3
 80080e8:	4313      	orrs	r3, r2
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	46a2      	mov	sl, r4
 80080ee:	e7d2      	b.n	8008096 <_vfiprintf_r+0xc6>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	1d19      	adds	r1, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	9103      	str	r1, [sp, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bfbb      	ittet	lt
 80080fc:	425b      	neglt	r3, r3
 80080fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008102:	9307      	strge	r3, [sp, #28]
 8008104:	9307      	strlt	r3, [sp, #28]
 8008106:	bfb8      	it	lt
 8008108:	9204      	strlt	r2, [sp, #16]
 800810a:	7823      	ldrb	r3, [r4, #0]
 800810c:	2b2e      	cmp	r3, #46	@ 0x2e
 800810e:	d10a      	bne.n	8008126 <_vfiprintf_r+0x156>
 8008110:	7863      	ldrb	r3, [r4, #1]
 8008112:	2b2a      	cmp	r3, #42	@ 0x2a
 8008114:	d132      	bne.n	800817c <_vfiprintf_r+0x1ac>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	9203      	str	r2, [sp, #12]
 800811e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008122:	3402      	adds	r4, #2
 8008124:	9305      	str	r3, [sp, #20]
 8008126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081fc <_vfiprintf_r+0x22c>
 800812a:	7821      	ldrb	r1, [r4, #0]
 800812c:	2203      	movs	r2, #3
 800812e:	4650      	mov	r0, sl
 8008130:	f7f8 f8ee 	bl	8000310 <memchr>
 8008134:	b138      	cbz	r0, 8008146 <_vfiprintf_r+0x176>
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	eba0 000a 	sub.w	r0, r0, sl
 800813c:	2240      	movs	r2, #64	@ 0x40
 800813e:	4082      	lsls	r2, r0
 8008140:	4313      	orrs	r3, r2
 8008142:	3401      	adds	r4, #1
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814a:	4829      	ldr	r0, [pc, #164]	@ (80081f0 <_vfiprintf_r+0x220>)
 800814c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008150:	2206      	movs	r2, #6
 8008152:	f7f8 f8dd 	bl	8000310 <memchr>
 8008156:	2800      	cmp	r0, #0
 8008158:	d03f      	beq.n	80081da <_vfiprintf_r+0x20a>
 800815a:	4b26      	ldr	r3, [pc, #152]	@ (80081f4 <_vfiprintf_r+0x224>)
 800815c:	bb1b      	cbnz	r3, 80081a6 <_vfiprintf_r+0x1d6>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	3307      	adds	r3, #7
 8008162:	f023 0307 	bic.w	r3, r3, #7
 8008166:	3308      	adds	r3, #8
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800816c:	443b      	add	r3, r7
 800816e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008170:	e76a      	b.n	8008048 <_vfiprintf_r+0x78>
 8008172:	fb0c 3202 	mla	r2, ip, r2, r3
 8008176:	460c      	mov	r4, r1
 8008178:	2001      	movs	r0, #1
 800817a:	e7a8      	b.n	80080ce <_vfiprintf_r+0xfe>
 800817c:	2300      	movs	r3, #0
 800817e:	3401      	adds	r4, #1
 8008180:	9305      	str	r3, [sp, #20]
 8008182:	4619      	mov	r1, r3
 8008184:	f04f 0c0a 	mov.w	ip, #10
 8008188:	4620      	mov	r0, r4
 800818a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800818e:	3a30      	subs	r2, #48	@ 0x30
 8008190:	2a09      	cmp	r2, #9
 8008192:	d903      	bls.n	800819c <_vfiprintf_r+0x1cc>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0c6      	beq.n	8008126 <_vfiprintf_r+0x156>
 8008198:	9105      	str	r1, [sp, #20]
 800819a:	e7c4      	b.n	8008126 <_vfiprintf_r+0x156>
 800819c:	fb0c 2101 	mla	r1, ip, r1, r2
 80081a0:	4604      	mov	r4, r0
 80081a2:	2301      	movs	r3, #1
 80081a4:	e7f0      	b.n	8008188 <_vfiprintf_r+0x1b8>
 80081a6:	ab03      	add	r3, sp, #12
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	462a      	mov	r2, r5
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <_vfiprintf_r+0x228>)
 80081ae:	a904      	add	r1, sp, #16
 80081b0:	4630      	mov	r0, r6
 80081b2:	f3af 8000 	nop.w
 80081b6:	4607      	mov	r7, r0
 80081b8:	1c78      	adds	r0, r7, #1
 80081ba:	d1d6      	bne.n	800816a <_vfiprintf_r+0x19a>
 80081bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081be:	07d9      	lsls	r1, r3, #31
 80081c0:	d405      	bmi.n	80081ce <_vfiprintf_r+0x1fe>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	059a      	lsls	r2, r3, #22
 80081c6:	d402      	bmi.n	80081ce <_vfiprintf_r+0x1fe>
 80081c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ca:	f7ff fed7 	bl	8007f7c <__retarget_lock_release_recursive>
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	065b      	lsls	r3, r3, #25
 80081d2:	f53f af1f 	bmi.w	8008014 <_vfiprintf_r+0x44>
 80081d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081d8:	e71e      	b.n	8008018 <_vfiprintf_r+0x48>
 80081da:	ab03      	add	r3, sp, #12
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	462a      	mov	r2, r5
 80081e0:	4b05      	ldr	r3, [pc, #20]	@ (80081f8 <_vfiprintf_r+0x228>)
 80081e2:	a904      	add	r1, sp, #16
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 f91b 	bl	8008420 <_printf_i>
 80081ea:	e7e4      	b.n	80081b6 <_vfiprintf_r+0x1e6>
 80081ec:	08008dec 	.word	0x08008dec
 80081f0:	08008df6 	.word	0x08008df6
 80081f4:	00000000 	.word	0x00000000
 80081f8:	08007fad 	.word	0x08007fad
 80081fc:	08008df2 	.word	0x08008df2

08008200 <sbrk_aligned>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4e0f      	ldr	r6, [pc, #60]	@ (8008240 <sbrk_aligned+0x40>)
 8008204:	460c      	mov	r4, r1
 8008206:	6831      	ldr	r1, [r6, #0]
 8008208:	4605      	mov	r5, r0
 800820a:	b911      	cbnz	r1, 8008212 <sbrk_aligned+0x12>
 800820c:	f000 fc70 	bl	8008af0 <_sbrk_r>
 8008210:	6030      	str	r0, [r6, #0]
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 fc6b 	bl	8008af0 <_sbrk_r>
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	d103      	bne.n	8008226 <sbrk_aligned+0x26>
 800821e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008222:	4620      	mov	r0, r4
 8008224:	bd70      	pop	{r4, r5, r6, pc}
 8008226:	1cc4      	adds	r4, r0, #3
 8008228:	f024 0403 	bic.w	r4, r4, #3
 800822c:	42a0      	cmp	r0, r4
 800822e:	d0f8      	beq.n	8008222 <sbrk_aligned+0x22>
 8008230:	1a21      	subs	r1, r4, r0
 8008232:	4628      	mov	r0, r5
 8008234:	f000 fc5c 	bl	8008af0 <_sbrk_r>
 8008238:	3001      	adds	r0, #1
 800823a:	d1f2      	bne.n	8008222 <sbrk_aligned+0x22>
 800823c:	e7ef      	b.n	800821e <sbrk_aligned+0x1e>
 800823e:	bf00      	nop
 8008240:	24000738 	.word	0x24000738

08008244 <_malloc_r>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	1ccd      	adds	r5, r1, #3
 800824a:	f025 0503 	bic.w	r5, r5, #3
 800824e:	3508      	adds	r5, #8
 8008250:	2d0c      	cmp	r5, #12
 8008252:	bf38      	it	cc
 8008254:	250c      	movcc	r5, #12
 8008256:	2d00      	cmp	r5, #0
 8008258:	4606      	mov	r6, r0
 800825a:	db01      	blt.n	8008260 <_malloc_r+0x1c>
 800825c:	42a9      	cmp	r1, r5
 800825e:	d904      	bls.n	800826a <_malloc_r+0x26>
 8008260:	230c      	movs	r3, #12
 8008262:	6033      	str	r3, [r6, #0]
 8008264:	2000      	movs	r0, #0
 8008266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800826a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008340 <_malloc_r+0xfc>
 800826e:	f000 faa3 	bl	80087b8 <__malloc_lock>
 8008272:	f8d8 3000 	ldr.w	r3, [r8]
 8008276:	461c      	mov	r4, r3
 8008278:	bb44      	cbnz	r4, 80082cc <_malloc_r+0x88>
 800827a:	4629      	mov	r1, r5
 800827c:	4630      	mov	r0, r6
 800827e:	f7ff ffbf 	bl	8008200 <sbrk_aligned>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	4604      	mov	r4, r0
 8008286:	d158      	bne.n	800833a <_malloc_r+0xf6>
 8008288:	f8d8 4000 	ldr.w	r4, [r8]
 800828c:	4627      	mov	r7, r4
 800828e:	2f00      	cmp	r7, #0
 8008290:	d143      	bne.n	800831a <_malloc_r+0xd6>
 8008292:	2c00      	cmp	r4, #0
 8008294:	d04b      	beq.n	800832e <_malloc_r+0xea>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	4639      	mov	r1, r7
 800829a:	4630      	mov	r0, r6
 800829c:	eb04 0903 	add.w	r9, r4, r3
 80082a0:	f000 fc26 	bl	8008af0 <_sbrk_r>
 80082a4:	4581      	cmp	r9, r0
 80082a6:	d142      	bne.n	800832e <_malloc_r+0xea>
 80082a8:	6821      	ldr	r1, [r4, #0]
 80082aa:	1a6d      	subs	r5, r5, r1
 80082ac:	4629      	mov	r1, r5
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ffa6 	bl	8008200 <sbrk_aligned>
 80082b4:	3001      	adds	r0, #1
 80082b6:	d03a      	beq.n	800832e <_malloc_r+0xea>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	442b      	add	r3, r5
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	f8d8 3000 	ldr.w	r3, [r8]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	bb62      	cbnz	r2, 8008320 <_malloc_r+0xdc>
 80082c6:	f8c8 7000 	str.w	r7, [r8]
 80082ca:	e00f      	b.n	80082ec <_malloc_r+0xa8>
 80082cc:	6822      	ldr	r2, [r4, #0]
 80082ce:	1b52      	subs	r2, r2, r5
 80082d0:	d420      	bmi.n	8008314 <_malloc_r+0xd0>
 80082d2:	2a0b      	cmp	r2, #11
 80082d4:	d917      	bls.n	8008306 <_malloc_r+0xc2>
 80082d6:	1961      	adds	r1, r4, r5
 80082d8:	42a3      	cmp	r3, r4
 80082da:	6025      	str	r5, [r4, #0]
 80082dc:	bf18      	it	ne
 80082de:	6059      	strne	r1, [r3, #4]
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	bf08      	it	eq
 80082e4:	f8c8 1000 	streq.w	r1, [r8]
 80082e8:	5162      	str	r2, [r4, r5]
 80082ea:	604b      	str	r3, [r1, #4]
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 fa69 	bl	80087c4 <__malloc_unlock>
 80082f2:	f104 000b 	add.w	r0, r4, #11
 80082f6:	1d23      	adds	r3, r4, #4
 80082f8:	f020 0007 	bic.w	r0, r0, #7
 80082fc:	1ac2      	subs	r2, r0, r3
 80082fe:	bf1c      	itt	ne
 8008300:	1a1b      	subne	r3, r3, r0
 8008302:	50a3      	strne	r3, [r4, r2]
 8008304:	e7af      	b.n	8008266 <_malloc_r+0x22>
 8008306:	6862      	ldr	r2, [r4, #4]
 8008308:	42a3      	cmp	r3, r4
 800830a:	bf0c      	ite	eq
 800830c:	f8c8 2000 	streq.w	r2, [r8]
 8008310:	605a      	strne	r2, [r3, #4]
 8008312:	e7eb      	b.n	80082ec <_malloc_r+0xa8>
 8008314:	4623      	mov	r3, r4
 8008316:	6864      	ldr	r4, [r4, #4]
 8008318:	e7ae      	b.n	8008278 <_malloc_r+0x34>
 800831a:	463c      	mov	r4, r7
 800831c:	687f      	ldr	r7, [r7, #4]
 800831e:	e7b6      	b.n	800828e <_malloc_r+0x4a>
 8008320:	461a      	mov	r2, r3
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	42a3      	cmp	r3, r4
 8008326:	d1fb      	bne.n	8008320 <_malloc_r+0xdc>
 8008328:	2300      	movs	r3, #0
 800832a:	6053      	str	r3, [r2, #4]
 800832c:	e7de      	b.n	80082ec <_malloc_r+0xa8>
 800832e:	230c      	movs	r3, #12
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	4630      	mov	r0, r6
 8008334:	f000 fa46 	bl	80087c4 <__malloc_unlock>
 8008338:	e794      	b.n	8008264 <_malloc_r+0x20>
 800833a:	6005      	str	r5, [r0, #0]
 800833c:	e7d6      	b.n	80082ec <_malloc_r+0xa8>
 800833e:	bf00      	nop
 8008340:	2400073c 	.word	0x2400073c

08008344 <_printf_common>:
 8008344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	4616      	mov	r6, r2
 800834a:	4698      	mov	r8, r3
 800834c:	688a      	ldr	r2, [r1, #8]
 800834e:	690b      	ldr	r3, [r1, #16]
 8008350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008354:	4293      	cmp	r3, r2
 8008356:	bfb8      	it	lt
 8008358:	4613      	movlt	r3, r2
 800835a:	6033      	str	r3, [r6, #0]
 800835c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008360:	4607      	mov	r7, r0
 8008362:	460c      	mov	r4, r1
 8008364:	b10a      	cbz	r2, 800836a <_printf_common+0x26>
 8008366:	3301      	adds	r3, #1
 8008368:	6033      	str	r3, [r6, #0]
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	0699      	lsls	r1, r3, #26
 800836e:	bf42      	ittt	mi
 8008370:	6833      	ldrmi	r3, [r6, #0]
 8008372:	3302      	addmi	r3, #2
 8008374:	6033      	strmi	r3, [r6, #0]
 8008376:	6825      	ldr	r5, [r4, #0]
 8008378:	f015 0506 	ands.w	r5, r5, #6
 800837c:	d106      	bne.n	800838c <_printf_common+0x48>
 800837e:	f104 0a19 	add.w	sl, r4, #25
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	6832      	ldr	r2, [r6, #0]
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	42ab      	cmp	r3, r5
 800838a:	dc26      	bgt.n	80083da <_printf_common+0x96>
 800838c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008390:	6822      	ldr	r2, [r4, #0]
 8008392:	3b00      	subs	r3, #0
 8008394:	bf18      	it	ne
 8008396:	2301      	movne	r3, #1
 8008398:	0692      	lsls	r2, r2, #26
 800839a:	d42b      	bmi.n	80083f4 <_printf_common+0xb0>
 800839c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083a0:	4641      	mov	r1, r8
 80083a2:	4638      	mov	r0, r7
 80083a4:	47c8      	blx	r9
 80083a6:	3001      	adds	r0, #1
 80083a8:	d01e      	beq.n	80083e8 <_printf_common+0xa4>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	f003 0306 	and.w	r3, r3, #6
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	bf02      	ittt	eq
 80083b6:	68e5      	ldreq	r5, [r4, #12]
 80083b8:	6833      	ldreq	r3, [r6, #0]
 80083ba:	1aed      	subeq	r5, r5, r3
 80083bc:	68a3      	ldr	r3, [r4, #8]
 80083be:	bf0c      	ite	eq
 80083c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083c4:	2500      	movne	r5, #0
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bfc4      	itt	gt
 80083ca:	1a9b      	subgt	r3, r3, r2
 80083cc:	18ed      	addgt	r5, r5, r3
 80083ce:	2600      	movs	r6, #0
 80083d0:	341a      	adds	r4, #26
 80083d2:	42b5      	cmp	r5, r6
 80083d4:	d11a      	bne.n	800840c <_printf_common+0xc8>
 80083d6:	2000      	movs	r0, #0
 80083d8:	e008      	b.n	80083ec <_printf_common+0xa8>
 80083da:	2301      	movs	r3, #1
 80083dc:	4652      	mov	r2, sl
 80083de:	4641      	mov	r1, r8
 80083e0:	4638      	mov	r0, r7
 80083e2:	47c8      	blx	r9
 80083e4:	3001      	adds	r0, #1
 80083e6:	d103      	bne.n	80083f0 <_printf_common+0xac>
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f0:	3501      	adds	r5, #1
 80083f2:	e7c6      	b.n	8008382 <_printf_common+0x3e>
 80083f4:	18e1      	adds	r1, r4, r3
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	2030      	movs	r0, #48	@ 0x30
 80083fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083fe:	4422      	add	r2, r4
 8008400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008408:	3302      	adds	r3, #2
 800840a:	e7c7      	b.n	800839c <_printf_common+0x58>
 800840c:	2301      	movs	r3, #1
 800840e:	4622      	mov	r2, r4
 8008410:	4641      	mov	r1, r8
 8008412:	4638      	mov	r0, r7
 8008414:	47c8      	blx	r9
 8008416:	3001      	adds	r0, #1
 8008418:	d0e6      	beq.n	80083e8 <_printf_common+0xa4>
 800841a:	3601      	adds	r6, #1
 800841c:	e7d9      	b.n	80083d2 <_printf_common+0x8e>
	...

08008420 <_printf_i>:
 8008420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	7e0f      	ldrb	r7, [r1, #24]
 8008426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008428:	2f78      	cmp	r7, #120	@ 0x78
 800842a:	4691      	mov	r9, r2
 800842c:	4680      	mov	r8, r0
 800842e:	460c      	mov	r4, r1
 8008430:	469a      	mov	sl, r3
 8008432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008436:	d807      	bhi.n	8008448 <_printf_i+0x28>
 8008438:	2f62      	cmp	r7, #98	@ 0x62
 800843a:	d80a      	bhi.n	8008452 <_printf_i+0x32>
 800843c:	2f00      	cmp	r7, #0
 800843e:	f000 80d2 	beq.w	80085e6 <_printf_i+0x1c6>
 8008442:	2f58      	cmp	r7, #88	@ 0x58
 8008444:	f000 80b9 	beq.w	80085ba <_printf_i+0x19a>
 8008448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800844c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008450:	e03a      	b.n	80084c8 <_printf_i+0xa8>
 8008452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008456:	2b15      	cmp	r3, #21
 8008458:	d8f6      	bhi.n	8008448 <_printf_i+0x28>
 800845a:	a101      	add	r1, pc, #4	@ (adr r1, 8008460 <_printf_i+0x40>)
 800845c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008460:	080084b9 	.word	0x080084b9
 8008464:	080084cd 	.word	0x080084cd
 8008468:	08008449 	.word	0x08008449
 800846c:	08008449 	.word	0x08008449
 8008470:	08008449 	.word	0x08008449
 8008474:	08008449 	.word	0x08008449
 8008478:	080084cd 	.word	0x080084cd
 800847c:	08008449 	.word	0x08008449
 8008480:	08008449 	.word	0x08008449
 8008484:	08008449 	.word	0x08008449
 8008488:	08008449 	.word	0x08008449
 800848c:	080085cd 	.word	0x080085cd
 8008490:	080084f7 	.word	0x080084f7
 8008494:	08008587 	.word	0x08008587
 8008498:	08008449 	.word	0x08008449
 800849c:	08008449 	.word	0x08008449
 80084a0:	080085ef 	.word	0x080085ef
 80084a4:	08008449 	.word	0x08008449
 80084a8:	080084f7 	.word	0x080084f7
 80084ac:	08008449 	.word	0x08008449
 80084b0:	08008449 	.word	0x08008449
 80084b4:	0800858f 	.word	0x0800858f
 80084b8:	6833      	ldr	r3, [r6, #0]
 80084ba:	1d1a      	adds	r2, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6032      	str	r2, [r6, #0]
 80084c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084c8:	2301      	movs	r3, #1
 80084ca:	e09d      	b.n	8008608 <_printf_i+0x1e8>
 80084cc:	6833      	ldr	r3, [r6, #0]
 80084ce:	6820      	ldr	r0, [r4, #0]
 80084d0:	1d19      	adds	r1, r3, #4
 80084d2:	6031      	str	r1, [r6, #0]
 80084d4:	0606      	lsls	r6, r0, #24
 80084d6:	d501      	bpl.n	80084dc <_printf_i+0xbc>
 80084d8:	681d      	ldr	r5, [r3, #0]
 80084da:	e003      	b.n	80084e4 <_printf_i+0xc4>
 80084dc:	0645      	lsls	r5, r0, #25
 80084de:	d5fb      	bpl.n	80084d8 <_printf_i+0xb8>
 80084e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	da03      	bge.n	80084f0 <_printf_i+0xd0>
 80084e8:	232d      	movs	r3, #45	@ 0x2d
 80084ea:	426d      	negs	r5, r5
 80084ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084f0:	4859      	ldr	r0, [pc, #356]	@ (8008658 <_printf_i+0x238>)
 80084f2:	230a      	movs	r3, #10
 80084f4:	e011      	b.n	800851a <_printf_i+0xfa>
 80084f6:	6821      	ldr	r1, [r4, #0]
 80084f8:	6833      	ldr	r3, [r6, #0]
 80084fa:	0608      	lsls	r0, r1, #24
 80084fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008500:	d402      	bmi.n	8008508 <_printf_i+0xe8>
 8008502:	0649      	lsls	r1, r1, #25
 8008504:	bf48      	it	mi
 8008506:	b2ad      	uxthmi	r5, r5
 8008508:	2f6f      	cmp	r7, #111	@ 0x6f
 800850a:	4853      	ldr	r0, [pc, #332]	@ (8008658 <_printf_i+0x238>)
 800850c:	6033      	str	r3, [r6, #0]
 800850e:	bf14      	ite	ne
 8008510:	230a      	movne	r3, #10
 8008512:	2308      	moveq	r3, #8
 8008514:	2100      	movs	r1, #0
 8008516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800851a:	6866      	ldr	r6, [r4, #4]
 800851c:	60a6      	str	r6, [r4, #8]
 800851e:	2e00      	cmp	r6, #0
 8008520:	bfa2      	ittt	ge
 8008522:	6821      	ldrge	r1, [r4, #0]
 8008524:	f021 0104 	bicge.w	r1, r1, #4
 8008528:	6021      	strge	r1, [r4, #0]
 800852a:	b90d      	cbnz	r5, 8008530 <_printf_i+0x110>
 800852c:	2e00      	cmp	r6, #0
 800852e:	d04b      	beq.n	80085c8 <_printf_i+0x1a8>
 8008530:	4616      	mov	r6, r2
 8008532:	fbb5 f1f3 	udiv	r1, r5, r3
 8008536:	fb03 5711 	mls	r7, r3, r1, r5
 800853a:	5dc7      	ldrb	r7, [r0, r7]
 800853c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008540:	462f      	mov	r7, r5
 8008542:	42bb      	cmp	r3, r7
 8008544:	460d      	mov	r5, r1
 8008546:	d9f4      	bls.n	8008532 <_printf_i+0x112>
 8008548:	2b08      	cmp	r3, #8
 800854a:	d10b      	bne.n	8008564 <_printf_i+0x144>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	07df      	lsls	r7, r3, #31
 8008550:	d508      	bpl.n	8008564 <_printf_i+0x144>
 8008552:	6923      	ldr	r3, [r4, #16]
 8008554:	6861      	ldr	r1, [r4, #4]
 8008556:	4299      	cmp	r1, r3
 8008558:	bfde      	ittt	le
 800855a:	2330      	movle	r3, #48	@ 0x30
 800855c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008560:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008564:	1b92      	subs	r2, r2, r6
 8008566:	6122      	str	r2, [r4, #16]
 8008568:	f8cd a000 	str.w	sl, [sp]
 800856c:	464b      	mov	r3, r9
 800856e:	aa03      	add	r2, sp, #12
 8008570:	4621      	mov	r1, r4
 8008572:	4640      	mov	r0, r8
 8008574:	f7ff fee6 	bl	8008344 <_printf_common>
 8008578:	3001      	adds	r0, #1
 800857a:	d14a      	bne.n	8008612 <_printf_i+0x1f2>
 800857c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008580:	b004      	add	sp, #16
 8008582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	f043 0320 	orr.w	r3, r3, #32
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	4833      	ldr	r0, [pc, #204]	@ (800865c <_printf_i+0x23c>)
 8008590:	2778      	movs	r7, #120	@ 0x78
 8008592:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	6831      	ldr	r1, [r6, #0]
 800859a:	061f      	lsls	r7, r3, #24
 800859c:	f851 5b04 	ldr.w	r5, [r1], #4
 80085a0:	d402      	bmi.n	80085a8 <_printf_i+0x188>
 80085a2:	065f      	lsls	r7, r3, #25
 80085a4:	bf48      	it	mi
 80085a6:	b2ad      	uxthmi	r5, r5
 80085a8:	6031      	str	r1, [r6, #0]
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	bf44      	itt	mi
 80085ae:	f043 0320 	orrmi.w	r3, r3, #32
 80085b2:	6023      	strmi	r3, [r4, #0]
 80085b4:	b11d      	cbz	r5, 80085be <_printf_i+0x19e>
 80085b6:	2310      	movs	r3, #16
 80085b8:	e7ac      	b.n	8008514 <_printf_i+0xf4>
 80085ba:	4827      	ldr	r0, [pc, #156]	@ (8008658 <_printf_i+0x238>)
 80085bc:	e7e9      	b.n	8008592 <_printf_i+0x172>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	f023 0320 	bic.w	r3, r3, #32
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	e7f6      	b.n	80085b6 <_printf_i+0x196>
 80085c8:	4616      	mov	r6, r2
 80085ca:	e7bd      	b.n	8008548 <_printf_i+0x128>
 80085cc:	6833      	ldr	r3, [r6, #0]
 80085ce:	6825      	ldr	r5, [r4, #0]
 80085d0:	6961      	ldr	r1, [r4, #20]
 80085d2:	1d18      	adds	r0, r3, #4
 80085d4:	6030      	str	r0, [r6, #0]
 80085d6:	062e      	lsls	r6, r5, #24
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	d501      	bpl.n	80085e0 <_printf_i+0x1c0>
 80085dc:	6019      	str	r1, [r3, #0]
 80085de:	e002      	b.n	80085e6 <_printf_i+0x1c6>
 80085e0:	0668      	lsls	r0, r5, #25
 80085e2:	d5fb      	bpl.n	80085dc <_printf_i+0x1bc>
 80085e4:	8019      	strh	r1, [r3, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	6123      	str	r3, [r4, #16]
 80085ea:	4616      	mov	r6, r2
 80085ec:	e7bc      	b.n	8008568 <_printf_i+0x148>
 80085ee:	6833      	ldr	r3, [r6, #0]
 80085f0:	1d1a      	adds	r2, r3, #4
 80085f2:	6032      	str	r2, [r6, #0]
 80085f4:	681e      	ldr	r6, [r3, #0]
 80085f6:	6862      	ldr	r2, [r4, #4]
 80085f8:	2100      	movs	r1, #0
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7f7 fe88 	bl	8000310 <memchr>
 8008600:	b108      	cbz	r0, 8008606 <_printf_i+0x1e6>
 8008602:	1b80      	subs	r0, r0, r6
 8008604:	6060      	str	r0, [r4, #4]
 8008606:	6863      	ldr	r3, [r4, #4]
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	2300      	movs	r3, #0
 800860c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008610:	e7aa      	b.n	8008568 <_printf_i+0x148>
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	4632      	mov	r2, r6
 8008616:	4649      	mov	r1, r9
 8008618:	4640      	mov	r0, r8
 800861a:	47d0      	blx	sl
 800861c:	3001      	adds	r0, #1
 800861e:	d0ad      	beq.n	800857c <_printf_i+0x15c>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	079b      	lsls	r3, r3, #30
 8008624:	d413      	bmi.n	800864e <_printf_i+0x22e>
 8008626:	68e0      	ldr	r0, [r4, #12]
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	4298      	cmp	r0, r3
 800862c:	bfb8      	it	lt
 800862e:	4618      	movlt	r0, r3
 8008630:	e7a6      	b.n	8008580 <_printf_i+0x160>
 8008632:	2301      	movs	r3, #1
 8008634:	4632      	mov	r2, r6
 8008636:	4649      	mov	r1, r9
 8008638:	4640      	mov	r0, r8
 800863a:	47d0      	blx	sl
 800863c:	3001      	adds	r0, #1
 800863e:	d09d      	beq.n	800857c <_printf_i+0x15c>
 8008640:	3501      	adds	r5, #1
 8008642:	68e3      	ldr	r3, [r4, #12]
 8008644:	9903      	ldr	r1, [sp, #12]
 8008646:	1a5b      	subs	r3, r3, r1
 8008648:	42ab      	cmp	r3, r5
 800864a:	dcf2      	bgt.n	8008632 <_printf_i+0x212>
 800864c:	e7eb      	b.n	8008626 <_printf_i+0x206>
 800864e:	2500      	movs	r5, #0
 8008650:	f104 0619 	add.w	r6, r4, #25
 8008654:	e7f5      	b.n	8008642 <_printf_i+0x222>
 8008656:	bf00      	nop
 8008658:	08008dfd 	.word	0x08008dfd
 800865c:	08008e0e 	.word	0x08008e0e

08008660 <__sflush_r>:
 8008660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008668:	0716      	lsls	r6, r2, #28
 800866a:	4605      	mov	r5, r0
 800866c:	460c      	mov	r4, r1
 800866e:	d454      	bmi.n	800871a <__sflush_r+0xba>
 8008670:	684b      	ldr	r3, [r1, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	dc02      	bgt.n	800867c <__sflush_r+0x1c>
 8008676:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	dd48      	ble.n	800870e <__sflush_r+0xae>
 800867c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800867e:	2e00      	cmp	r6, #0
 8008680:	d045      	beq.n	800870e <__sflush_r+0xae>
 8008682:	2300      	movs	r3, #0
 8008684:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008688:	682f      	ldr	r7, [r5, #0]
 800868a:	6a21      	ldr	r1, [r4, #32]
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	d030      	beq.n	80086f2 <__sflush_r+0x92>
 8008690:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	0759      	lsls	r1, r3, #29
 8008696:	d505      	bpl.n	80086a4 <__sflush_r+0x44>
 8008698:	6863      	ldr	r3, [r4, #4]
 800869a:	1ad2      	subs	r2, r2, r3
 800869c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800869e:	b10b      	cbz	r3, 80086a4 <__sflush_r+0x44>
 80086a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	2300      	movs	r3, #0
 80086a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086a8:	6a21      	ldr	r1, [r4, #32]
 80086aa:	4628      	mov	r0, r5
 80086ac:	47b0      	blx	r6
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	d106      	bne.n	80086c2 <__sflush_r+0x62>
 80086b4:	6829      	ldr	r1, [r5, #0]
 80086b6:	291d      	cmp	r1, #29
 80086b8:	d82b      	bhi.n	8008712 <__sflush_r+0xb2>
 80086ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008764 <__sflush_r+0x104>)
 80086bc:	410a      	asrs	r2, r1
 80086be:	07d6      	lsls	r6, r2, #31
 80086c0:	d427      	bmi.n	8008712 <__sflush_r+0xb2>
 80086c2:	2200      	movs	r2, #0
 80086c4:	6062      	str	r2, [r4, #4]
 80086c6:	04d9      	lsls	r1, r3, #19
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	6022      	str	r2, [r4, #0]
 80086cc:	d504      	bpl.n	80086d8 <__sflush_r+0x78>
 80086ce:	1c42      	adds	r2, r0, #1
 80086d0:	d101      	bne.n	80086d6 <__sflush_r+0x76>
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	b903      	cbnz	r3, 80086d8 <__sflush_r+0x78>
 80086d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80086d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086da:	602f      	str	r7, [r5, #0]
 80086dc:	b1b9      	cbz	r1, 800870e <__sflush_r+0xae>
 80086de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086e2:	4299      	cmp	r1, r3
 80086e4:	d002      	beq.n	80086ec <__sflush_r+0x8c>
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 fa24 	bl	8008b34 <_free_r>
 80086ec:	2300      	movs	r3, #0
 80086ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80086f0:	e00d      	b.n	800870e <__sflush_r+0xae>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b0      	blx	r6
 80086f8:	4602      	mov	r2, r0
 80086fa:	1c50      	adds	r0, r2, #1
 80086fc:	d1c9      	bne.n	8008692 <__sflush_r+0x32>
 80086fe:	682b      	ldr	r3, [r5, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0c6      	beq.n	8008692 <__sflush_r+0x32>
 8008704:	2b1d      	cmp	r3, #29
 8008706:	d001      	beq.n	800870c <__sflush_r+0xac>
 8008708:	2b16      	cmp	r3, #22
 800870a:	d11e      	bne.n	800874a <__sflush_r+0xea>
 800870c:	602f      	str	r7, [r5, #0]
 800870e:	2000      	movs	r0, #0
 8008710:	e022      	b.n	8008758 <__sflush_r+0xf8>
 8008712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008716:	b21b      	sxth	r3, r3
 8008718:	e01b      	b.n	8008752 <__sflush_r+0xf2>
 800871a:	690f      	ldr	r7, [r1, #16]
 800871c:	2f00      	cmp	r7, #0
 800871e:	d0f6      	beq.n	800870e <__sflush_r+0xae>
 8008720:	0793      	lsls	r3, r2, #30
 8008722:	680e      	ldr	r6, [r1, #0]
 8008724:	bf08      	it	eq
 8008726:	694b      	ldreq	r3, [r1, #20]
 8008728:	600f      	str	r7, [r1, #0]
 800872a:	bf18      	it	ne
 800872c:	2300      	movne	r3, #0
 800872e:	eba6 0807 	sub.w	r8, r6, r7
 8008732:	608b      	str	r3, [r1, #8]
 8008734:	f1b8 0f00 	cmp.w	r8, #0
 8008738:	dde9      	ble.n	800870e <__sflush_r+0xae>
 800873a:	6a21      	ldr	r1, [r4, #32]
 800873c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800873e:	4643      	mov	r3, r8
 8008740:	463a      	mov	r2, r7
 8008742:	4628      	mov	r0, r5
 8008744:	47b0      	blx	r6
 8008746:	2800      	cmp	r0, #0
 8008748:	dc08      	bgt.n	800875c <__sflush_r+0xfc>
 800874a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875c:	4407      	add	r7, r0
 800875e:	eba8 0800 	sub.w	r8, r8, r0
 8008762:	e7e7      	b.n	8008734 <__sflush_r+0xd4>
 8008764:	dfbffffe 	.word	0xdfbffffe

08008768 <_fflush_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	690b      	ldr	r3, [r1, #16]
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b913      	cbnz	r3, 8008778 <_fflush_r+0x10>
 8008772:	2500      	movs	r5, #0
 8008774:	4628      	mov	r0, r5
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	b118      	cbz	r0, 8008782 <_fflush_r+0x1a>
 800877a:	6a03      	ldr	r3, [r0, #32]
 800877c:	b90b      	cbnz	r3, 8008782 <_fflush_r+0x1a>
 800877e:	f7ff fb23 	bl	8007dc8 <__sinit>
 8008782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f3      	beq.n	8008772 <_fflush_r+0xa>
 800878a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800878c:	07d0      	lsls	r0, r2, #31
 800878e:	d404      	bmi.n	800879a <_fflush_r+0x32>
 8008790:	0599      	lsls	r1, r3, #22
 8008792:	d402      	bmi.n	800879a <_fflush_r+0x32>
 8008794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008796:	f7ff fbf0 	bl	8007f7a <__retarget_lock_acquire_recursive>
 800879a:	4628      	mov	r0, r5
 800879c:	4621      	mov	r1, r4
 800879e:	f7ff ff5f 	bl	8008660 <__sflush_r>
 80087a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087a4:	07da      	lsls	r2, r3, #31
 80087a6:	4605      	mov	r5, r0
 80087a8:	d4e4      	bmi.n	8008774 <_fflush_r+0xc>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	059b      	lsls	r3, r3, #22
 80087ae:	d4e1      	bmi.n	8008774 <_fflush_r+0xc>
 80087b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087b2:	f7ff fbe3 	bl	8007f7c <__retarget_lock_release_recursive>
 80087b6:	e7dd      	b.n	8008774 <_fflush_r+0xc>

080087b8 <__malloc_lock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	@ (80087c0 <__malloc_lock+0x8>)
 80087ba:	f7ff bbde 	b.w	8007f7a <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	24000734 	.word	0x24000734

080087c4 <__malloc_unlock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	@ (80087cc <__malloc_unlock+0x8>)
 80087c6:	f7ff bbd9 	b.w	8007f7c <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	24000734 	.word	0x24000734

080087d0 <__sread>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	460c      	mov	r4, r1
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	f000 f978 	bl	8008acc <_read_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	bfab      	itete	ge
 80087e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087e2:	89a3      	ldrhlt	r3, [r4, #12]
 80087e4:	181b      	addge	r3, r3, r0
 80087e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087ea:	bfac      	ite	ge
 80087ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087ee:	81a3      	strhlt	r3, [r4, #12]
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <__swrite>:
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	461f      	mov	r7, r3
 80087f8:	898b      	ldrh	r3, [r1, #12]
 80087fa:	05db      	lsls	r3, r3, #23
 80087fc:	4605      	mov	r5, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	4616      	mov	r6, r2
 8008802:	d505      	bpl.n	8008810 <__swrite+0x1e>
 8008804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008808:	2302      	movs	r3, #2
 800880a:	2200      	movs	r2, #0
 800880c:	f000 f94c 	bl	8008aa8 <_lseek_r>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	4632      	mov	r2, r6
 800881e:	463b      	mov	r3, r7
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	f000 b973 	b.w	8008b10 <_write_r>

0800882a <__sseek>:
 800882a:	b510      	push	{r4, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008832:	f000 f939 	bl	8008aa8 <_lseek_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	bf15      	itete	ne
 800883c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800883e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008846:	81a3      	strheq	r3, [r4, #12]
 8008848:	bf18      	it	ne
 800884a:	81a3      	strhne	r3, [r4, #12]
 800884c:	bd10      	pop	{r4, pc}

0800884e <__sclose>:
 800884e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008852:	f000 b8f7 	b.w	8008a44 <_close_r>

08008856 <__swbuf_r>:
 8008856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008858:	460e      	mov	r6, r1
 800885a:	4614      	mov	r4, r2
 800885c:	4605      	mov	r5, r0
 800885e:	b118      	cbz	r0, 8008868 <__swbuf_r+0x12>
 8008860:	6a03      	ldr	r3, [r0, #32]
 8008862:	b90b      	cbnz	r3, 8008868 <__swbuf_r+0x12>
 8008864:	f7ff fab0 	bl	8007dc8 <__sinit>
 8008868:	69a3      	ldr	r3, [r4, #24]
 800886a:	60a3      	str	r3, [r4, #8]
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	071a      	lsls	r2, r3, #28
 8008870:	d501      	bpl.n	8008876 <__swbuf_r+0x20>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	b943      	cbnz	r3, 8008888 <__swbuf_r+0x32>
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 f82b 	bl	80088d4 <__swsetup_r>
 800887e:	b118      	cbz	r0, 8008888 <__swbuf_r+0x32>
 8008880:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008884:	4638      	mov	r0, r7
 8008886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	6922      	ldr	r2, [r4, #16]
 800888c:	1a98      	subs	r0, r3, r2
 800888e:	6963      	ldr	r3, [r4, #20]
 8008890:	b2f6      	uxtb	r6, r6
 8008892:	4283      	cmp	r3, r0
 8008894:	4637      	mov	r7, r6
 8008896:	dc05      	bgt.n	80088a4 <__swbuf_r+0x4e>
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f7ff ff64 	bl	8008768 <_fflush_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d1ed      	bne.n	8008880 <__swbuf_r+0x2a>
 80088a4:	68a3      	ldr	r3, [r4, #8]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	60a3      	str	r3, [r4, #8]
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	6022      	str	r2, [r4, #0]
 80088b0:	701e      	strb	r6, [r3, #0]
 80088b2:	6962      	ldr	r2, [r4, #20]
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d004      	beq.n	80088c4 <__swbuf_r+0x6e>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	07db      	lsls	r3, r3, #31
 80088be:	d5e1      	bpl.n	8008884 <__swbuf_r+0x2e>
 80088c0:	2e0a      	cmp	r6, #10
 80088c2:	d1df      	bne.n	8008884 <__swbuf_r+0x2e>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff ff4e 	bl	8008768 <_fflush_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0d9      	beq.n	8008884 <__swbuf_r+0x2e>
 80088d0:	e7d6      	b.n	8008880 <__swbuf_r+0x2a>
	...

080088d4 <__swsetup_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4b29      	ldr	r3, [pc, #164]	@ (800897c <__swsetup_r+0xa8>)
 80088d8:	4605      	mov	r5, r0
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	460c      	mov	r4, r1
 80088de:	b118      	cbz	r0, 80088e8 <__swsetup_r+0x14>
 80088e0:	6a03      	ldr	r3, [r0, #32]
 80088e2:	b90b      	cbnz	r3, 80088e8 <__swsetup_r+0x14>
 80088e4:	f7ff fa70 	bl	8007dc8 <__sinit>
 80088e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ec:	0719      	lsls	r1, r3, #28
 80088ee:	d422      	bmi.n	8008936 <__swsetup_r+0x62>
 80088f0:	06da      	lsls	r2, r3, #27
 80088f2:	d407      	bmi.n	8008904 <__swsetup_r+0x30>
 80088f4:	2209      	movs	r2, #9
 80088f6:	602a      	str	r2, [r5, #0]
 80088f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008902:	e033      	b.n	800896c <__swsetup_r+0x98>
 8008904:	0758      	lsls	r0, r3, #29
 8008906:	d512      	bpl.n	800892e <__swsetup_r+0x5a>
 8008908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800890a:	b141      	cbz	r1, 800891e <__swsetup_r+0x4a>
 800890c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008910:	4299      	cmp	r1, r3
 8008912:	d002      	beq.n	800891a <__swsetup_r+0x46>
 8008914:	4628      	mov	r0, r5
 8008916:	f000 f90d 	bl	8008b34 <_free_r>
 800891a:	2300      	movs	r3, #0
 800891c:	6363      	str	r3, [r4, #52]	@ 0x34
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	2300      	movs	r3, #0
 8008928:	6063      	str	r3, [r4, #4]
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	f043 0308 	orr.w	r3, r3, #8
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	b94b      	cbnz	r3, 800894e <__swsetup_r+0x7a>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008944:	d003      	beq.n	800894e <__swsetup_r+0x7a>
 8008946:	4621      	mov	r1, r4
 8008948:	4628      	mov	r0, r5
 800894a:	f000 f83f 	bl	80089cc <__smakebuf_r>
 800894e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008952:	f013 0201 	ands.w	r2, r3, #1
 8008956:	d00a      	beq.n	800896e <__swsetup_r+0x9a>
 8008958:	2200      	movs	r2, #0
 800895a:	60a2      	str	r2, [r4, #8]
 800895c:	6962      	ldr	r2, [r4, #20]
 800895e:	4252      	negs	r2, r2
 8008960:	61a2      	str	r2, [r4, #24]
 8008962:	6922      	ldr	r2, [r4, #16]
 8008964:	b942      	cbnz	r2, 8008978 <__swsetup_r+0xa4>
 8008966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800896a:	d1c5      	bne.n	80088f8 <__swsetup_r+0x24>
 800896c:	bd38      	pop	{r3, r4, r5, pc}
 800896e:	0799      	lsls	r1, r3, #30
 8008970:	bf58      	it	pl
 8008972:	6962      	ldrpl	r2, [r4, #20]
 8008974:	60a2      	str	r2, [r4, #8]
 8008976:	e7f4      	b.n	8008962 <__swsetup_r+0x8e>
 8008978:	2000      	movs	r0, #0
 800897a:	e7f7      	b.n	800896c <__swsetup_r+0x98>
 800897c:	24000020 	.word	0x24000020

08008980 <__swhatbuf_r>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008988:	2900      	cmp	r1, #0
 800898a:	b096      	sub	sp, #88	@ 0x58
 800898c:	4615      	mov	r5, r2
 800898e:	461e      	mov	r6, r3
 8008990:	da0d      	bge.n	80089ae <__swhatbuf_r+0x2e>
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008998:	f04f 0100 	mov.w	r1, #0
 800899c:	bf14      	ite	ne
 800899e:	2340      	movne	r3, #64	@ 0x40
 80089a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089a4:	2000      	movs	r0, #0
 80089a6:	6031      	str	r1, [r6, #0]
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	b016      	add	sp, #88	@ 0x58
 80089ac:	bd70      	pop	{r4, r5, r6, pc}
 80089ae:	466a      	mov	r2, sp
 80089b0:	f000 f858 	bl	8008a64 <_fstat_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	dbec      	blt.n	8008992 <__swhatbuf_r+0x12>
 80089b8:	9901      	ldr	r1, [sp, #4]
 80089ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089c2:	4259      	negs	r1, r3
 80089c4:	4159      	adcs	r1, r3
 80089c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ca:	e7eb      	b.n	80089a4 <__swhatbuf_r+0x24>

080089cc <__smakebuf_r>:
 80089cc:	898b      	ldrh	r3, [r1, #12]
 80089ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089d0:	079d      	lsls	r5, r3, #30
 80089d2:	4606      	mov	r6, r0
 80089d4:	460c      	mov	r4, r1
 80089d6:	d507      	bpl.n	80089e8 <__smakebuf_r+0x1c>
 80089d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	6123      	str	r3, [r4, #16]
 80089e0:	2301      	movs	r3, #1
 80089e2:	6163      	str	r3, [r4, #20]
 80089e4:	b003      	add	sp, #12
 80089e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e8:	ab01      	add	r3, sp, #4
 80089ea:	466a      	mov	r2, sp
 80089ec:	f7ff ffc8 	bl	8008980 <__swhatbuf_r>
 80089f0:	9f00      	ldr	r7, [sp, #0]
 80089f2:	4605      	mov	r5, r0
 80089f4:	4639      	mov	r1, r7
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff fc24 	bl	8008244 <_malloc_r>
 80089fc:	b948      	cbnz	r0, 8008a12 <__smakebuf_r+0x46>
 80089fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a02:	059a      	lsls	r2, r3, #22
 8008a04:	d4ee      	bmi.n	80089e4 <__smakebuf_r+0x18>
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	f043 0302 	orr.w	r3, r3, #2
 8008a0e:	81a3      	strh	r3, [r4, #12]
 8008a10:	e7e2      	b.n	80089d8 <__smakebuf_r+0xc>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	6020      	str	r0, [r4, #0]
 8008a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a22:	b15b      	cbz	r3, 8008a3c <__smakebuf_r+0x70>
 8008a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f000 f82d 	bl	8008a88 <_isatty_r>
 8008a2e:	b128      	cbz	r0, 8008a3c <__smakebuf_r+0x70>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	431d      	orrs	r5, r3
 8008a40:	81a5      	strh	r5, [r4, #12]
 8008a42:	e7cf      	b.n	80089e4 <__smakebuf_r+0x18>

08008a44 <_close_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d06      	ldr	r5, [pc, #24]	@ (8008a60 <_close_r+0x1c>)
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	f7f8 fb6f 	bl	8001132 <_close>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_close_r+0x1a>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_close_r+0x1a>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	24000740 	.word	0x24000740

08008a64 <_fstat_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	@ (8008a84 <_fstat_r+0x20>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	f7f8 fb6a 	bl	800114a <_fstat>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d102      	bne.n	8008a80 <_fstat_r+0x1c>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b103      	cbz	r3, 8008a80 <_fstat_r+0x1c>
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	bf00      	nop
 8008a84:	24000740 	.word	0x24000740

08008a88 <_isatty_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_isatty_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f8 fb69 	bl	800116a <_isatty>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_isatty_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_isatty_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	24000740 	.word	0x24000740

08008aa8 <_lseek_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ac8 <_lseek_r+0x20>)
 8008aac:	4604      	mov	r4, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7f8 fb62 	bl	8001180 <_lseek>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_lseek_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_lseek_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	24000740 	.word	0x24000740

08008acc <_read_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	@ (8008aec <_read_r+0x20>)
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	602a      	str	r2, [r5, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	f7f8 fb0c 	bl	80010f8 <_read>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_read_r+0x1e>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_read_r+0x1e>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	24000740 	.word	0x24000740

08008af0 <_sbrk_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d06      	ldr	r5, [pc, #24]	@ (8008b0c <_sbrk_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7f8 fb4e 	bl	800119c <_sbrk>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_sbrk_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_sbrk_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	24000740 	.word	0x24000740

08008b10 <_write_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	@ (8008b30 <_write_r+0x20>)
 8008b14:	4604      	mov	r4, r0
 8008b16:	4608      	mov	r0, r1
 8008b18:	4611      	mov	r1, r2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f7f8 f990 	bl	8000e44 <_write>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_write_r+0x1e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_write_r+0x1e>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	24000740 	.word	0x24000740

08008b34 <_free_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4605      	mov	r5, r0
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	d041      	beq.n	8008bc0 <_free_r+0x8c>
 8008b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b40:	1f0c      	subs	r4, r1, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfb8      	it	lt
 8008b46:	18e4      	addlt	r4, r4, r3
 8008b48:	f7ff fe36 	bl	80087b8 <__malloc_lock>
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc4 <_free_r+0x90>)
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	b933      	cbnz	r3, 8008b60 <_free_r+0x2c>
 8008b52:	6063      	str	r3, [r4, #4]
 8008b54:	6014      	str	r4, [r2, #0]
 8008b56:	4628      	mov	r0, r5
 8008b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5c:	f7ff be32 	b.w	80087c4 <__malloc_unlock>
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d908      	bls.n	8008b76 <_free_r+0x42>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	1821      	adds	r1, r4, r0
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	bf01      	itttt	eq
 8008b6c:	6819      	ldreq	r1, [r3, #0]
 8008b6e:	685b      	ldreq	r3, [r3, #4]
 8008b70:	1809      	addeq	r1, r1, r0
 8008b72:	6021      	streq	r1, [r4, #0]
 8008b74:	e7ed      	b.n	8008b52 <_free_r+0x1e>
 8008b76:	461a      	mov	r2, r3
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	b10b      	cbz	r3, 8008b80 <_free_r+0x4c>
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	d9fa      	bls.n	8008b76 <_free_r+0x42>
 8008b80:	6811      	ldr	r1, [r2, #0]
 8008b82:	1850      	adds	r0, r2, r1
 8008b84:	42a0      	cmp	r0, r4
 8008b86:	d10b      	bne.n	8008ba0 <_free_r+0x6c>
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	4401      	add	r1, r0
 8008b8c:	1850      	adds	r0, r2, r1
 8008b8e:	4283      	cmp	r3, r0
 8008b90:	6011      	str	r1, [r2, #0]
 8008b92:	d1e0      	bne.n	8008b56 <_free_r+0x22>
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	6053      	str	r3, [r2, #4]
 8008b9a:	4408      	add	r0, r1
 8008b9c:	6010      	str	r0, [r2, #0]
 8008b9e:	e7da      	b.n	8008b56 <_free_r+0x22>
 8008ba0:	d902      	bls.n	8008ba8 <_free_r+0x74>
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	602b      	str	r3, [r5, #0]
 8008ba6:	e7d6      	b.n	8008b56 <_free_r+0x22>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	1821      	adds	r1, r4, r0
 8008bac:	428b      	cmp	r3, r1
 8008bae:	bf04      	itt	eq
 8008bb0:	6819      	ldreq	r1, [r3, #0]
 8008bb2:	685b      	ldreq	r3, [r3, #4]
 8008bb4:	6063      	str	r3, [r4, #4]
 8008bb6:	bf04      	itt	eq
 8008bb8:	1809      	addeq	r1, r1, r0
 8008bba:	6021      	streq	r1, [r4, #0]
 8008bbc:	6054      	str	r4, [r2, #4]
 8008bbe:	e7ca      	b.n	8008b56 <_free_r+0x22>
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	bf00      	nop
 8008bc4:	2400073c 	.word	0x2400073c

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
